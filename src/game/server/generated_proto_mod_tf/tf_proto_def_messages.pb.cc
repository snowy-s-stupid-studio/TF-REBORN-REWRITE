// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf_proto_def_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tf_proto_def_messages.pb.h"

// VALVE - Disable some warnings that this code generates, but we wish to leave on in our projects

#if _MSC_VER >= 1300
#pragma warning(push)
#pragma warning(disable : 4530)  // warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)  // warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)  // warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)  // warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)  // warning C4127: conditional expression is constant
#pragma warning(disable : 4100)  // warning C4100: 'op' : unreferenced formal parameter
#endif // _MSC_VER
#if _GNUC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _GNUC
// VALVE

// VALVE - Disable some warnings that this code generates, but we wish to leave on in our projects

#if _MSC_VER >= 1300
#pragma warning(push)
#pragma warning(disable : 4530)  // warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)  // warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)  // warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)  // warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)  // warning C4127: conditional expression is constant
#pragma warning(disable : 4100)  // warning C4100: 'op' : unreferenced formal parameter
#endif // _MSC_VER
#if _GNUC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _GNUC
// VALVE

// VALVE - Disable some warnings that this code generates, but we wish to leave on in our projects

#if _MSC_VER >= 1300
#pragma warning(push)
#pragma warning(disable : 4530)  // warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)  // warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)  // warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)  // warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)  // warning C4127: conditional expression is constant
#pragma warning(disable : 4100)  // warning C4100: 'op' : unreferenced formal parameter
#endif // _MSC_VER
#if _GNUC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _GNUC
// VALVE

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgFieldID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFieldID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgFieldID_CMsgField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgFieldID_CMsgField_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgUniversalFieldID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgUniversalFieldID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgVariableDefinition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgVariableDefinition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgProtoDefHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgProtoDefHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgValidTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgValidTypes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgProtoDefID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgProtoDefID_reflection_ = NULL;
struct CMsgProtoDefIDOneofInstance {
  const ::CMsgQuestMapNodeDef* instance_def_type_quest_map_node_;
  const ::CMsgQuestTheme* instance_def_type_quest_theme_;
  const ::CMsgQuestMapRegionDef* instance_def_type_quest_map_region_;
  const ::CMsgQuestDef* instance_def_type_quest_;
  const ::CMsgQuestObjectiveDef* instance_def_type_quest_objective_;
  const ::CMsgPaintKit_Variables* instance_def_type_paintkit_variables_;
  const ::CMsgPaintKit_Operation* instance_def_type_paintkit_operation_;
  const ::CMsgPaintKit_ItemDefinition* instance_def_type_paintkit_item_definition_;
  const ::CMsgPaintKit_Definition* instance_def_type_paintkit_definition_;
  const ::CMsgHeaderOnly* instance_def_type_header_only_;
}* CMsgProtoDefID_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestObjectiveDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestObjectiveDef_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgQuestObjectiveDef_ETF2GameModes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Conditions_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Team_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestDef_MMCriteria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestDef_MMCriteria_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestDef_ObjectiveInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestDef_ObjectiveInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestMapStoreItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestMapStoreItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestMapRegionDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestMapRegionDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestMapRegionDef_RegionLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestMapRegionDef_RegionLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgVarField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgVarField_reflection_ = NULL;
struct CMsgVarFieldOneofInstance {
  float float__;
  double double__;
  ::google::protobuf::uint32 uint32_;
  ::google::protobuf::uint64 uint64_;
  ::google::protobuf::int32 sint32_;
  ::google::protobuf::int64 sint64_;
  bool bool__;
  const ::std::string* string_;
}* CMsgVarField_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestMapStarType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestMapStarType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestMapNodeDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestMapNodeDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Variables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Variables_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_TextureStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Operation_TextureStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_CombineStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Operation_CombineStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_SelectStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Operation_SelectStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_Sticker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Operation_Sticker_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_StickerStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Operation_StickerStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_OperationStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_OperationStage_reflection_ = NULL;
struct CMsgPaintKit_OperationStageOneofInstance {
  const ::CMsgPaintKit_Operation_TextureStage* texture_lookup_;
  const ::CMsgPaintKit_Operation_CombineStage* combine_add_;
  const ::CMsgPaintKit_Operation_CombineStage* combine_lerp_;
  const ::CMsgPaintKit_Operation_CombineStage* combine_multiply_;
  const ::CMsgPaintKit_Operation_SelectStage* select_;
  const ::CMsgPaintKit_Operation_StickerStage* apply_sticker_;
}* CMsgPaintKit_OperationStage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_OperationNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_OperationNode_reflection_ = NULL;
struct CMsgPaintKit_OperationNodeOneofInstance {
  const ::CMsgPaintKit_OperationStage* stage_;
  const ::CMsgProtoDefID* operation_template_;
}* CMsgPaintKit_OperationNode_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Operation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_ItemDefinition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_ItemDefinition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_ItemDefinition_Definition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_ItemDefinition_Definition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Definition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Definition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Definition_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Definition_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgPaintKit_Definition_Item_ItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgPaintKit_Definition_Item_ItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestTheme_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestTheme_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestTheme_WeightedString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestTheme_WeightedString_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestTheme_WeightedStringSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestTheme_WeightedStringSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestMapNodeCondition_NodeState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestMapNodeCondition_NodeState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestMapNodeCondition_Logic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestMapNodeCondition_Logic_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgQuestMapNodeCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgQuestMapNodeCondition_reflection_ = NULL;
struct CMsgQuestMapNodeConditionOneofInstance {
  const ::CMsgQuestMapNodeCondition_NodeState* node_state_;
  const ::CMsgQuestMapNodeCondition_Logic* logical_;
}* CMsgQuestMapNodeCondition_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CMsgHeaderOnly_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgHeaderOnly_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogicalOperation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EValueDefinitionSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoDefTypes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuestPoints_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EVarFieldType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ENodeCashReward_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto() {
  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tf_proto_def_messages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgFieldID_descriptor_ = file->message_type(0);
  static const int CMsgFieldID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFieldID, field_),
  };
  CMsgFieldID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFieldID_descriptor_,
      CMsgFieldID::default_instance_,
      CMsgFieldID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFieldID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFieldID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFieldID));
  CMsgFieldID_CMsgField_descriptor_ = CMsgFieldID_descriptor_->nested_type(0);
  static const int CMsgFieldID_CMsgField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFieldID_CMsgField, field_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFieldID_CMsgField, repeated_index_),
  };
  CMsgFieldID_CMsgField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgFieldID_CMsgField_descriptor_,
      CMsgFieldID_CMsgField::default_instance_,
      CMsgFieldID_CMsgField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFieldID_CMsgField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFieldID_CMsgField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgFieldID_CMsgField));
  CMsgUniversalFieldID_descriptor_ = file->message_type(1);
  static const int CMsgUniversalFieldID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUniversalFieldID, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUniversalFieldID, defining_obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUniversalFieldID, field_id_),
  };
  CMsgUniversalFieldID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgUniversalFieldID_descriptor_,
      CMsgUniversalFieldID::default_instance_,
      CMsgUniversalFieldID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUniversalFieldID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgUniversalFieldID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgUniversalFieldID));
  CMsgVariableDefinition_descriptor_ = file->message_type(2);
  static const int CMsgVariableDefinition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVariableDefinition, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVariableDefinition, inherit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVariableDefinition, value_),
  };
  CMsgVariableDefinition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgVariableDefinition_descriptor_,
      CMsgVariableDefinition::default_instance_,
      CMsgVariableDefinition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVariableDefinition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVariableDefinition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgVariableDefinition));
  CMsgProtoDefHeader_descriptor_ = file->message_type(3);
  static const int CMsgProtoDefHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefHeader, defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefHeader, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefHeader, prefabs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefHeader, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefHeader, prefab_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefHeader, variables_),
  };
  CMsgProtoDefHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgProtoDefHeader_descriptor_,
      CMsgProtoDefHeader::default_instance_,
      CMsgProtoDefHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgProtoDefHeader));
  CMsgValidTypes_descriptor_ = file->message_type(4);
  static const int CMsgValidTypes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgValidTypes, types_),
  };
  CMsgValidTypes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgValidTypes_descriptor_,
      CMsgValidTypes::default_instance_,
      CMsgValidTypes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgValidTypes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgValidTypes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgValidTypes));
  CMsgProtoDefID_descriptor_ = file->message_type(5);
  static const int CMsgProtoDefID_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefID, defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefID, type_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_quest_map_node_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_quest_theme_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_quest_map_region_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_quest_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_quest_objective_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_paintkit_variables_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_paintkit_operation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_paintkit_item_definition_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_paintkit_definition_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgProtoDefID_default_oneof_instance_, instance_def_type_header_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefID, instance_),
  };
  CMsgProtoDefID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgProtoDefID_descriptor_,
      CMsgProtoDefID::default_instance_,
      CMsgProtoDefID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefID, _unknown_fields_),
      -1,
      CMsgProtoDefID_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoDefID, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgProtoDefID));
  CMsgQuestObjectiveDef_descriptor_ = file->message_type(6);
  static const int CMsgQuestObjectiveDef_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, loc_desctoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, conditions_defindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, condition_vars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, classes_vars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, condition_logic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, item_logic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, jump_state_),
  };
  CMsgQuestObjectiveDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestObjectiveDef_descriptor_,
      CMsgQuestObjectiveDef::default_instance_,
      CMsgQuestObjectiveDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestObjectiveDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestObjectiveDef));
  CMsgQuestObjectiveDef_ETF2GameModes_descriptor_ = CMsgQuestObjectiveDef_descriptor_->enum_type(0);
  CMsgQuestObjectiveDef_ETF2Conditions_descriptor_ = CMsgQuestObjectiveDef_descriptor_->enum_type(1);
  CMsgQuestObjectiveDef_ETF2Team_descriptor_ = CMsgQuestObjectiveDef_descriptor_->enum_type(2);
  CMsgQuestDef_descriptor_ = file->message_type(7);
  static const int CMsgQuestDef_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, max_points_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, max_points_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, max_points_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, name_loctoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, mm_criteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, node_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, icon_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, loaner_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, objectives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, map_),
  };
  CMsgQuestDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestDef_descriptor_,
      CMsgQuestDef::default_instance_,
      CMsgQuestDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestDef));
  CMsgQuestDef_MMCriteria_descriptor_ = CMsgQuestDef_descriptor_->nested_type(0);
  static const int CMsgQuestDef_MMCriteria_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_MMCriteria, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_MMCriteria, category_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_MMCriteria, map_name_),
  };
  CMsgQuestDef_MMCriteria_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestDef_MMCriteria_descriptor_,
      CMsgQuestDef_MMCriteria::default_instance_,
      CMsgQuestDef_MMCriteria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_MMCriteria, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_MMCriteria, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestDef_MMCriteria));
  CMsgQuestDef_ObjectiveInstance_descriptor_ = CMsgQuestDef_descriptor_->nested_type(1);
  static const int CMsgQuestDef_ObjectiveInstance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_ObjectiveInstance, objective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_ObjectiveInstance, point_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_ObjectiveInstance, point_value_),
  };
  CMsgQuestDef_ObjectiveInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestDef_ObjectiveInstance_descriptor_,
      CMsgQuestDef_ObjectiveInstance::default_instance_,
      CMsgQuestDef_ObjectiveInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_ObjectiveInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestDef_ObjectiveInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestDef_ObjectiveInstance));
  CMsgQuestMapStoreItem_descriptor_ = file->message_type(8);
  static const int CMsgQuestMapStoreItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStoreItem, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStoreItem, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStoreItem, reward_lootlist_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStoreItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStoreItem, purchase_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStoreItem, sort_group_),
  };
  CMsgQuestMapStoreItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestMapStoreItem_descriptor_,
      CMsgQuestMapStoreItem::default_instance_,
      CMsgQuestMapStoreItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStoreItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStoreItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestMapStoreItem));
  CMsgQuestMapRegionDef_descriptor_ = file->message_type(9);
  static const int CMsgQuestMapRegionDef_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, resfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, return_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, radio_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, zoom_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, star_type_),
  };
  CMsgQuestMapRegionDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestMapRegionDef_descriptor_,
      CMsgQuestMapRegionDef::default_instance_,
      CMsgQuestMapRegionDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestMapRegionDef));
  CMsgQuestMapRegionDef_RegionLink_descriptor_ = CMsgQuestMapRegionDef_descriptor_->nested_type(0);
  static const int CMsgQuestMapRegionDef_RegionLink_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef_RegionLink, target_region_defid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef_RegionLink, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef_RegionLink, ypos_),
  };
  CMsgQuestMapRegionDef_RegionLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestMapRegionDef_RegionLink_descriptor_,
      CMsgQuestMapRegionDef_RegionLink::default_instance_,
      CMsgQuestMapRegionDef_RegionLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef_RegionLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapRegionDef_RegionLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestMapRegionDef_RegionLink));
  CMsgVarField_descriptor_ = file->message_type(10);
  static const int CMsgVarField_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVarField, variable_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgVarField_default_oneof_instance_, float__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgVarField_default_oneof_instance_, double__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgVarField_default_oneof_instance_, uint32_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgVarField_default_oneof_instance_, uint64_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgVarField_default_oneof_instance_, sint32_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgVarField_default_oneof_instance_, sint64_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgVarField_default_oneof_instance_, bool__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgVarField_default_oneof_instance_, string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVarField, value_),
  };
  CMsgVarField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgVarField_descriptor_,
      CMsgVarField::default_instance_,
      CMsgVarField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVarField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVarField, _unknown_fields_),
      -1,
      CMsgVarField_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVarField, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgVarField));
  CMsgQuestMapStarType_descriptor_ = file->message_type(11);
  static const int CMsgQuestMapStarType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStarType, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStarType, name_),
  };
  CMsgQuestMapStarType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestMapStarType_descriptor_,
      CMsgQuestMapStarType::default_instance_,
      CMsgQuestMapStarType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStarType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapStarType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestMapStarType));
  CMsgQuestMapNodeDef_descriptor_ = file->message_type(12);
  static const int CMsgQuestMapNodeDef_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, name_loctoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, owning_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, quest_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, associated_operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, reward_item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, reward_lootlist_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, cash_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, star_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, stars_to_unlock_),
  };
  CMsgQuestMapNodeDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestMapNodeDef_descriptor_,
      CMsgQuestMapNodeDef::default_instance_,
      CMsgQuestMapNodeDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestMapNodeDef));
  CMsgPaintKit_Variables_descriptor_ = file->message_type(13);
  static const int CMsgPaintKit_Variables_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Variables, header_),
  };
  CMsgPaintKit_Variables_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Variables_descriptor_,
      CMsgPaintKit_Variables::default_instance_,
      CMsgPaintKit_Variables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Variables, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Variables, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Variables));
  CMsgPaintKit_Operation_TextureStage_descriptor_ = file->message_type(14);
  static const int CMsgPaintKit_Operation_TextureStage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, texture_red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, texture_blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, adjust_black_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, adjust_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, adjust_gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, translate_u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, translate_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, scale_uv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, flip_u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, flip_v_),
  };
  CMsgPaintKit_Operation_TextureStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Operation_TextureStage_descriptor_,
      CMsgPaintKit_Operation_TextureStage::default_instance_,
      CMsgPaintKit_Operation_TextureStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_TextureStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Operation_TextureStage));
  CMsgPaintKit_Operation_CombineStage_descriptor_ = file->message_type(15);
  static const int CMsgPaintKit_Operation_CombineStage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, adjust_black_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, adjust_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, adjust_gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, translate_u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, translate_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, scale_uv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, flip_u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, flip_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, operation_node_),
  };
  CMsgPaintKit_Operation_CombineStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Operation_CombineStage_descriptor_,
      CMsgPaintKit_Operation_CombineStage::default_instance_,
      CMsgPaintKit_Operation_CombineStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_CombineStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Operation_CombineStage));
  CMsgPaintKit_Operation_SelectStage_descriptor_ = file->message_type(16);
  static const int CMsgPaintKit_Operation_SelectStage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_SelectStage, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_SelectStage, select_),
  };
  CMsgPaintKit_Operation_SelectStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Operation_SelectStage_descriptor_,
      CMsgPaintKit_Operation_SelectStage::default_instance_,
      CMsgPaintKit_Operation_SelectStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_SelectStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_SelectStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Operation_SelectStage));
  CMsgPaintKit_Operation_Sticker_descriptor_ = file->message_type(17);
  static const int CMsgPaintKit_Operation_Sticker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_Sticker, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_Sticker, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_Sticker, spec_),
  };
  CMsgPaintKit_Operation_Sticker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Operation_Sticker_descriptor_,
      CMsgPaintKit_Operation_Sticker::default_instance_,
      CMsgPaintKit_Operation_Sticker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_Sticker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_Sticker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Operation_Sticker));
  CMsgPaintKit_Operation_StickerStage_descriptor_ = file->message_type(18);
  static const int CMsgPaintKit_Operation_StickerStage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, sticker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, dest_tl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, dest_tr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, dest_bl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, adjust_black_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, adjust_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, adjust_gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, operation_node_),
  };
  CMsgPaintKit_Operation_StickerStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Operation_StickerStage_descriptor_,
      CMsgPaintKit_Operation_StickerStage::default_instance_,
      CMsgPaintKit_Operation_StickerStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation_StickerStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Operation_StickerStage));
  CMsgPaintKit_OperationStage_descriptor_ = file->message_type(19);
  static const int CMsgPaintKit_OperationStage_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgPaintKit_OperationStage_default_oneof_instance_, texture_lookup_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgPaintKit_OperationStage_default_oneof_instance_, combine_add_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgPaintKit_OperationStage_default_oneof_instance_, combine_lerp_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgPaintKit_OperationStage_default_oneof_instance_, combine_multiply_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgPaintKit_OperationStage_default_oneof_instance_, select_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgPaintKit_OperationStage_default_oneof_instance_, apply_sticker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_OperationStage, stage_),
  };
  CMsgPaintKit_OperationStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_OperationStage_descriptor_,
      CMsgPaintKit_OperationStage::default_instance_,
      CMsgPaintKit_OperationStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_OperationStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_OperationStage, _unknown_fields_),
      -1,
      CMsgPaintKit_OperationStage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_OperationStage, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_OperationStage));
  CMsgPaintKit_OperationNode_descriptor_ = file->message_type(20);
  static const int CMsgPaintKit_OperationNode_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgPaintKit_OperationNode_default_oneof_instance_, stage_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgPaintKit_OperationNode_default_oneof_instance_, operation_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_OperationNode, node_),
  };
  CMsgPaintKit_OperationNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_OperationNode_descriptor_,
      CMsgPaintKit_OperationNode::default_instance_,
      CMsgPaintKit_OperationNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_OperationNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_OperationNode, _unknown_fields_),
      -1,
      CMsgPaintKit_OperationNode_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_OperationNode, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_OperationNode));
  CMsgPaintKit_Operation_descriptor_ = file->message_type(21);
  static const int CMsgPaintKit_Operation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation, operation_node_),
  };
  CMsgPaintKit_Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Operation_descriptor_,
      CMsgPaintKit_Operation::default_instance_,
      CMsgPaintKit_Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Operation));
  CMsgPaintKit_ItemDefinition_descriptor_ = file->message_type(22);
  static const int CMsgPaintKit_ItemDefinition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition, item_definition_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition, variable_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition, definition_),
  };
  CMsgPaintKit_ItemDefinition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_ItemDefinition_descriptor_,
      CMsgPaintKit_ItemDefinition::default_instance_,
      CMsgPaintKit_ItemDefinition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_ItemDefinition));
  CMsgPaintKit_ItemDefinition_Definition_descriptor_ = CMsgPaintKit_ItemDefinition_descriptor_->nested_type(0);
  static const int CMsgPaintKit_ItemDefinition_Definition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition_Definition, operation_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition_Definition, variable_),
  };
  CMsgPaintKit_ItemDefinition_Definition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_ItemDefinition_Definition_descriptor_,
      CMsgPaintKit_ItemDefinition_Definition::default_instance_,
      CMsgPaintKit_ItemDefinition_Definition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition_Definition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_ItemDefinition_Definition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_ItemDefinition_Definition));
  CMsgPaintKit_Definition_descriptor_ = file->message_type(23);
  static const int CMsgPaintKit_Definition_offsets_[50] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, loc_desctoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, operation_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, has_team_textures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, paintkit_tool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, flamethrower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, grenadelauncher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, knife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, medigun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, minigun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, pistol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, revolver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, rocketlauncher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, scattergun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, shotgun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, smg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, sniperrifle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, stickybomb_launcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, ubersaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, wrench_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, amputator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, atom_launcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, back_scratcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, battleaxe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, bazaar_sniper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, blackbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, claidheamohmor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, crusaders_crossbow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, degreaser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, demo_cannon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, demo_sultan_sword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, detonator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, gatling_gun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, holymackerel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, jag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, lochnload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, powerjack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, quadball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, reserve_shooter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, riding_crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, russian_riot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, scimitar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, scorch_shot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, shortstop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, soda_popper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, tele_shotgun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, tomislav_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, trenchgun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, winger_pistol_),
  };
  CMsgPaintKit_Definition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Definition_descriptor_,
      CMsgPaintKit_Definition::default_instance_,
      CMsgPaintKit_Definition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Definition));
  CMsgPaintKit_Definition_Item_descriptor_ = CMsgPaintKit_Definition_descriptor_->nested_type(0);
  static const int CMsgPaintKit_Definition_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition_Item, item_definition_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition_Item, data_),
  };
  CMsgPaintKit_Definition_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Definition_Item_descriptor_,
      CMsgPaintKit_Definition_Item::default_instance_,
      CMsgPaintKit_Definition_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Definition_Item));
  CMsgPaintKit_Definition_Item_ItemData_descriptor_ = CMsgPaintKit_Definition_Item_descriptor_->nested_type(0);
  static const int CMsgPaintKit_Definition_Item_ItemData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition_Item_ItemData, can_apply_paintkit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition_Item_ItemData, material_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition_Item_ItemData, variable_),
  };
  CMsgPaintKit_Definition_Item_ItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgPaintKit_Definition_Item_ItemData_descriptor_,
      CMsgPaintKit_Definition_Item_ItemData::default_instance_,
      CMsgPaintKit_Definition_Item_ItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition_Item_ItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPaintKit_Definition_Item_ItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgPaintKit_Definition_Item_ItemData));
  CMsgQuestTheme_descriptor_ = file->message_type(24);
  static const int CMsgQuestTheme_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, notification_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, quest_item_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, in_game_tracker_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, give_sounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, complete_sounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, fully_complete_sounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, reward_sound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, discard_sound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, reveal_sound_),
  };
  CMsgQuestTheme_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestTheme_descriptor_,
      CMsgQuestTheme::default_instance_,
      CMsgQuestTheme_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestTheme));
  CMsgQuestTheme_WeightedString_descriptor_ = CMsgQuestTheme_descriptor_->nested_type(0);
  static const int CMsgQuestTheme_WeightedString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme_WeightedString, string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme_WeightedString, weight_),
  };
  CMsgQuestTheme_WeightedString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestTheme_WeightedString_descriptor_,
      CMsgQuestTheme_WeightedString::default_instance_,
      CMsgQuestTheme_WeightedString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme_WeightedString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme_WeightedString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestTheme_WeightedString));
  CMsgQuestTheme_WeightedStringSet_descriptor_ = CMsgQuestTheme_descriptor_->nested_type(1);
  static const int CMsgQuestTheme_WeightedStringSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme_WeightedStringSet, weighted_strings_),
  };
  CMsgQuestTheme_WeightedStringSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestTheme_WeightedStringSet_descriptor_,
      CMsgQuestTheme_WeightedStringSet::default_instance_,
      CMsgQuestTheme_WeightedStringSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme_WeightedStringSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestTheme_WeightedStringSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestTheme_WeightedStringSet));
  CMsgQuestMapNodeCondition_NodeState_descriptor_ = file->message_type(25);
  static const int CMsgQuestMapNodeCondition_NodeState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition_NodeState, bonus_objectives_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition_NodeState, target_node_defid_),
  };
  CMsgQuestMapNodeCondition_NodeState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestMapNodeCondition_NodeState_descriptor_,
      CMsgQuestMapNodeCondition_NodeState::default_instance_,
      CMsgQuestMapNodeCondition_NodeState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition_NodeState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition_NodeState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestMapNodeCondition_NodeState));
  CMsgQuestMapNodeCondition_Logic_descriptor_ = file->message_type(26);
  static const int CMsgQuestMapNodeCondition_Logic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition_Logic, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition_Logic, sub_conditions_),
  };
  CMsgQuestMapNodeCondition_Logic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestMapNodeCondition_Logic_descriptor_,
      CMsgQuestMapNodeCondition_Logic::default_instance_,
      CMsgQuestMapNodeCondition_Logic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition_Logic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition_Logic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestMapNodeCondition_Logic));
  CMsgQuestMapNodeCondition_descriptor_ = file->message_type(27);
  static const int CMsgQuestMapNodeCondition_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgQuestMapNodeCondition_default_oneof_instance_, node_state_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(CMsgQuestMapNodeCondition_default_oneof_instance_, logical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition, operation_),
  };
  CMsgQuestMapNodeCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgQuestMapNodeCondition_descriptor_,
      CMsgQuestMapNodeCondition::default_instance_,
      CMsgQuestMapNodeCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition, _unknown_fields_),
      -1,
      CMsgQuestMapNodeCondition_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuestMapNodeCondition, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgQuestMapNodeCondition));
  CMsgHeaderOnly_descriptor_ = file->message_type(28);
  static const int CMsgHeaderOnly_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeaderOnly, header_),
  };
  CMsgHeaderOnly_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgHeaderOnly_descriptor_,
      CMsgHeaderOnly::default_instance_,
      CMsgHeaderOnly_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeaderOnly, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeaderOnly, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgHeaderOnly));
  LogicalOperation_descriptor_ = file->enum_type(0);
  EValueDefinitionSource_descriptor_ = file->enum_type(1);
  ProtoDefTypes_descriptor_ = file->enum_type(2);
  EQuestPoints_descriptor_ = file->enum_type(3);
  EVarFieldType_descriptor_ = file->enum_type(4);
  ENodeCashReward_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFieldID_descriptor_, &CMsgFieldID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgFieldID_CMsgField_descriptor_, &CMsgFieldID_CMsgField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgUniversalFieldID_descriptor_, &CMsgUniversalFieldID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgVariableDefinition_descriptor_, &CMsgVariableDefinition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgProtoDefHeader_descriptor_, &CMsgProtoDefHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgValidTypes_descriptor_, &CMsgValidTypes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgProtoDefID_descriptor_, &CMsgProtoDefID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestObjectiveDef_descriptor_, &CMsgQuestObjectiveDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestDef_descriptor_, &CMsgQuestDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestDef_MMCriteria_descriptor_, &CMsgQuestDef_MMCriteria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestDef_ObjectiveInstance_descriptor_, &CMsgQuestDef_ObjectiveInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestMapStoreItem_descriptor_, &CMsgQuestMapStoreItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestMapRegionDef_descriptor_, &CMsgQuestMapRegionDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestMapRegionDef_RegionLink_descriptor_, &CMsgQuestMapRegionDef_RegionLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgVarField_descriptor_, &CMsgVarField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestMapStarType_descriptor_, &CMsgQuestMapStarType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestMapNodeDef_descriptor_, &CMsgQuestMapNodeDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Variables_descriptor_, &CMsgPaintKit_Variables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Operation_TextureStage_descriptor_, &CMsgPaintKit_Operation_TextureStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Operation_CombineStage_descriptor_, &CMsgPaintKit_Operation_CombineStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Operation_SelectStage_descriptor_, &CMsgPaintKit_Operation_SelectStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Operation_Sticker_descriptor_, &CMsgPaintKit_Operation_Sticker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Operation_StickerStage_descriptor_, &CMsgPaintKit_Operation_StickerStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_OperationStage_descriptor_, &CMsgPaintKit_OperationStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_OperationNode_descriptor_, &CMsgPaintKit_OperationNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Operation_descriptor_, &CMsgPaintKit_Operation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_ItemDefinition_descriptor_, &CMsgPaintKit_ItemDefinition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_ItemDefinition_Definition_descriptor_, &CMsgPaintKit_ItemDefinition_Definition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Definition_descriptor_, &CMsgPaintKit_Definition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Definition_Item_descriptor_, &CMsgPaintKit_Definition_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgPaintKit_Definition_Item_ItemData_descriptor_, &CMsgPaintKit_Definition_Item_ItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestTheme_descriptor_, &CMsgQuestTheme::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestTheme_WeightedString_descriptor_, &CMsgQuestTheme_WeightedString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestTheme_WeightedStringSet_descriptor_, &CMsgQuestTheme_WeightedStringSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestMapNodeCondition_NodeState_descriptor_, &CMsgQuestMapNodeCondition_NodeState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestMapNodeCondition_Logic_descriptor_, &CMsgQuestMapNodeCondition_Logic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgQuestMapNodeCondition_descriptor_, &CMsgQuestMapNodeCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgHeaderOnly_descriptor_, &CMsgHeaderOnly::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto() {
  delete CMsgFieldID::default_instance_;
  delete CMsgFieldID_reflection_;
  delete CMsgFieldID_CMsgField::default_instance_;
  delete CMsgFieldID_CMsgField_reflection_;
  delete CMsgUniversalFieldID::default_instance_;
  delete CMsgUniversalFieldID_reflection_;
  delete CMsgVariableDefinition::default_instance_;
  delete CMsgVariableDefinition_reflection_;
  delete CMsgProtoDefHeader::default_instance_;
  delete CMsgProtoDefHeader_reflection_;
  delete CMsgValidTypes::default_instance_;
  delete CMsgValidTypes_reflection_;
  delete CMsgProtoDefID::default_instance_;
  delete CMsgProtoDefID_default_oneof_instance_;
  delete CMsgProtoDefID_reflection_;
  delete CMsgQuestObjectiveDef::default_instance_;
  delete CMsgQuestObjectiveDef_reflection_;
  delete CMsgQuestDef::default_instance_;
  delete CMsgQuestDef_reflection_;
  delete CMsgQuestDef_MMCriteria::default_instance_;
  delete CMsgQuestDef_MMCriteria_reflection_;
  delete CMsgQuestDef_ObjectiveInstance::default_instance_;
  delete CMsgQuestDef_ObjectiveInstance_reflection_;
  delete CMsgQuestMapStoreItem::default_instance_;
  delete CMsgQuestMapStoreItem_reflection_;
  delete CMsgQuestMapRegionDef::default_instance_;
  delete CMsgQuestMapRegionDef_reflection_;
  delete CMsgQuestMapRegionDef_RegionLink::default_instance_;
  delete CMsgQuestMapRegionDef_RegionLink_reflection_;
  delete CMsgVarField::default_instance_;
  delete CMsgVarField_default_oneof_instance_;
  delete CMsgVarField_reflection_;
  delete CMsgQuestMapStarType::default_instance_;
  delete CMsgQuestMapStarType_reflection_;
  delete CMsgQuestMapNodeDef::default_instance_;
  delete CMsgQuestMapNodeDef_reflection_;
  delete CMsgPaintKit_Variables::default_instance_;
  delete CMsgPaintKit_Variables_reflection_;
  delete CMsgPaintKit_Operation_TextureStage::default_instance_;
  delete CMsgPaintKit_Operation_TextureStage_reflection_;
  delete CMsgPaintKit_Operation_CombineStage::default_instance_;
  delete CMsgPaintKit_Operation_CombineStage_reflection_;
  delete CMsgPaintKit_Operation_SelectStage::default_instance_;
  delete CMsgPaintKit_Operation_SelectStage_reflection_;
  delete CMsgPaintKit_Operation_Sticker::default_instance_;
  delete CMsgPaintKit_Operation_Sticker_reflection_;
  delete CMsgPaintKit_Operation_StickerStage::default_instance_;
  delete CMsgPaintKit_Operation_StickerStage_reflection_;
  delete CMsgPaintKit_OperationStage::default_instance_;
  delete CMsgPaintKit_OperationStage_default_oneof_instance_;
  delete CMsgPaintKit_OperationStage_reflection_;
  delete CMsgPaintKit_OperationNode::default_instance_;
  delete CMsgPaintKit_OperationNode_default_oneof_instance_;
  delete CMsgPaintKit_OperationNode_reflection_;
  delete CMsgPaintKit_Operation::default_instance_;
  delete CMsgPaintKit_Operation_reflection_;
  delete CMsgPaintKit_ItemDefinition::default_instance_;
  delete CMsgPaintKit_ItemDefinition_reflection_;
  delete CMsgPaintKit_ItemDefinition_Definition::default_instance_;
  delete CMsgPaintKit_ItemDefinition_Definition_reflection_;
  delete CMsgPaintKit_Definition::default_instance_;
  delete CMsgPaintKit_Definition_reflection_;
  delete CMsgPaintKit_Definition_Item::default_instance_;
  delete CMsgPaintKit_Definition_Item_reflection_;
  delete CMsgPaintKit_Definition_Item_ItemData::default_instance_;
  delete CMsgPaintKit_Definition_Item_ItemData_reflection_;
  delete CMsgQuestTheme::default_instance_;
  delete CMsgQuestTheme_reflection_;
  delete CMsgQuestTheme_WeightedString::default_instance_;
  delete CMsgQuestTheme_WeightedString_reflection_;
  delete CMsgQuestTheme_WeightedStringSet::default_instance_;
  delete CMsgQuestTheme_WeightedStringSet_reflection_;
  delete CMsgQuestMapNodeCondition_NodeState::default_instance_;
  delete CMsgQuestMapNodeCondition_NodeState_reflection_;
  delete CMsgQuestMapNodeCondition_Logic::default_instance_;
  delete CMsgQuestMapNodeCondition_Logic_reflection_;
  delete CMsgQuestMapNodeCondition::default_instance_;
  delete CMsgQuestMapNodeCondition_default_oneof_instance_;
  delete CMsgQuestMapNodeCondition_reflection_;
  delete CMsgHeaderOnly::default_instance_;
  delete CMsgHeaderOnly_reflection_;
}

void protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033tf_proto_def_messages.proto\032 google/pr"
    "otobuf/descriptor.proto\"o\n\013CMsgFieldID\022%"
    "\n\005field\030\001 \003(\0132\026.CMsgFieldID.CMsgField\0329\n"
    "\tCMsgField\022\024\n\014field_number\030\001 \001(\r\022\026\n\016repe"
    "ated_index\030\002 \001(\r\"\216\001\n\024CMsgUniversalFieldI"
    "D\022,\n\013source_type\030\001 \001(\0162\027.EValueDefinitio"
    "nSource\022(\n\017defining_obj_id\030\002 \001(\0132\017.CMsgP"
    "rotoDefID\022\036\n\010field_id\030\003 \001(\0132\014.CMsgFieldI"
    "D\"R\n\026CMsgVariableDefinition\022\022\n\004name\030\001 \001("
    "\tB\004\370\227\"\001\022\025\n\007inherit\030\002 \001(\010:\004true\022\r\n\005value\030"
    "\003 \001(\t\"\354\004\n\022CMsgProtoDefHeader\0227\n\010defindex"
    "\030\001 \002(\rB%\210\227\"\000\350\227\"\001\242\227\"\010Defindex\252\227\"\rAutogene"
    "rated\0228\n\004name\030\002 \001(\tB*\350\227\"\001\242\227\"\004Name\252\227\"\032Nam"
    "e to show in the editor\022\225\001\n\007prefabs\030\003 \003("
    "\0132\017.CMsgProtoDefIDBs\350\227\"\001\242\227\"\006Prefab\322\227\"\030CP"
    "refabFieldEditingPanel\252\227\"EInherit the va"
    "lues of these definitions, in order from"
    " top to bottom.\022s\n\004tags\030\004 \003(\tBe\242\227\"\004Tags\252"
    "\227\"YStrings used to describe this definit"
    "ion while searching.  ie. \'class\', \'shot"
    "gun\', \'easy\'\022u\n\013prefab_only\030\005 \001(\010:\005false"
    "BY\350\227\"\001\242\227\"\013Pure Prefab\252\227\"BIf true, this i"
    "s only a prefab and will not be made int"
    "o an object\022_\n\tvariables\030\006 \003(\0132\027.CMsgVar"
    "iableDefinitionB3\332\227\"\004name\242\227\"\tVariables\252\227"
    "\"\032Variable value definitions\"/\n\016CMsgVali"
    "dTypes\022\035\n\005types\030\001 \003(\0162\016.ProtoDefTypes\"\360\005"
    "\n\016CMsgProtoDefID\022\020\n\010defindex\030\001 \001(\r\022\034\n\004ty"
    "pe\030\002 \001(\0162\016.ProtoDefTypes\022@\n instance_def"
    "_type_quest_map_node\030\003 \001(\0132\024.CMsgQuestMa"
    "pNodeDefH\000\0228\n\035instance_def_type_quest_th"
    "eme\030\005 \001(\0132\017.CMsgQuestThemeH\000\022D\n\"instance"
    "_def_type_quest_map_region\030\006 \001(\0132\026.CMsgQ"
    "uestMapRegionDefH\000\0220\n\027instance_def_type_"
    "quest\030\007 \001(\0132\r.CMsgQuestDefH\000\022C\n!instance"
    "_def_type_quest_objective\030\010 \001(\0132\026.CMsgQu"
    "estObjectiveDefH\000\022G\n$instance_def_type_p"
    "aintkit_variables\030\t \001(\0132\027.CMsgPaintKit_V"
    "ariablesH\000\022G\n$instance_def_type_paintkit"
    "_operation\030\n \001(\0132\027.CMsgPaintKit_Operatio"
    "nH\000\022R\n*instance_def_type_paintkit_item_d"
    "efinition\030\013 \001(\0132\034.CMsgPaintKit_ItemDefin"
    "itionH\000\022I\n%instance_def_type_paintkit_de"
    "finition\030\014 \001(\0132\030.CMsgPaintKit_Definition"
    "H\000\0228\n\035instance_def_type_header_only\030\r \001("
    "\0132\017.CMsgHeaderOnlyH\000B\n\n\010instance\"\233,\n\025CMs"
    "gQuestObjectiveDef\022#\n\006header\030\001 \002(\0132\023.CMs"
    "gProtoDefHeader\022\033\n\rloc_desctoken\030\002 \001(\tB\004"
    "\220\227\"\001\022\016\n\006points\030\003 \001(\r\022\033\n\023conditions_defin"
    "dex\030\005 \001(\r\022e\n\003map\030\010 \003(\tBX\242\227\"\rMaps Modifie"
    "r\252\227\"CIf set, the player must be on one o"
    "f the listed maps to get credit.\022\234\001\n\tgam"
    "e_mode\030\t \003(\0162$.CMsgQuestObjectiveDef.ETF"
    "2GameModesBc\242\227\"\022Game Mode Modifier\252\227\"IIf"
    " set, the player must be in one of the l"
    "isted game modes to get credit.\022\203\001\n\004team"
    "\030\n \001(\0162\037.CMsgQuestObjectiveDef.ETF2TeamB"
    "T\242\227\"\rTeam Modifier\252\227\"\?If set, the player"
    " must be on the specified team to get cr"
    "edit.\022=\n\016condition_vars\030\013 \003(\0132\r.CMsgVarF"
    "ieldB\026\360\227\"\t\242\227\"\016Objective Vars\022;\n\014classes_"
    "vars\030\014 \003(\0132\r.CMsgVarFieldB\026\360\227\"\t\242\227\"\016Class"
    " Modifier\022M\n\nconditions\030\r \003(\0162%.CMsgQues"
    "tObjectiveDef.ETF2ConditionsB\022\242\227\"\016Requir"
    "ed Conds\022\205\001\n\017condition_logic\030\016 \001(\0162\021.Log"
    "icalOperationBY\242\227\"\017Condition Logic\252\227\"BWh"
    "at kind of logic to use when evaluating "
    "the player\'s conditions.\022`\n\titem_name\030\017 "
    "\003(\tBM\242\227\"\026Required equipped item\252\227\"/Requi"
    "re that this item be equipped in any slo"
    "t.\022v\n\nitem_logic\030\020 \001(\0162\021.LogicalOperatio"
    "nBO\242\227\"\nItem logic\252\227\"=What kind of logic "
    "to use when evaluating the player\'s item"
    "s.\022V\n\njump_state\030\021 \001(\rBB\242\227\"\nJump logic\252\227"
    "\"0What state of jumping the player needs"
    " to be in.\"\275\004\n\rETF2GameModes\022\030\n\024kGameCat"
    "egory_Escort\020\000\022\025\n\021kGameCategory_CTF\020\001\022\037\n"
    "\033kGameCategory_AttackDefense\020\002\022\026\n\022kGameC"
    "ategory_Koth\020\003\022\024\n\020kGameCategory_CP\020\004\022\034\n\030"
    "kGameCategory_EscortRace\020\005\022\032\n\026kGameCateg"
    "ory_EventMix\020\006\022\024\n\020kGameCategory_SD\020\007\022\033\n\027"
    "kGameCategory_Quickplay\020\010\022\032\n\026kGameCatego"
    "ry_Event247\020\t\022\027\n\023kGameCategory_Arena\020\n\022\""
    "\n\036kGameCategory_RobotDestruction\020\013\022\031\n\025kG"
    "ameCategory_Powerup\020\014\022\032\n\026kGameCategory_F"
    "eatured\020\r\022\032\n\026kGameCategory_Passtime\020\016\022\"\n"
    "\036kGameCategory_Community_Update\020\017\022\026\n\022kGa"
    "meCategory_Misc\020\020\022!\n\035kGameCategory_Compe"
    "titive_6v6\020\021\022\027\n\023kGameCategory_Other\020\022\022\033\n"
    "\027kGameCategory_Halloween\020\023\"\222\036\n\016ETF2Condi"
    "tions\022\022\n\016TF_COND_AIMING\020\000\022\022\n\016TF_COND_ZOO"
    "MED\020\001\022\026\n\022TF_COND_DISGUISING\020\002\022\025\n\021TF_COND"
    "_DISGUISED\020\003\022\025\n\021TF_COND_STEALTHED\020\004\022\030\n\024T"
    "F_COND_INVULNERABLE\020\005\022\026\n\022TF_COND_TELEPOR"
    "TED\020\006\022\024\n\020TF_COND_TAUNTING\020\007\022#\n\037TF_COND_I"
    "NVULNERABLE_WEARINGOFF\020\010\022\033\n\027TF_COND_STEA"
    "LTHED_BLINK\020\t\022 \n\034TF_COND_SELECTED_TO_TEL"
    "EPORT\020\n\022\027\n\023TF_COND_CRITBOOSTED\020\013\022\032\n\026TF_C"
    "OND_TMPDAMAGEBONUS\020\014\022\027\n\023TF_COND_FEIGN_DE"
    "ATH\020\r\022\021\n\rTF_COND_PHASE\020\016\022\023\n\017TF_COND_STUN"
    "NED\020\017\022\027\n\023TF_COND_OFFENSEBUFF\020\020\022\031\n\025TF_CON"
    "D_SHIELD_CHARGE\020\021\022\025\n\021TF_COND_DEMO_BUFF\020\022"
    "\022\027\n\023TF_COND_ENERGY_BUFF\020\023\022\026\n\022TF_COND_RAD"
    "IUSHEAL\020\024\022\027\n\023TF_COND_HEALTH_BUFF\020\025\022\023\n\017TF"
    "_COND_BURNING\020\026\022\035\n\031TF_COND_HEALTH_OVERHE"
    "ALED\020\027\022\021\n\rTF_COND_URINE\020\030\022\024\n\020TF_COND_BLE"
    "EDING\020\031\022\027\n\023TF_COND_DEFENSEBUFF\020\032\022\024\n\020TF_C"
    "OND_MAD_MILK\020\033\022\024\n\020TF_COND_MEGAHEAL\020\034\022\035\n\031"
    "TF_COND_REGENONDAMAGEBUFF\020\035\022\032\n\026TF_COND_M"
    "ARKEDFORDEATH\020\036\022\037\n\033TF_COND_NOHEALINGDAMA"
    "GEBUFF\020\037\022\027\n\023TF_COND_SPEED_BOOST\020 \022\037\n\033TF_"
    "COND_CRITBOOSTED_PUMPKIN\020!\022!\n\035TF_COND_CR"
    "ITBOOSTED_USER_BUFF\020\"\022#\n\037TF_COND_CRITBOO"
    "STED_DEMO_CHARGE\020#\022\033\n\027TF_COND_SODAPOPPER"
    "_HYPE\020$\022#\n\037TF_COND_CRITBOOSTED_FIRST_BLO"
    "OD\020%\022\"\n\036TF_COND_CRITBOOSTED_BONUS_TIME\020&"
    "\022#\n\037TF_COND_CRITBOOSTED_CTF_CAPTURE\020\'\022\037\n"
    "\033TF_COND_CRITBOOSTED_ON_KILL\020(\022$\n TF_CON"
    "D_CANNOT_SWITCH_FROM_MELEE\020)\022%\n!TF_COND_"
    "DEFENSEBUFF_NO_CRIT_BLOCK\020*\022\030\n\024TF_COND_R"
    "EPROGRAMMED\020+\022!\n\035TF_COND_CRITBOOSTED_RAG"
    "E_BUFF\020,\022\034\n\030TF_COND_DEFENSEBUFF_HIGH\020-\022\""
    "\n\036TF_COND_SNIPERCHARGE_RAGE_BUFF\020.\022\037\n\033TF"
    "_COND_DISGUISE_WEARINGOFF\020/\022!\n\035TF_COND_M"
    "ARKEDFORDEATH_SILENT\0200\022\"\n\036TF_COND_DISGUI"
    "SED_AS_DISPENSER\0201\022\022\n\016TF_COND_SAPPED\0202\022,"
    "\n(TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAG"
    "ED\0203\022\"\n\036TF_COND_INVULNERABLE_USER_BUFF\0204"
    "\022\037\n\033TF_COND_HALLOWEEN_BOMB_HEAD\0205\022\036\n\032TF_"
    "COND_HALLOWEEN_THRILLER\0206\022 \n\034TF_COND_RAD"
    "IUSHEAL_ON_DAMAGE\0207\022#\n\037TF_COND_CRITBOOST"
    "ED_CARD_EFFECT\0208\022$\n TF_COND_INVULNERABLE"
    "_CARD_EFFECT\0209\022&\n\"TF_COND_MEDIGUN_UBER_B"
    "ULLET_RESIST\020:\022%\n!TF_COND_MEDIGUN_UBER_B"
    "LAST_RESIST\020;\022$\n TF_COND_MEDIGUN_UBER_FI"
    "RE_RESIST\020<\022\'\n#TF_COND_MEDIGUN_SMALL_BUL"
    "LET_RESIST\020=\022&\n\"TF_COND_MEDIGUN_SMALL_BL"
    "AST_RESIST\020>\022%\n!TF_COND_MEDIGUN_SMALL_FI"
    "RE_RESIST\020\?\022\037\n\033TF_COND_STEALTHED_USER_BU"
    "FF\020@\022\032\n\026TF_COND_MEDIGUN_DEBUFF\020A\022&\n\"TF_C"
    "OND_STEALTHED_USER_BUFF_FADING\020B\022\031\n\025TF_C"
    "OND_BULLET_IMMUNE\020C\022\030\n\024TF_COND_BLAST_IMM"
    "UNE\020D\022\027\n\023TF_COND_FIRE_IMMUNE\020E\022\031\n\025TF_CON"
    "D_PREVENT_DEATH\020F\022\"\n\036TF_COND_MVM_BOT_STU"
    "N_RADIOWAVE\020G\022!\n\035TF_COND_HALLOWEEN_SPEED"
    "_BOOST\020H\022 \n\034TF_COND_HALLOWEEN_QUICK_HEAL"
    "\020I\022\033\n\027TF_COND_HALLOWEEN_GIANT\020J\022\032\n\026TF_CO"
    "ND_HALLOWEEN_TINY\020K\022\035\n\031TF_COND_HALLOWEEN"
    "_IN_HELL\020L\022 \n\034TF_COND_HALLOWEEN_GHOST_MO"
    "DE\020M\022#\n\037TF_COND_MINICRITBOOSTED_ON_KILL\020"
    "N\022\032\n\026TF_COND_OBSCURED_SMOKE\020O\022\034\n\030TF_COND"
    "_PARACHUTE_ACTIVE\020P\022\030\n\024TF_COND_BLASTJUMP"
    "ING\020Q\022\032\n\026TF_COND_HALLOWEEN_KART\020R\022\037\n\033TF_"
    "COND_HALLOWEEN_KART_DASH\020S\022\030\n\024TF_COND_BA"
    "LLOON_HEAD\020T\022\026\n\022TF_COND_MELEE_ONLY\020U\022\032\n\026"
    "TF_COND_SWIMMING_CURSE\020V\022\030\n\024TF_COND_FREE"
    "ZE_INPUT\020W\022\037\n\033TF_COND_HALLOWEEN_KART_CAG"
    "E\020X\022\026\n\022TF_COND_DONOTUSE_0\020Y\022\031\n\025TF_COND_R"
    "UNE_STRENGTH\020Z\022\026\n\022TF_COND_RUNE_HASTE\020[\022\026"
    "\n\022TF_COND_RUNE_REGEN\020\\\022\027\n\023TF_COND_RUNE_R"
    "ESIST\020]\022\030\n\024TF_COND_RUNE_VAMPIRE\020^\022\030\n\024TF_"
    "COND_RUNE_REFLECT\020_\022\032\n\026TF_COND_RUNE_PREC"
    "ISION\020`\022\030\n\024TF_COND_RUNE_AGILITY\020a\022\031\n\025TF_"
    "COND_GRAPPLINGHOOK\020b\022\"\n\036TF_COND_GRAPPLIN"
    "GHOOK_SAFEFALL\020c\022!\n\035TF_COND_GRAPPLINGHOO"
    "K_LATCHED\020d\022\"\n\036TF_COND_GRAPPLINGHOOK_BLE"
    "EDING\020e\022\034\n\030TF_COND_AFTERBURN_IMMUNE\020f\022\031\n"
    "\025TF_COND_RUNE_KNOCKOUT\020g\022\032\n\026TF_COND_RUNE"
    "_IMBALANCE\020h\022!\n\035TF_COND_CRITBOOSTED_RUNE"
    "_TEMP\020i\022!\n\035TF_COND_PASSTIME_INTERCEPTION"
    "\020j\022\037\n\033TF_COND_SWIMMING_NO_EFFECTS\020k\022\025\n\021T"
    "F_COND_PURGATORY\020l\022\025\n\021TF_COND_RUNE_KING\020"
    "m\022\027\n\023TF_COND_RUNE_PLAGUE\020n\022\032\n\026TF_COND_RU"
    "NE_SUPERNOVA\020o\022\022\n\016TF_COND_PLAGUE\020p\022\027\n\023TF"
    "_COND_KING_BUFFED\020q\022\026\n\022TF_COND_TEAM_GLOW"
    "S\020r\022\034\n\030TF_COND_KNOCKED_INTO_AIR\020s\022\036\n\032TF_"
    "COND_COMPETITIVE_WINNER\020t\022\035\n\031TF_COND_COM"
    "PETITIVE_LOSER\020u\022\032\n\026TF_COND_HEALING_DEBU"
    "FF\020v\022#\n\037TF_COND_PASSTIME_PENALTY_DEBUFF\020"
    "w\022\036\n\032TF_COND_PARACHUTE_DEPLOYED\020x\022!\n\035TF_"
    "COND_NO_COMBAT_SPEED_BOOST\020y\022\033\n\027TF_COND_"
    "TRANQ_SPY_BOOST\020z\022\030\n\024TF_COND_TRANQ_MARKE"
    "D\020{\022\026\n\022TF_COND_ROCKETPACK\020~\022 \n\034TF_COND_R"
    "OCKETPACK_PASSENGER\020\177\022\034\n\027TF_COND_STEALTH"
    "ED_PHASE\020\200\001\022\032\n\025TF_COND_CLIP_OVERLOAD\020\201\001\022"
    "\034\n\027TF_COND_SPY_CLASS_STEAL\020\202\001\022\020\n\013TF_COND"
    "_GAS\020\203\001\"-\n\010ETF2Team\022\017\n\013TF_TEAM_RED\020\002\022\020\n\014"
    "TF_TEAM_BLUE\020\003\"\267\007\n\014CMsgQuestDef\022#\n\006heade"
    "r\030\001 \002(\0132\023.CMsgProtoDefHeader\022\024\n\014max_poin"
    "ts_0\030\002 \001(\r\022\024\n\014max_points_1\030\003 \001(\r\022\024\n\014max_"
    "points_2\030\004 \001(\r\022\033\n\rname_loctoken\030\005 \001(\tB\004\220"
    "\227\"\001\022\021\n\toperation\030\007 \001(\t\022-\n\013mm_criteria\030\010 "
    "\001(\0132\030.CMsgQuestDef.MMCriteria\022T\n\nnode_im"
    "age\030\014 \001(\tB@\242\227\"\nNode Image\252\227\".Filename of"
    " the image to show on the node view\022B\n\ni"
    "con_image\030\r \001(\tB.\242\227\"\tNode Icon\252\227\"\035Which "
    "icon to show on the map\022$\n\005theme\030\016 \001(\0132\017"
    ".CMsgProtoDefIDB\004\200\227\"\002\022F\n\014loaner_names\030\017 "
    "\003(\tB0\242\227\"\007Loaners\252\227\"!Names of items to gi"
    "ve as loaners\0223\n\nobjectives\030\020 \003(\0132\037.CMsg"
    "QuestDef.ObjectiveInstance\022e\n\003map\030\021 \003(\tB"
    "X\242\227\"\rMaps Modifier\252\227\"CIf set, the player"
    " must be on one of the listed maps to ge"
    "t credit.\032I\n\nMMCriteria\022\022\n\ngroup_name\030\001 "
    "\001(\t\022\025\n\rcategory_name\030\002 \001(\t\022\020\n\010map_name\030\003"
    " \001(\t\032\361\001\n\021ObjectiveInstance\022(\n\tobjective\030"
    "\001 \001(\0132\017.CMsgProtoDefIDB\004\200\227\"\005\022!\n\npoint_ty"
    "pe\030\002 \001(\0162\r.EQuestPoints\022\216\001\n\013point_value\030"
    "\003 \001(\rBy\242\227\"\017Points Override\252\227\"bOverride v"
    "alue for the point value of the objectiv"
    "e.  If not set, uses the objective\'s poi"
    "nt value\"\200\003\n\025CMsgQuestMapStoreItem\022#\n\006he"
    "ader\030\001 \002(\0132\023.CMsgProtoDefHeader\022\021\n\titem_"
    "name\030\002 \001(\t\022a\n\024reward_lootlist_name\030\006 \001(\t"
    "BC\242\227\"\017Reward Lootlist\252\227\",The name of the"
    " lootlist to roll as a reward\022\"\n\005price\030\003"
    " \001(\0132\r.CMsgVarFieldB\004\360\227\"\006\022Y\n\016purchase_li"
    "mit\030\004 \001(\rBA\242\227\"\016Purchase Limit\252\227\"+How man"
    "y times this reward can be purchased\022M\n\n"
    "sort_group\030\005 \001(\rB9\242\227\"\nSort group\252\227\"\'Sort"
    " by this group, then alhpabetically\"\324\005\n\025"
    "CMsgQuestMapRegionDef\022#\n\006header\030\001 \002(\0132\023."
    "CMsgProtoDefHeader\022\022\n\004name\030\002 \001(\tB\004\220\227\"\001\022\017"
    "\n\007resfile\030\003 \001(\t\0220\n\005links\030\004 \003(\0132!.CMsgQue"
    "stMapRegionDef.RegionLink\022s\n\013return_link"
    "\030\005 \001(\0132\017.CMsgProtoDefIDBM\200\227\"\003\242\227\"\013Return "
    "Link\252\227\"6Which link we go to when right-c"
    "licking in this region\022o\n\nradio_freq\030\006 \001"
    "(\002B[\242\227\"\013Radio Freq.\252\227\"HWhere the radio t"
    "uner goes on the CYOA PDA when this regi"
    "on is selection\022\215\001\n\nzoom_scale\030\007 \001(\002By\242\227"
    "\"\nZoom Scale\252\227\"gHow zoomed in this panel"
    " should be.  Affects the scale of the ma"
    "p grid lines and node link dashed lines\022"
    "k\n\tstar_type\030\010 \001(\0132\017.CMsgProtoDefIDBG\200\227\""
    "\014\242\227\"\tStar Type\252\227\"2What stars (if any) th"
    "e nodes within use to unlock\032\\\n\nRegionLi"
    "nk\0222\n\023target_region_defid\030\001 \002(\0132\017.CMsgPr"
    "otoDefIDB\004\200\227\"\003\022\014\n\004xpos\030\002 \001(\r\022\014\n\004ypos\030\003 \001"
    "(\r\"\274\001\n\014CMsgVarField\022\026\n\010variable\030\001 \001(\tB\004\370"
    "\227\"\001\022\017\n\005float\030\002 \001(\002H\000\022\020\n\006double\030\003 \001(\001H\000\022\020"
    "\n\006uint32\030\004 \001(\rH\000\022\020\n\006uint64\030\005 \001(\004H\000\022\020\n\006si"
    "nt32\030\006 \001(\021H\000\022\020\n\006sint64\030\007 \001(\022H\000\022\016\n\004bool\030\010"
    " \001(\010H\000\022\020\n\006string\030\t \001(\tH\000B\007\n\005value\"\\\n\024CMs"
    "gQuestMapStarType\022#\n\006header\030\001 \002(\0132\023.CMsg"
    "ProtoDefHeader\022\037\n\004name\030\002 \001(\tB\021\220\227\"\001\242\227\"\tTy"
    "pe Name\"\202\t\n\023CMsgQuestMapNodeDef\022#\n\006heade"
    "r\030\001 \002(\0132\023.CMsgProtoDefHeader\022A\n\rname_loc"
    "token\030\004 \001(\tB*\220\227\"\001\242\227\"\tNode Name\252\227\"\025The na"
    "me of this node\022;\n\005x_pos\030\006 \001(\002B,\242\227\"\tMap "
    "X Pos\252\227\"\033X position on the quest map\022;\n\005"
    "y_pos\030\007 \001(\002B,\242\227\"\tMap Y Pos\252\227\"\033Y position"
    " on the quest map\022t\n\tcondition\030\t \001(\0132\032.C"
    "MsgQuestMapNodeConditionBE\242\227\"\nConditions"
    "\252\227\"3Logic to unlock this node. Can be ne"
    "sted with logic\022g\n\rowning_region\030\n \001(\0132\017"
    ".CMsgProtoDefIDB\?\200\227\"\003\242\227\"\006Region\252\227\"-Which"
    " region in the map this node shows up in"
    "\022d\n\rquest_options\030\013 \003(\0132\017.CMsgProtoDefID"
    "B<\200\227\"\004\242\227\"\016Offered Quests\252\227\"\036Which quests"
    " this node offers.\270\227\"\003\022`\n\024associated_ope"
    "ration\030\020 \001(\tBB\242\227\"\024Associated Operation\252\227"
    "\"&Operation this node is associated with"
    "\022T\n\020reward_item_name\030\022 \001(\tB:\242\227\"\013Reward I"
    "tem\252\227\"\'The name of an item to give as a "
    "reward\022a\n\024reward_lootlist_name\030\026 \001(\tBC\242\227"
    "\"\017Reward Lootlist\252\227\",The name of the loo"
    "tlist to roll as a reward\022u\n\013cash_reward"
    "\030\023 \001(\0162\020.ENodeCashRewardBN\242\227\"\013Cash Rewar"
    "d\252\227\";How much cash to give when completi"
    "ng the primary objective\022Z\n\tstar_type\030\024 "
    "\001(\0132\017.CMsgProtoDefIDB6\200\227\"\014\242\227\"\tStar Type\252"
    "\227\"!Which type of star this node uses\022V\n\017"
    "stars_to_unlock\030\025 \001(\r:\0011B:\242\227\"\017Stars to U"
    "nlock\252\227\"#Numbers of stars it costs to un"
    "lock\"=\n\026CMsgPaintKit_Variables\022#\n\006header"
    "\030\001 \002(\0132\023.CMsgProtoDefHeader\"\216\004\n#CMsgPain"
    "tKit_Operation_TextureStage\022$\n\007texture\030\001"
    " \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022(\n\013texture_red"
    "\030\002 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022)\n\014texture_b"
    "lue\030\003 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022)\n\014adjust"
    "_black\030\004 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022*\n\radj"
    "ust_offset\030\005 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022)\n"
    "\014adjust_gamma\030\006 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t"
    "\022%\n\010rotation\030\007 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022"
    "(\n\013translate_u\030\010 \001(\0132\r.CMsgVarFieldB\004\360\227\""
    "\t\022(\n\013translate_v\030\t \001(\0132\r.CMsgVarFieldB\004\360"
    "\227\"\t\022%\n\010scale_uv\030\n \001(\0132\r.CMsgVarFieldB\004\360\227"
    "\"\t\022#\n\006flip_u\030\013 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022"
    "#\n\006flip_v\030\014 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\"\310\003\n"
    "#CMsgPaintKit_Operation_CombineStage\022)\n\014"
    "adjust_black\030\001 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\022"
    "*\n\radjust_offset\030\002 \001(\0132\r.CMsgVarFieldB\004\360"
    "\227\"\t\022)\n\014adjust_gamma\030\003 \001(\0132\r.CMsgVarField"
    "B\004\360\227\"\t\022%\n\010rotation\030\004 \001(\0132\r.CMsgVarFieldB"
    "\004\360\227\"\t\022(\n\013translate_u\030\005 \001(\0132\r.CMsgVarFiel"
    "dB\004\360\227\"\t\022(\n\013translate_v\030\006 \001(\0132\r.CMsgVarFi"
    "eldB\004\360\227\"\t\022%\n\010scale_uv\030\007 \001(\0132\r.CMsgVarFie"
    "ldB\004\360\227\"\t\022#\n\006flip_u\030\010 \001(\0132\r.CMsgVarFieldB"
    "\004\360\227\"\t\022#\n\006flip_v\030\t \001(\0132\r.CMsgVarFieldB\004\360\227"
    "\"\t\0223\n\016operation_node\030\013 \003(\0132\033.CMsgPaintKi"
    "t_OperationNode\"r\n\"CMsgPaintKit_Operatio"
    "n_SelectStage\022#\n\006groups\030\001 \001(\0132\r.CMsgVarF"
    "ieldB\004\360\227\"\t\022\'\n\006select\030\002 \003(\0132\r.CMsgVarFiel"
    "dB\010\360\227\"\t\270\227\"\020\"\346\002\n\036CMsgPaintKit_Operation_S"
    "ticker\022W\n\004base\030\001 \001(\0132\r.CMsgVarFieldB:\360\227\""
    "\t\252\227\"2Name of the base file for the stick"
    "er (the albedo)\022S\n\006weight\030\002 \001(\0132\r.CMsgVa"
    "rFieldB4\360\227\"\t\252\227\",Random likelihood this o"
    "ne is to be selected\022\225\001\n\004spec\030\003 \001(\0132\r.CM"
    "sgVarFieldBx\360\227\"\t\252\227\"pName of the specular"
    " file for the sticker, or if blank we wi"
    "ll assume it is baseFilename + _spec + b"
    "aseExtension\"\200\003\n#CMsgPaintKit_Operation_"
    "StickerStage\0220\n\007sticker\030\001 \003(\0132\037.CMsgPain"
    "tKit_Operation_Sticker\022$\n\007dest_tl\030\002 \001(\0132"
    "\r.CMsgVarFieldB\004\360\227\"\t\022$\n\007dest_tr\030\003 \001(\0132\r."
    "CMsgVarFieldB\004\360\227\"\t\022$\n\007dest_bl\030\004 \001(\0132\r.CM"
    "sgVarFieldB\004\360\227\"\t\022)\n\014adjust_black\030\005 \001(\0132\r"
    ".CMsgVarFieldB\004\360\227\"\t\022*\n\radjust_offset\030\006 \001"
    "(\0132\r.CMsgVarFieldB\004\360\227\"\t\022)\n\014adjust_gamma\030"
    "\007 \001(\0132\r.CMsgVarFieldB\004\360\227\"\t\0223\n\016operation_"
    "node\030\t \003(\0132\033.CMsgPaintKit_OperationNode\""
    "\231\003\n\033CMsgPaintKit_OperationStage\022>\n\016textu"
    "re_lookup\030\001 \001(\0132$.CMsgPaintKit_Operation"
    "_TextureStageH\000\022;\n\013combine_add\030\002 \001(\0132$.C"
    "MsgPaintKit_Operation_CombineStageH\000\022<\n\014"
    "combine_lerp\030\003 \001(\0132$.CMsgPaintKit_Operat"
    "ion_CombineStageH\000\022@\n\020combine_multiply\030\004"
    " \001(\0132$.CMsgPaintKit_Operation_CombineSta"
    "geH\000\0225\n\006select\030\005 \001(\0132#.CMsgPaintKit_Oper"
    "ation_SelectStageH\000\022=\n\rapply_sticker\030\006 \001"
    "(\0132$.CMsgPaintKit_Operation_StickerStage"
    "H\000B\007\n\005stage\"\214\001\n\032CMsgPaintKit_OperationNo"
    "de\022-\n\005stage\030\001 \001(\0132\034.CMsgPaintKit_Operati"
    "onStageH\000\0227\n\022operation_template\030\002 \001(\0132\017."
    "CMsgProtoDefIDB\010\200\227\"\007\340\227\"\001H\000B\006\n\004node\"r\n\026CM"
    "sgPaintKit_Operation\022#\n\006header\030\001 \002(\0132\023.C"
    "MsgProtoDefHeader\0223\n\016operation_node\030\002 \003("
    "\0132\033.CMsgPaintKit_OperationNode\"\312\002\n\033CMsgP"
    "aintKit_ItemDefinition\022#\n\006header\030\001 \002(\0132\023"
    ".CMsgProtoDefHeader\022\035\n\025item_definition_i"
    "ndex\030\002 \002(\r\0224\n\021variable_template\030\003 \001(\0132\017."
    "CMsgProtoDefIDB\010\200\227\"\006\340\227\"\001\022A\n\ndefinition\030\004"
    " \003(\0132\'.CMsgPaintKit_ItemDefinition.Defin"
    "itionB\004\270\227\"\005\032n\n\nDefinition\0221\n\022operation_t"
    "emplate\030\001 \001(\0132\017.CMsgProtoDefIDB\004\200\227\"\007\022-\n\010"
    "variable\030\002 \003(\0132\r.CMsgVarFieldB\014\300\227\"\000\310\227\"\000\360"
    "\227\"\t\"\374\026\n\027CMsgPaintKit_Definition\022#\n\006heade"
    "r\030\001 \002(\0132\023.CMsgProtoDefHeader\022\033\n\rloc_desc"
    "token\030\002 \001(\tB\004\220\227\"\001\022\263\001\n\022operation_template"
    "\030\003 \001(\0132\017.CMsgProtoDefIDB\205\001\340\227\"\001\200\227\"\007\252\227\"yop"
    "eration template which all items in the "
    "list will use unless there\'s operation_t"
    "emplate specified in an item_definition\022"
    "\031\n\021has_team_textures\030\004 \001(\010\022+\n\004item\030\005 \003(\013"
    "2\035.CMsgPaintKit_Definition.Item\0224\n\rpaint"
    "kit_tool\030\006 \001(\0132\035.CMsgPaintKit_Definition"
    ".Item\0223\n\014flamethrower\030\007 \001(\0132\035.CMsgPaintK"
    "it_Definition.Item\0226\n\017grenadelauncher\030\010 "
    "\001(\0132\035.CMsgPaintKit_Definition.Item\022,\n\005kn"
    "ife\030\t \001(\0132\035.CMsgPaintKit_Definition.Item"
    "\022.\n\007medigun\030\n \001(\0132\035.CMsgPaintKit_Definit"
    "ion.Item\022.\n\007minigun\030\013 \001(\0132\035.CMsgPaintKit"
    "_Definition.Item\022-\n\006pistol\030\014 \001(\0132\035.CMsgP"
    "aintKit_Definition.Item\022/\n\010revolver\030\r \001("
    "\0132\035.CMsgPaintKit_Definition.Item\0225\n\016rock"
    "etlauncher\030\016 \001(\0132\035.CMsgPaintKit_Definiti"
    "on.Item\0221\n\nscattergun\030\017 \001(\0132\035.CMsgPaintK"
    "it_Definition.Item\022.\n\007shotgun\030\020 \001(\0132\035.CM"
    "sgPaintKit_Definition.Item\022*\n\003smg\030\021 \001(\0132"
    "\035.CMsgPaintKit_Definition.Item\0222\n\013sniper"
    "rifle\030\022 \001(\0132\035.CMsgPaintKit_Definition.It"
    "em\022:\n\023stickybomb_launcher\030\023 \001(\0132\035.CMsgPa"
    "intKit_Definition.Item\022.\n\007ubersaw\030\024 \001(\0132"
    "\035.CMsgPaintKit_Definition.Item\022-\n\006wrench"
    "\030\025 \001(\0132\035.CMsgPaintKit_Definition.Item\0220\n"
    "\tamputator\030\026 \001(\0132\035.CMsgPaintKit_Definiti"
    "on.Item\0224\n\ratom_launcher\030\027 \001(\0132\035.CMsgPai"
    "ntKit_Definition.Item\0225\n\016back_scratcher\030"
    "\030 \001(\0132\035.CMsgPaintKit_Definition.Item\0220\n\t"
    "battleaxe\030\031 \001(\0132\035.CMsgPaintKit_Definitio"
    "n.Item\0224\n\rbazaar_sniper\030\032 \001(\0132\035.CMsgPain"
    "tKit_Definition.Item\022/\n\010blackbox\030\033 \001(\0132\035"
    ".CMsgPaintKit_Definition.Item\0225\n\016claidhe"
    "amohmor\030\034 \001(\0132\035.CMsgPaintKit_Definition."
    "Item\0229\n\022crusaders_crossbow\030\035 \001(\0132\035.CMsgP"
    "aintKit_Definition.Item\0220\n\tdegreaser\030\036 \001"
    "(\0132\035.CMsgPaintKit_Definition.Item\0222\n\013dem"
    "o_cannon\030\037 \001(\0132\035.CMsgPaintKit_Definition"
    ".Item\0228\n\021demo_sultan_sword\030  \001(\0132\035.CMsgP"
    "aintKit_Definition.Item\0220\n\tdetonator\030! \001"
    "(\0132\035.CMsgPaintKit_Definition.Item\0222\n\013gat"
    "ling_gun\030\" \001(\0132\035.CMsgPaintKit_Definition"
    ".Item\0223\n\014holymackerel\030# \001(\0132\035.CMsgPaintK"
    "it_Definition.Item\022*\n\003jag\030$ \001(\0132\035.CMsgPa"
    "intKit_Definition.Item\0220\n\tlochnload\030% \001("
    "\0132\035.CMsgPaintKit_Definition.Item\0220\n\tpowe"
    "rjack\030& \001(\0132\035.CMsgPaintKit_Definition.It"
    "em\022/\n\010quadball\030\' \001(\0132\035.CMsgPaintKit_Defi"
    "nition.Item\0226\n\017reserve_shooter\030( \001(\0132\035.C"
    "MsgPaintKit_Definition.Item\0222\n\013riding_cr"
    "op\030) \001(\0132\035.CMsgPaintKit_Definition.Item\022"
    "3\n\014russian_riot\030* \001(\0132\035.CMsgPaintKit_Def"
    "inition.Item\022/\n\010scimitar\030+ \001(\0132\035.CMsgPai"
    "ntKit_Definition.Item\0222\n\013scorch_shot\030, \001"
    "(\0132\035.CMsgPaintKit_Definition.Item\0220\n\tsho"
    "rtstop\030- \001(\0132\035.CMsgPaintKit_Definition.I"
    "tem\0222\n\013soda_popper\030. \001(\0132\035.CMsgPaintKit_"
    "Definition.Item\0223\n\014tele_shotgun\030/ \001(\0132\035."
    "CMsgPaintKit_Definition.Item\022/\n\010tomislav"
    "\0300 \001(\0132\035.CMsgPaintKit_Definition.Item\0220\n"
    "\ttrenchgun\0301 \001(\0132\035.CMsgPaintKit_Definiti"
    "on.Item\0224\n\rwinger_pistol\0302 \001(\0132\035.CMsgPai"
    "ntKit_Definition.Item\032\232\002\n\004Item\022^\n\030item_d"
    "efinition_template\030\001 \002(\0132\017.CMsgProtoDefI"
    "DB+\200\227\"\010\322\227\"#CPaintKitDefIdFieldProtoEdito"
    "rField\0224\n\004data\030\005 \001(\0132&.CMsgPaintKit_Defi"
    "nition.Item.ItemData\032v\n\010ItemData\022 \n\022can_"
    "apply_paintkit\030\002 \001(\010:\004true\022\031\n\021material_o"
    "verride\030\003 \001(\t\022-\n\010variable\030\004 \003(\0132\r.CMsgVa"
    "rFieldB\014\300\227\"\000\310\227\"\000\360\227\"\t:\004\200\210\'\000\"\376\003\n\016CMsgQuest"
    "Theme\022#\n\006header\030\001 \002(\0132\023.CMsgProtoDefHead"
    "er\022\030\n\020notification_res\030\002 \001(\t\022\026\n\016quest_it"
    "em_res\030\003 \001(\t\022\033\n\023in_game_tracker_res\030\004 \001("
    "\t\0226\n\013give_sounds\030\005 \003(\0132!.CMsgQuestTheme."
    "WeightedStringSet\022:\n\017complete_sounds\030\006 \003"
    "(\0132!.CMsgQuestTheme.WeightedStringSet\022@\n"
    "\025fully_complete_sounds\030\007 \003(\0132!.CMsgQuest"
    "Theme.WeightedStringSet\022\024\n\014reward_sound\030"
    "\010 \001(\t\022\025\n\rdiscard_sound\030\t \001(\t\022\024\n\014reveal_s"
    "ound\030\n \001(\t\0320\n\016WeightedString\022\016\n\006string\030\001"
    " \001(\t\022\016\n\006weight\030\002 \001(\r\032M\n\021WeightedStringSe"
    "t\0228\n\020weighted_strings\030\001 \003(\0132\036.CMsgQuestT"
    "heme.WeightedString\"\246\002\n#CMsgQuestMapNode"
    "Condition_NodeState\022\200\001\n\031bonus_objectives"
    "_required\030\001 \001(\r:\0010BZ\242\227\"\016Bonus Required\252\227"
    "\"DNumber of bonus objectives required, o"
    "n top of the primary objective\022|\n\021target"
    "_node_defid\030\002 \002(\0132\017.CMsgProtoDefIDBP\200\227\"\000"
    "\242\227\"\013Target Node\252\227\"9Which node is require"
    "d to have the above number of medals\"\330\001\n"
    "\037CMsgQuestMapNodeCondition_Logic\022D\n\toper"
    "ation\030\001 \002(\0162\021.LogicalOperationB\036\242\227\"\005Logi"
    "c\252\227\"\021Logical operation\022o\n\016sub_conditions"
    "\030\002 \003(\0132\032.CMsgQuestMapNodeConditionB;\242\227\"\010"
    "Operands\252\227\"+Definitions to use in the lo"
    "gical operation\"\317\002\n\031CMsgQuestMapNodeCond"
    "ition\022\227\001\n\nnode_state\030\001 \001(\0132$.CMsgQuestMa"
    "pNodeCondition_NodeStateB[\242\227\"\024Node State"
    " Condition\252\227\"\?Returns true if a specific"
    " node has a required number of medalsH\000\022"
    "\212\001\n\007logical\030\002 \001(\0132 .CMsgQuestMapNodeCond"
    "ition_LogicBU\242\227\"\021Logical Condition\252\227\"<Pe"
    "rforms a specified logical operation to "
    "all sub conditionsH\000B\013\n\toperation\"5\n\016CMs"
    "gHeaderOnly\022#\n\006header\030\001 \002(\0132\023.CMsgProtoD"
    "efHeader*,\n\020LogicalOperation\022\007\n\003AND\020\000\022\006\n"
    "\002OR\020\001\022\007\n\003NOT\020\002*|\n\026EValueDefinitionSource"
    "\022\025\n\021REFERENCE_DEFINES\020\000\022\022\n\016PARENT_DEFINE"
    "S\020\001\022\020\n\014THIS_DEFINES\020\002\022\024\n\020VARIABLE_DEFINE"
    "S\020\003\022\017\n\013NOT_DEFINED\020\004*\201\003\n\rProtoDefTypes\022\033"
    "\n\027DEF_TYPE_QUEST_MAP_NODE\020\000\022\030\n\024DEF_TYPE_"
    "QUEST_THEME\020\002\022\035\n\031DEF_TYPE_QUEST_MAP_REGI"
    "ON\020\003\022\022\n\016DEF_TYPE_QUEST\020\004\022\034\n\030DEF_TYPE_QUE"
    "ST_OBJECTIVE\020\005\022\037\n\033DEF_TYPE_PAINTKIT_VARI"
    "ABLES\020\006\022\037\n\033DEF_TYPE_PAINTKIT_OPERATION\020\007"
    "\022%\n!DEF_TYPE_PAINTKIT_ITEM_DEFINITION\020\010\022"
    " \n\034DEF_TYPE_PAINTKIT_DEFINITION\020\t\022\030\n\024DEF"
    "_TYPE_HEADER_ONLY\020\n\022!\n\035DEF_TYPE_QUEST_MA"
    "P_STORE_ITEM\020\013\022 \n\034DEF_TYPE_QUEST_MAP_STA"
    "R_TYPE\020\014*[\n\014EQuestPoints\022\027\n\023QUEST_POINTS"
    "_NOVICE\020\000\022\031\n\025QUEST_POINTS_ADVANCED\020\001\022\027\n\023"
    "QUEST_POINTS_EXPERT\020\002*\312\001\n\rEVarFieldType\022"
    "\024\n\020VAR_TYPE_INVALID\020\001\022\022\n\016VAR_TYPE_FLOAT\020"
    "\002\022\023\n\017VAR_TYPE_DOUBLE\020\003\022\023\n\017VAR_TYPE_UINT3"
    "2\020\004\022\023\n\017VAR_TYPE_UINT64\020\005\022\023\n\017VAR_TYPE_SIN"
    "T32\020\006\022\023\n\017VAR_TYPE_SINT64\020\007\022\021\n\rVAR_TYPE_B"
    "OOL\020\010\022\023\n\017VAR_TYPE_STRING\020\t*m\n\017ENodeCashR"
    "eward\022\024\n\020CASH_REWARD_NONE\020\001\022\025\n\021CASH_REWA"
    "RD_SMALL\020\002\022\026\n\022CASH_REWARD_MEDIUM\020\003\022\025\n\021CA"
    "SH_REWARD_LARGE\020\004:\?\n\016start_expanded\022\037.go"
    "ogle.protobuf.MessageOptions\030\200\361\004 \001(\010:\004tr"
    "ue:C\n\nvalid_type\022\035.google.protobuf.Field"
    "Options\030\360\242\004 \001(\0162\016.ProtoDefTypes:7\n\010edita"
    "ble\022\035.google.protobuf.FieldOptions\030\361\242\004 \001"
    "(\010:\004true:9\n\tlocalized\022\035.google.protobuf."
    "FieldOptions\030\362\242\004 \001(\010:\005false:>\n\016do_not_in"
    "herit\022\035.google.protobuf.FieldOptions\030\363\242\004"
    " \001(\010:\005false:5\n\014display_name\022\035.google.pro"
    "tobuf.FieldOptions\030\364\242\004 \001(\t:0\n\007comment\022\035."
    "google.protobuf.FieldOptions\030\365\242\004 \001(\t:2\n\t"
    "max_count\022\035.google.protobuf.FieldOptions"
    "\030\367\242\004 \001(\r:8\n\tallow_add\022\035.google.protobuf."
    "FieldOptions\030\370\242\004 \001(\010:\004true:;\n\014allow_dele"
    "te\022\035.google.protobuf.FieldOptions\030\371\242\004 \001("
    "\010:\004true:=\n\024panel_class_override\022\035.google"
    ".protobuf.FieldOptions\030\372\242\004 \001(\t:L\n#messag"
    "e_inherhitance_key_field_name\022\035.google.p"
    "rotobuf.FieldOptions\030\373\242\004 \001(\t:K\n\033inherit_"
    "reference_variables\022\035.google.protobuf.Fi"
    "eldOptions\030\374\242\004 \001(\010:\005false:A\n\021self_inheri"
    "t_only\022\035.google.protobuf.FieldOptions\030\375\242"
    "\004 \001(\010:\005false:Y\n\016var_field_type\022\035.google."
    "protobuf.FieldOptions\030\376\242\004 \001(\0162\016.EVarFiel"
    "dType:\020VAR_TYPE_INVALID:A\n\021merging_key_f"
    "ield\022\035.google.protobuf.FieldOptions\030\377\242\004 "
    "\001(\010:\005falseB\005H\001\200\001\000", 20297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tf_proto_def_messages.proto", &protobuf_RegisterTypes);
  CMsgFieldID::default_instance_ = new CMsgFieldID();
  CMsgFieldID_CMsgField::default_instance_ = new CMsgFieldID_CMsgField();
  CMsgUniversalFieldID::default_instance_ = new CMsgUniversalFieldID();
  CMsgVariableDefinition::default_instance_ = new CMsgVariableDefinition();
  CMsgProtoDefHeader::default_instance_ = new CMsgProtoDefHeader();
  CMsgValidTypes::default_instance_ = new CMsgValidTypes();
  CMsgProtoDefID::default_instance_ = new CMsgProtoDefID();
  CMsgProtoDefID_default_oneof_instance_ = new CMsgProtoDefIDOneofInstance;
  CMsgQuestObjectiveDef::default_instance_ = new CMsgQuestObjectiveDef();
  CMsgQuestDef::default_instance_ = new CMsgQuestDef();
  CMsgQuestDef_MMCriteria::default_instance_ = new CMsgQuestDef_MMCriteria();
  CMsgQuestDef_ObjectiveInstance::default_instance_ = new CMsgQuestDef_ObjectiveInstance();
  CMsgQuestMapStoreItem::default_instance_ = new CMsgQuestMapStoreItem();
  CMsgQuestMapRegionDef::default_instance_ = new CMsgQuestMapRegionDef();
  CMsgQuestMapRegionDef_RegionLink::default_instance_ = new CMsgQuestMapRegionDef_RegionLink();
  CMsgVarField::default_instance_ = new CMsgVarField();
  CMsgVarField_default_oneof_instance_ = new CMsgVarFieldOneofInstance;
  CMsgQuestMapStarType::default_instance_ = new CMsgQuestMapStarType();
  CMsgQuestMapNodeDef::default_instance_ = new CMsgQuestMapNodeDef();
  CMsgPaintKit_Variables::default_instance_ = new CMsgPaintKit_Variables();
  CMsgPaintKit_Operation_TextureStage::default_instance_ = new CMsgPaintKit_Operation_TextureStage();
  CMsgPaintKit_Operation_CombineStage::default_instance_ = new CMsgPaintKit_Operation_CombineStage();
  CMsgPaintKit_Operation_SelectStage::default_instance_ = new CMsgPaintKit_Operation_SelectStage();
  CMsgPaintKit_Operation_Sticker::default_instance_ = new CMsgPaintKit_Operation_Sticker();
  CMsgPaintKit_Operation_StickerStage::default_instance_ = new CMsgPaintKit_Operation_StickerStage();
  CMsgPaintKit_OperationStage::default_instance_ = new CMsgPaintKit_OperationStage();
  CMsgPaintKit_OperationStage_default_oneof_instance_ = new CMsgPaintKit_OperationStageOneofInstance;
  CMsgPaintKit_OperationNode::default_instance_ = new CMsgPaintKit_OperationNode();
  CMsgPaintKit_OperationNode_default_oneof_instance_ = new CMsgPaintKit_OperationNodeOneofInstance;
  CMsgPaintKit_Operation::default_instance_ = new CMsgPaintKit_Operation();
  CMsgPaintKit_ItemDefinition::default_instance_ = new CMsgPaintKit_ItemDefinition();
  CMsgPaintKit_ItemDefinition_Definition::default_instance_ = new CMsgPaintKit_ItemDefinition_Definition();
  CMsgPaintKit_Definition::default_instance_ = new CMsgPaintKit_Definition();
  CMsgPaintKit_Definition_Item::default_instance_ = new CMsgPaintKit_Definition_Item();
  CMsgPaintKit_Definition_Item_ItemData::default_instance_ = new CMsgPaintKit_Definition_Item_ItemData();
  CMsgQuestTheme::default_instance_ = new CMsgQuestTheme();
  CMsgQuestTheme_WeightedString::default_instance_ = new CMsgQuestTheme_WeightedString();
  CMsgQuestTheme_WeightedStringSet::default_instance_ = new CMsgQuestTheme_WeightedStringSet();
  CMsgQuestMapNodeCondition_NodeState::default_instance_ = new CMsgQuestMapNodeCondition_NodeState();
  CMsgQuestMapNodeCondition_Logic::default_instance_ = new CMsgQuestMapNodeCondition_Logic();
  CMsgQuestMapNodeCondition::default_instance_ = new CMsgQuestMapNodeCondition();
  CMsgQuestMapNodeCondition_default_oneof_instance_ = new CMsgQuestMapNodeConditionOneofInstance;
  CMsgHeaderOnly::default_instance_ = new CMsgHeaderOnly();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    80000, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70000, 14, false, false,
    &::ProtoDefTypes_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70001, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70002, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70003, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70004, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70005, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70007, 13, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70008, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70009, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70010, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70011, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70012, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70013, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70014, 14, false, false,
    &::EVarFieldType_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    70015, 8, false, false);
  CMsgFieldID::default_instance_->InitAsDefaultInstance();
  CMsgFieldID_CMsgField::default_instance_->InitAsDefaultInstance();
  CMsgUniversalFieldID::default_instance_->InitAsDefaultInstance();
  CMsgVariableDefinition::default_instance_->InitAsDefaultInstance();
  CMsgProtoDefHeader::default_instance_->InitAsDefaultInstance();
  CMsgValidTypes::default_instance_->InitAsDefaultInstance();
  CMsgProtoDefID::default_instance_->InitAsDefaultInstance();
  CMsgQuestObjectiveDef::default_instance_->InitAsDefaultInstance();
  CMsgQuestDef::default_instance_->InitAsDefaultInstance();
  CMsgQuestDef_MMCriteria::default_instance_->InitAsDefaultInstance();
  CMsgQuestDef_ObjectiveInstance::default_instance_->InitAsDefaultInstance();
  CMsgQuestMapStoreItem::default_instance_->InitAsDefaultInstance();
  CMsgQuestMapRegionDef::default_instance_->InitAsDefaultInstance();
  CMsgQuestMapRegionDef_RegionLink::default_instance_->InitAsDefaultInstance();
  CMsgVarField::default_instance_->InitAsDefaultInstance();
  CMsgQuestMapStarType::default_instance_->InitAsDefaultInstance();
  CMsgQuestMapNodeDef::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Variables::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Operation_TextureStage::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Operation_CombineStage::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Operation_SelectStage::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Operation_Sticker::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Operation_StickerStage::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_OperationStage::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_OperationNode::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Operation::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_ItemDefinition::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_ItemDefinition_Definition::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Definition::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Definition_Item::default_instance_->InitAsDefaultInstance();
  CMsgPaintKit_Definition_Item_ItemData::default_instance_->InitAsDefaultInstance();
  CMsgQuestTheme::default_instance_->InitAsDefaultInstance();
  CMsgQuestTheme_WeightedString::default_instance_->InitAsDefaultInstance();
  CMsgQuestTheme_WeightedStringSet::default_instance_->InitAsDefaultInstance();
  CMsgQuestMapNodeCondition_NodeState::default_instance_->InitAsDefaultInstance();
  CMsgQuestMapNodeCondition_Logic::default_instance_->InitAsDefaultInstance();
  CMsgQuestMapNodeCondition::default_instance_->InitAsDefaultInstance();
  CMsgHeaderOnly::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tf_5fproto_5fdef_5fmessages_2eproto {
  StaticDescriptorInitializer_tf_5fproto_5fdef_5fmessages_2eproto() {
    protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  }
} static_descriptor_initializer_tf_5fproto_5fdef_5fmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* LogicalOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicalOperation_descriptor_;
}
bool LogicalOperation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EValueDefinitionSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EValueDefinitionSource_descriptor_;
}
bool EValueDefinitionSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtoDefTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDefTypes_descriptor_;
}
bool ProtoDefTypes_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuestPoints_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuestPoints_descriptor_;
}
bool EQuestPoints_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EVarFieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVarFieldType_descriptor_;
}
bool EVarFieldType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENodeCashReward_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENodeCashReward_descriptor_;
}
bool ENodeCashReward_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFieldID_CMsgField::kFieldNumberFieldNumber;
const int CMsgFieldID_CMsgField::kRepeatedIndexFieldNumber;
#endif  // !_MSC_VER

CMsgFieldID_CMsgField::CMsgFieldID_CMsgField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgFieldID.CMsgField)
}

void CMsgFieldID_CMsgField::InitAsDefaultInstance() {
}

CMsgFieldID_CMsgField::CMsgFieldID_CMsgField(const CMsgFieldID_CMsgField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgFieldID.CMsgField)
}

void CMsgFieldID_CMsgField::SharedCtor() {
  _cached_size_ = 0;
  field_number_ = 0u;
  repeated_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFieldID_CMsgField::~CMsgFieldID_CMsgField() {
  // @@protoc_insertion_point(destructor:CMsgFieldID.CMsgField)
  SharedDtor();
}

void CMsgFieldID_CMsgField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFieldID_CMsgField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFieldID_CMsgField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFieldID_CMsgField_descriptor_;
}

const CMsgFieldID_CMsgField& CMsgFieldID_CMsgField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgFieldID_CMsgField* CMsgFieldID_CMsgField::default_instance_ = NULL;

CMsgFieldID_CMsgField* CMsgFieldID_CMsgField::New() const {
  return new CMsgFieldID_CMsgField;
}

void CMsgFieldID_CMsgField::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgFieldID_CMsgField*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(field_number_, repeated_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFieldID_CMsgField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgFieldID.CMsgField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 field_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_number_)));
          set_has_field_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_repeated_index;
        break;
      }

      // optional uint32 repeated_index = 2;
      case 2: {
        if (tag == 16) {
         parse_repeated_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeated_index_)));
          set_has_repeated_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgFieldID.CMsgField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgFieldID.CMsgField)
  return false;
#undef DO_
}

void CMsgFieldID_CMsgField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgFieldID.CMsgField)
  // optional uint32 field_number = 1;
  if (has_field_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->field_number(), output);
  }

  // optional uint32 repeated_index = 2;
  if (has_repeated_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->repeated_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgFieldID.CMsgField)
}

::google::protobuf::uint8* CMsgFieldID_CMsgField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFieldID.CMsgField)
  // optional uint32 field_number = 1;
  if (has_field_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->field_number(), target);
  }

  // optional uint32 repeated_index = 2;
  if (has_repeated_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->repeated_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFieldID.CMsgField)
  return target;
}

int CMsgFieldID_CMsgField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 field_number = 1;
    if (has_field_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->field_number());
    }

    // optional uint32 repeated_index = 2;
    if (has_repeated_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeated_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFieldID_CMsgField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFieldID_CMsgField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFieldID_CMsgField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFieldID_CMsgField::MergeFrom(const CMsgFieldID_CMsgField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_number()) {
      set_field_number(from.field_number());
    }
    if (from.has_repeated_index()) {
      set_repeated_index(from.repeated_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFieldID_CMsgField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFieldID_CMsgField::CopyFrom(const CMsgFieldID_CMsgField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFieldID_CMsgField::IsInitialized() const {

  return true;
}

void CMsgFieldID_CMsgField::Swap(CMsgFieldID_CMsgField* other) {
  if (other != this) {
    std::swap(field_number_, other->field_number_);
    std::swap(repeated_index_, other->repeated_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFieldID_CMsgField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFieldID_CMsgField_descriptor_;
  metadata.reflection = CMsgFieldID_CMsgField_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgFieldID::kFieldFieldNumber;
#endif  // !_MSC_VER

CMsgFieldID::CMsgFieldID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgFieldID)
}

void CMsgFieldID::InitAsDefaultInstance() {
}

CMsgFieldID::CMsgFieldID(const CMsgFieldID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgFieldID)
}

void CMsgFieldID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFieldID::~CMsgFieldID() {
  // @@protoc_insertion_point(destructor:CMsgFieldID)
  SharedDtor();
}

void CMsgFieldID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgFieldID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFieldID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgFieldID_descriptor_;
}

const CMsgFieldID& CMsgFieldID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgFieldID* CMsgFieldID::default_instance_ = NULL;

CMsgFieldID* CMsgFieldID::New() const {
  return new CMsgFieldID;
}

void CMsgFieldID::Clear() {
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgFieldID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgFieldID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgFieldID.CMsgField field = 1;
      case 1: {
        if (tag == 10) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_field;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgFieldID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgFieldID)
  return false;
#undef DO_
}

void CMsgFieldID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgFieldID)
  // repeated .CMsgFieldID.CMsgField field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgFieldID)
}

::google::protobuf::uint8* CMsgFieldID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFieldID)
  // repeated .CMsgFieldID.CMsgField field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFieldID)
  return target;
}

int CMsgFieldID::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgFieldID.CMsgField field = 1;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFieldID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgFieldID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgFieldID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgFieldID::MergeFrom(const CMsgFieldID& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgFieldID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFieldID::CopyFrom(const CMsgFieldID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFieldID::IsInitialized() const {

  return true;
}

void CMsgFieldID::Swap(CMsgFieldID* other) {
  if (other != this) {
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgFieldID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgFieldID_descriptor_;
  metadata.reflection = CMsgFieldID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgUniversalFieldID::kSourceTypeFieldNumber;
const int CMsgUniversalFieldID::kDefiningObjIdFieldNumber;
const int CMsgUniversalFieldID::kFieldIdFieldNumber;
#endif  // !_MSC_VER

CMsgUniversalFieldID::CMsgUniversalFieldID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgUniversalFieldID)
}

void CMsgUniversalFieldID::InitAsDefaultInstance() {
  defining_obj_id_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
  field_id_ = const_cast< ::CMsgFieldID*>(&::CMsgFieldID::default_instance());
}

CMsgUniversalFieldID::CMsgUniversalFieldID(const CMsgUniversalFieldID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgUniversalFieldID)
}

void CMsgUniversalFieldID::SharedCtor() {
  _cached_size_ = 0;
  source_type_ = 0;
  defining_obj_id_ = NULL;
  field_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgUniversalFieldID::~CMsgUniversalFieldID() {
  // @@protoc_insertion_point(destructor:CMsgUniversalFieldID)
  SharedDtor();
}

void CMsgUniversalFieldID::SharedDtor() {
  if (this != default_instance_) {
    delete defining_obj_id_;
    delete field_id_;
  }
}

void CMsgUniversalFieldID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgUniversalFieldID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgUniversalFieldID_descriptor_;
}

const CMsgUniversalFieldID& CMsgUniversalFieldID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgUniversalFieldID* CMsgUniversalFieldID::default_instance_ = NULL;

CMsgUniversalFieldID* CMsgUniversalFieldID::New() const {
  return new CMsgUniversalFieldID;
}

void CMsgUniversalFieldID::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    source_type_ = 0;
    if (has_defining_obj_id()) {
      if (defining_obj_id_ != NULL) defining_obj_id_->::CMsgProtoDefID::Clear();
    }
    if (has_field_id()) {
      if (field_id_ != NULL) field_id_->::CMsgFieldID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgUniversalFieldID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgUniversalFieldID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EValueDefinitionSource source_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EValueDefinitionSource_IsValid(value)) {
            set_source_type(static_cast< ::EValueDefinitionSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_defining_obj_id;
        break;
      }

      // optional .CMsgProtoDefID defining_obj_id = 2;
      case 2: {
        if (tag == 18) {
         parse_defining_obj_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defining_obj_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_field_id;
        break;
      }

      // optional .CMsgFieldID field_id = 3;
      case 3: {
        if (tag == 26) {
         parse_field_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgUniversalFieldID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgUniversalFieldID)
  return false;
#undef DO_
}

void CMsgUniversalFieldID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgUniversalFieldID)
  // optional .EValueDefinitionSource source_type = 1;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source_type(), output);
  }

  // optional .CMsgProtoDefID defining_obj_id = 2;
  if (has_defining_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defining_obj_id(), output);
  }

  // optional .CMsgFieldID field_id = 3;
  if (has_field_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->field_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgUniversalFieldID)
}

::google::protobuf::uint8* CMsgUniversalFieldID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUniversalFieldID)
  // optional .EValueDefinitionSource source_type = 1;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source_type(), target);
  }

  // optional .CMsgProtoDefID defining_obj_id = 2;
  if (has_defining_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defining_obj_id(), target);
  }

  // optional .CMsgFieldID field_id = 3;
  if (has_field_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->field_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUniversalFieldID)
  return target;
}

int CMsgUniversalFieldID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EValueDefinitionSource source_type = 1;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_type());
    }

    // optional .CMsgProtoDefID defining_obj_id = 2;
    if (has_defining_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defining_obj_id());
    }

    // optional .CMsgFieldID field_id = 3;
    if (has_field_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgUniversalFieldID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgUniversalFieldID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgUniversalFieldID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgUniversalFieldID::MergeFrom(const CMsgUniversalFieldID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_defining_obj_id()) {
      mutable_defining_obj_id()->::CMsgProtoDefID::MergeFrom(from.defining_obj_id());
    }
    if (from.has_field_id()) {
      mutable_field_id()->::CMsgFieldID::MergeFrom(from.field_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgUniversalFieldID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUniversalFieldID::CopyFrom(const CMsgUniversalFieldID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUniversalFieldID::IsInitialized() const {

  if (has_defining_obj_id()) {
    if (!this->defining_obj_id().IsInitialized()) return false;
  }
  return true;
}

void CMsgUniversalFieldID::Swap(CMsgUniversalFieldID* other) {
  if (other != this) {
    std::swap(source_type_, other->source_type_);
    std::swap(defining_obj_id_, other->defining_obj_id_);
    std::swap(field_id_, other->field_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgUniversalFieldID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgUniversalFieldID_descriptor_;
  metadata.reflection = CMsgUniversalFieldID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgVariableDefinition::kNameFieldNumber;
const int CMsgVariableDefinition::kInheritFieldNumber;
const int CMsgVariableDefinition::kValueFieldNumber;
#endif  // !_MSC_VER

CMsgVariableDefinition::CMsgVariableDefinition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgVariableDefinition)
}

void CMsgVariableDefinition::InitAsDefaultInstance() {
}

CMsgVariableDefinition::CMsgVariableDefinition(const CMsgVariableDefinition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgVariableDefinition)
}

void CMsgVariableDefinition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inherit_ = true;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgVariableDefinition::~CMsgVariableDefinition() {
  // @@protoc_insertion_point(destructor:CMsgVariableDefinition)
  SharedDtor();
}

void CMsgVariableDefinition::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CMsgVariableDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVariableDefinition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgVariableDefinition_descriptor_;
}

const CMsgVariableDefinition& CMsgVariableDefinition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgVariableDefinition* CMsgVariableDefinition::default_instance_ = NULL;

CMsgVariableDefinition* CMsgVariableDefinition::New() const {
  return new CMsgVariableDefinition;
}

void CMsgVariableDefinition::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    inherit_ = true;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgVariableDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgVariableDefinition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inherit;
        break;
      }

      // optional bool inherit = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_inherit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_)));
          set_has_inherit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgVariableDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgVariableDefinition)
  return false;
#undef DO_
}

void CMsgVariableDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgVariableDefinition)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool inherit = 2 [default = true];
  if (has_inherit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inherit(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgVariableDefinition)
}

::google::protobuf::uint8* CMsgVariableDefinition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVariableDefinition)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool inherit = 2 [default = true];
  if (has_inherit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->inherit(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVariableDefinition)
  return target;
}

int CMsgVariableDefinition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool inherit = 2 [default = true];
    if (has_inherit()) {
      total_size += 1 + 1;
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVariableDefinition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgVariableDefinition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgVariableDefinition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgVariableDefinition::MergeFrom(const CMsgVariableDefinition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_inherit()) {
      set_inherit(from.inherit());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgVariableDefinition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVariableDefinition::CopyFrom(const CMsgVariableDefinition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVariableDefinition::IsInitialized() const {

  return true;
}

void CMsgVariableDefinition::Swap(CMsgVariableDefinition* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(inherit_, other->inherit_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgVariableDefinition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgVariableDefinition_descriptor_;
  metadata.reflection = CMsgVariableDefinition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgProtoDefHeader::kDefindexFieldNumber;
const int CMsgProtoDefHeader::kNameFieldNumber;
const int CMsgProtoDefHeader::kPrefabsFieldNumber;
const int CMsgProtoDefHeader::kTagsFieldNumber;
const int CMsgProtoDefHeader::kPrefabOnlyFieldNumber;
const int CMsgProtoDefHeader::kVariablesFieldNumber;
#endif  // !_MSC_VER

CMsgProtoDefHeader::CMsgProtoDefHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgProtoDefHeader)
}

void CMsgProtoDefHeader::InitAsDefaultInstance() {
}

CMsgProtoDefHeader::CMsgProtoDefHeader(const CMsgProtoDefHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgProtoDefHeader)
}

void CMsgProtoDefHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  defindex_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefab_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgProtoDefHeader::~CMsgProtoDefHeader() {
  // @@protoc_insertion_point(destructor:CMsgProtoDefHeader)
  SharedDtor();
}

void CMsgProtoDefHeader::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgProtoDefHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtoDefHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgProtoDefHeader_descriptor_;
}

const CMsgProtoDefHeader& CMsgProtoDefHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgProtoDefHeader* CMsgProtoDefHeader::default_instance_ = NULL;

CMsgProtoDefHeader* CMsgProtoDefHeader::New() const {
  return new CMsgProtoDefHeader;
}

void CMsgProtoDefHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgProtoDefHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(defindex_, prefab_only_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  prefabs_.Clear();
  tags_.Clear();
  variables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgProtoDefHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgProtoDefHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 defindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
          set_has_defindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prefabs;
        break;
      }

      // repeated .CMsgProtoDefID prefabs = 3;
      case 3: {
        if (tag == 26) {
         parse_prefabs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prefabs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prefabs;
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (tag == 34) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        if (input->ExpectTag(40)) goto parse_prefab_only;
        break;
      }

      // optional bool prefab_only = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_prefab_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefab_only_)));
          set_has_prefab_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_variables;
        break;
      }

      // repeated .CMsgVariableDefinition variables = 6;
      case 6: {
        if (tag == 50) {
         parse_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variables()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_variables;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgProtoDefHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgProtoDefHeader)
  return false;
#undef DO_
}

void CMsgProtoDefHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgProtoDefHeader)
  // required uint32 defindex = 1;
  if (has_defindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->defindex(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .CMsgProtoDefID prefabs = 3;
  for (int i = 0; i < this->prefabs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prefabs(i), output);
  }

  // repeated string tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  // optional bool prefab_only = 5 [default = false];
  if (has_prefab_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->prefab_only(), output);
  }

  // repeated .CMsgVariableDefinition variables = 6;
  for (int i = 0; i < this->variables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->variables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgProtoDefHeader)
}

::google::protobuf::uint8* CMsgProtoDefHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoDefHeader)
  // required uint32 defindex = 1;
  if (has_defindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->defindex(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .CMsgProtoDefID prefabs = 3;
  for (int i = 0; i < this->prefabs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prefabs(i), target);
  }

  // repeated string tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  // optional bool prefab_only = 5 [default = false];
  if (has_prefab_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->prefab_only(), target);
  }

  // repeated .CMsgVariableDefinition variables = 6;
  for (int i = 0; i < this->variables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->variables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoDefHeader)
  return target;
}

int CMsgProtoDefHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 defindex = 1;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool prefab_only = 5 [default = false];
    if (has_prefab_only()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CMsgProtoDefID prefabs = 3;
  total_size += 1 * this->prefabs_size();
  for (int i = 0; i < this->prefabs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prefabs(i));
  }

  // repeated string tags = 4;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated .CMsgVariableDefinition variables = 6;
  total_size += 1 * this->variables_size();
  for (int i = 0; i < this->variables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtoDefHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgProtoDefHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgProtoDefHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgProtoDefHeader::MergeFrom(const CMsgProtoDefHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  prefabs_.MergeFrom(from.prefabs_);
  tags_.MergeFrom(from.tags_);
  variables_.MergeFrom(from.variables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defindex()) {
      set_defindex(from.defindex());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prefab_only()) {
      set_prefab_only(from.prefab_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgProtoDefHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoDefHeader::CopyFrom(const CMsgProtoDefHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoDefHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->prefabs())) return false;
  return true;
}

void CMsgProtoDefHeader::Swap(CMsgProtoDefHeader* other) {
  if (other != this) {
    std::swap(defindex_, other->defindex_);
    std::swap(name_, other->name_);
    prefabs_.Swap(&other->prefabs_);
    tags_.Swap(&other->tags_);
    std::swap(prefab_only_, other->prefab_only_);
    variables_.Swap(&other->variables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgProtoDefHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgProtoDefHeader_descriptor_;
  metadata.reflection = CMsgProtoDefHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgValidTypes::kTypesFieldNumber;
#endif  // !_MSC_VER

CMsgValidTypes::CMsgValidTypes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgValidTypes)
}

void CMsgValidTypes::InitAsDefaultInstance() {
}

CMsgValidTypes::CMsgValidTypes(const CMsgValidTypes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgValidTypes)
}

void CMsgValidTypes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgValidTypes::~CMsgValidTypes() {
  // @@protoc_insertion_point(destructor:CMsgValidTypes)
  SharedDtor();
}

void CMsgValidTypes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgValidTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgValidTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgValidTypes_descriptor_;
}

const CMsgValidTypes& CMsgValidTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgValidTypes* CMsgValidTypes::default_instance_ = NULL;

CMsgValidTypes* CMsgValidTypes::New() const {
  return new CMsgValidTypes;
}

void CMsgValidTypes::Clear() {
  types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgValidTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgValidTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoDefTypes types = 1;
      case 1: {
        if (tag == 8) {
         parse_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoDefTypes_IsValid(value)) {
            add_types(static_cast< ::ProtoDefTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::ProtoDefTypes_IsValid,
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_types;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgValidTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgValidTypes)
  return false;
#undef DO_
}

void CMsgValidTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgValidTypes)
  // repeated .ProtoDefTypes types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->types(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgValidTypes)
}

::google::protobuf::uint8* CMsgValidTypes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgValidTypes)
  // repeated .ProtoDefTypes types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->types(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgValidTypes)
  return target;
}

int CMsgValidTypes::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoDefTypes types = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    total_size += 1 * this->types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgValidTypes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgValidTypes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgValidTypes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgValidTypes::MergeFrom(const CMsgValidTypes& from) {
  GOOGLE_CHECK_NE(&from, this);
  types_.MergeFrom(from.types_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgValidTypes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgValidTypes::CopyFrom(const CMsgValidTypes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgValidTypes::IsInitialized() const {

  return true;
}

void CMsgValidTypes::Swap(CMsgValidTypes* other) {
  if (other != this) {
    types_.Swap(&other->types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgValidTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgValidTypes_descriptor_;
  metadata.reflection = CMsgValidTypes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgProtoDefID::kDefindexFieldNumber;
const int CMsgProtoDefID::kTypeFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypeQuestMapNodeFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypeQuestThemeFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypeQuestMapRegionFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypeQuestFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypeQuestObjectiveFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypePaintkitVariablesFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypePaintkitOperationFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypePaintkitItemDefinitionFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypePaintkitDefinitionFieldNumber;
const int CMsgProtoDefID::kInstanceDefTypeHeaderOnlyFieldNumber;
#endif  // !_MSC_VER

CMsgProtoDefID::CMsgProtoDefID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgProtoDefID)
}

void CMsgProtoDefID::InitAsDefaultInstance() {
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_quest_map_node_ = const_cast< ::CMsgQuestMapNodeDef*>(&::CMsgQuestMapNodeDef::default_instance());
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_quest_theme_ = const_cast< ::CMsgQuestTheme*>(&::CMsgQuestTheme::default_instance());
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_quest_map_region_ = const_cast< ::CMsgQuestMapRegionDef*>(&::CMsgQuestMapRegionDef::default_instance());
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_quest_ = const_cast< ::CMsgQuestDef*>(&::CMsgQuestDef::default_instance());
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_quest_objective_ = const_cast< ::CMsgQuestObjectiveDef*>(&::CMsgQuestObjectiveDef::default_instance());
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_paintkit_variables_ = const_cast< ::CMsgPaintKit_Variables*>(&::CMsgPaintKit_Variables::default_instance());
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_paintkit_operation_ = const_cast< ::CMsgPaintKit_Operation*>(&::CMsgPaintKit_Operation::default_instance());
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_paintkit_item_definition_ = const_cast< ::CMsgPaintKit_ItemDefinition*>(&::CMsgPaintKit_ItemDefinition::default_instance());
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_paintkit_definition_ = const_cast< ::CMsgPaintKit_Definition*>(&::CMsgPaintKit_Definition::default_instance());
  CMsgProtoDefID_default_oneof_instance_->instance_def_type_header_only_ = const_cast< ::CMsgHeaderOnly*>(&::CMsgHeaderOnly::default_instance());
}

CMsgProtoDefID::CMsgProtoDefID(const CMsgProtoDefID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgProtoDefID)
}

void CMsgProtoDefID::SharedCtor() {
  _cached_size_ = 0;
  defindex_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_instance();
}

CMsgProtoDefID::~CMsgProtoDefID() {
  // @@protoc_insertion_point(destructor:CMsgProtoDefID)
  SharedDtor();
}

void CMsgProtoDefID::SharedDtor() {
  if (has_instance()) {
    clear_instance();
  }
  if (this != default_instance_) {
  }
}

void CMsgProtoDefID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtoDefID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgProtoDefID_descriptor_;
}

const CMsgProtoDefID& CMsgProtoDefID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgProtoDefID* CMsgProtoDefID::default_instance_ = NULL;

CMsgProtoDefID* CMsgProtoDefID::New() const {
  return new CMsgProtoDefID;
}

void CMsgProtoDefID::clear_instance() {
  switch(instance_case()) {
    case kInstanceDefTypeQuestMapNode: {
      delete instance_.instance_def_type_quest_map_node_;
      break;
    }
    case kInstanceDefTypeQuestTheme: {
      delete instance_.instance_def_type_quest_theme_;
      break;
    }
    case kInstanceDefTypeQuestMapRegion: {
      delete instance_.instance_def_type_quest_map_region_;
      break;
    }
    case kInstanceDefTypeQuest: {
      delete instance_.instance_def_type_quest_;
      break;
    }
    case kInstanceDefTypeQuestObjective: {
      delete instance_.instance_def_type_quest_objective_;
      break;
    }
    case kInstanceDefTypePaintkitVariables: {
      delete instance_.instance_def_type_paintkit_variables_;
      break;
    }
    case kInstanceDefTypePaintkitOperation: {
      delete instance_.instance_def_type_paintkit_operation_;
      break;
    }
    case kInstanceDefTypePaintkitItemDefinition: {
      delete instance_.instance_def_type_paintkit_item_definition_;
      break;
    }
    case kInstanceDefTypePaintkitDefinition: {
      delete instance_.instance_def_type_paintkit_definition_;
      break;
    }
    case kInstanceDefTypeHeaderOnly: {
      delete instance_.instance_def_type_header_only_;
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INSTANCE_NOT_SET;
}


void CMsgProtoDefID::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgProtoDefID*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(defindex_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_instance();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgProtoDefID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgProtoDefID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 defindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defindex_)));
          set_has_defindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .ProtoDefTypes type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoDefTypes_IsValid(value)) {
            set_type(static_cast< ::ProtoDefTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instance_def_type_quest_map_node;
        break;
      }

      // optional .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
      case 3: {
        if (tag == 26) {
         parse_instance_def_type_quest_map_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_quest_map_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_instance_def_type_quest_theme;
        break;
      }

      // optional .CMsgQuestTheme instance_def_type_quest_theme = 5;
      case 5: {
        if (tag == 42) {
         parse_instance_def_type_quest_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_quest_theme()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_instance_def_type_quest_map_region;
        break;
      }

      // optional .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
      case 6: {
        if (tag == 50) {
         parse_instance_def_type_quest_map_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_quest_map_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_instance_def_type_quest;
        break;
      }

      // optional .CMsgQuestDef instance_def_type_quest = 7;
      case 7: {
        if (tag == 58) {
         parse_instance_def_type_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_instance_def_type_quest_objective;
        break;
      }

      // optional .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
      case 8: {
        if (tag == 66) {
         parse_instance_def_type_quest_objective:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_quest_objective()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_instance_def_type_paintkit_variables;
        break;
      }

      // optional .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
      case 9: {
        if (tag == 74) {
         parse_instance_def_type_paintkit_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_paintkit_variables()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_instance_def_type_paintkit_operation;
        break;
      }

      // optional .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
      case 10: {
        if (tag == 82) {
         parse_instance_def_type_paintkit_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_paintkit_operation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_instance_def_type_paintkit_item_definition;
        break;
      }

      // optional .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
      case 11: {
        if (tag == 90) {
         parse_instance_def_type_paintkit_item_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_paintkit_item_definition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_instance_def_type_paintkit_definition;
        break;
      }

      // optional .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
      case 12: {
        if (tag == 98) {
         parse_instance_def_type_paintkit_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_paintkit_definition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_instance_def_type_header_only;
        break;
      }

      // optional .CMsgHeaderOnly instance_def_type_header_only = 13;
      case 13: {
        if (tag == 106) {
         parse_instance_def_type_header_only:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_def_type_header_only()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgProtoDefID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgProtoDefID)
  return false;
#undef DO_
}

void CMsgProtoDefID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgProtoDefID)
  // optional uint32 defindex = 1;
  if (has_defindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->defindex(), output);
  }

  // optional .ProtoDefTypes type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
  if (has_instance_def_type_quest_map_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->instance_def_type_quest_map_node(), output);
  }

  // optional .CMsgQuestTheme instance_def_type_quest_theme = 5;
  if (has_instance_def_type_quest_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->instance_def_type_quest_theme(), output);
  }

  // optional .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
  if (has_instance_def_type_quest_map_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->instance_def_type_quest_map_region(), output);
  }

  // optional .CMsgQuestDef instance_def_type_quest = 7;
  if (has_instance_def_type_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->instance_def_type_quest(), output);
  }

  // optional .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
  if (has_instance_def_type_quest_objective()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->instance_def_type_quest_objective(), output);
  }

  // optional .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
  if (has_instance_def_type_paintkit_variables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->instance_def_type_paintkit_variables(), output);
  }

  // optional .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
  if (has_instance_def_type_paintkit_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->instance_def_type_paintkit_operation(), output);
  }

  // optional .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
  if (has_instance_def_type_paintkit_item_definition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->instance_def_type_paintkit_item_definition(), output);
  }

  // optional .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
  if (has_instance_def_type_paintkit_definition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->instance_def_type_paintkit_definition(), output);
  }

  // optional .CMsgHeaderOnly instance_def_type_header_only = 13;
  if (has_instance_def_type_header_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->instance_def_type_header_only(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgProtoDefID)
}

::google::protobuf::uint8* CMsgProtoDefID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoDefID)
  // optional uint32 defindex = 1;
  if (has_defindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->defindex(), target);
  }

  // optional .ProtoDefTypes type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
  if (has_instance_def_type_quest_map_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->instance_def_type_quest_map_node(), target);
  }

  // optional .CMsgQuestTheme instance_def_type_quest_theme = 5;
  if (has_instance_def_type_quest_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->instance_def_type_quest_theme(), target);
  }

  // optional .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
  if (has_instance_def_type_quest_map_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->instance_def_type_quest_map_region(), target);
  }

  // optional .CMsgQuestDef instance_def_type_quest = 7;
  if (has_instance_def_type_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->instance_def_type_quest(), target);
  }

  // optional .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
  if (has_instance_def_type_quest_objective()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->instance_def_type_quest_objective(), target);
  }

  // optional .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
  if (has_instance_def_type_paintkit_variables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->instance_def_type_paintkit_variables(), target);
  }

  // optional .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
  if (has_instance_def_type_paintkit_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->instance_def_type_paintkit_operation(), target);
  }

  // optional .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
  if (has_instance_def_type_paintkit_item_definition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->instance_def_type_paintkit_item_definition(), target);
  }

  // optional .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
  if (has_instance_def_type_paintkit_definition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->instance_def_type_paintkit_definition(), target);
  }

  // optional .CMsgHeaderOnly instance_def_type_header_only = 13;
  if (has_instance_def_type_header_only()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->instance_def_type_header_only(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoDefID)
  return target;
}

int CMsgProtoDefID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 defindex = 1;
    if (has_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defindex());
    }

    // optional .ProtoDefTypes type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  switch (instance_case()) {
    // optional .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
    case kInstanceDefTypeQuestMapNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_quest_map_node());
      break;
    }
    // optional .CMsgQuestTheme instance_def_type_quest_theme = 5;
    case kInstanceDefTypeQuestTheme: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_quest_theme());
      break;
    }
    // optional .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
    case kInstanceDefTypeQuestMapRegion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_quest_map_region());
      break;
    }
    // optional .CMsgQuestDef instance_def_type_quest = 7;
    case kInstanceDefTypeQuest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_quest());
      break;
    }
    // optional .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
    case kInstanceDefTypeQuestObjective: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_quest_objective());
      break;
    }
    // optional .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
    case kInstanceDefTypePaintkitVariables: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_paintkit_variables());
      break;
    }
    // optional .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
    case kInstanceDefTypePaintkitOperation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_paintkit_operation());
      break;
    }
    // optional .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
    case kInstanceDefTypePaintkitItemDefinition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_paintkit_item_definition());
      break;
    }
    // optional .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
    case kInstanceDefTypePaintkitDefinition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_paintkit_definition());
      break;
    }
    // optional .CMsgHeaderOnly instance_def_type_header_only = 13;
    case kInstanceDefTypeHeaderOnly: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_def_type_header_only());
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtoDefID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgProtoDefID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgProtoDefID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgProtoDefID::MergeFrom(const CMsgProtoDefID& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.instance_case()) {
    case kInstanceDefTypeQuestMapNode: {
      mutable_instance_def_type_quest_map_node()->::CMsgQuestMapNodeDef::MergeFrom(from.instance_def_type_quest_map_node());
      break;
    }
    case kInstanceDefTypeQuestTheme: {
      mutable_instance_def_type_quest_theme()->::CMsgQuestTheme::MergeFrom(from.instance_def_type_quest_theme());
      break;
    }
    case kInstanceDefTypeQuestMapRegion: {
      mutable_instance_def_type_quest_map_region()->::CMsgQuestMapRegionDef::MergeFrom(from.instance_def_type_quest_map_region());
      break;
    }
    case kInstanceDefTypeQuest: {
      mutable_instance_def_type_quest()->::CMsgQuestDef::MergeFrom(from.instance_def_type_quest());
      break;
    }
    case kInstanceDefTypeQuestObjective: {
      mutable_instance_def_type_quest_objective()->::CMsgQuestObjectiveDef::MergeFrom(from.instance_def_type_quest_objective());
      break;
    }
    case kInstanceDefTypePaintkitVariables: {
      mutable_instance_def_type_paintkit_variables()->::CMsgPaintKit_Variables::MergeFrom(from.instance_def_type_paintkit_variables());
      break;
    }
    case kInstanceDefTypePaintkitOperation: {
      mutable_instance_def_type_paintkit_operation()->::CMsgPaintKit_Operation::MergeFrom(from.instance_def_type_paintkit_operation());
      break;
    }
    case kInstanceDefTypePaintkitItemDefinition: {
      mutable_instance_def_type_paintkit_item_definition()->::CMsgPaintKit_ItemDefinition::MergeFrom(from.instance_def_type_paintkit_item_definition());
      break;
    }
    case kInstanceDefTypePaintkitDefinition: {
      mutable_instance_def_type_paintkit_definition()->::CMsgPaintKit_Definition::MergeFrom(from.instance_def_type_paintkit_definition());
      break;
    }
    case kInstanceDefTypeHeaderOnly: {
      mutable_instance_def_type_header_only()->::CMsgHeaderOnly::MergeFrom(from.instance_def_type_header_only());
      break;
    }
    case INSTANCE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defindex()) {
      set_defindex(from.defindex());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgProtoDefID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoDefID::CopyFrom(const CMsgProtoDefID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoDefID::IsInitialized() const {

  if (has_instance_def_type_quest_map_node()) {
    if (!this->instance_def_type_quest_map_node().IsInitialized()) return false;
  }
  if (has_instance_def_type_quest_theme()) {
    if (!this->instance_def_type_quest_theme().IsInitialized()) return false;
  }
  if (has_instance_def_type_quest_map_region()) {
    if (!this->instance_def_type_quest_map_region().IsInitialized()) return false;
  }
  if (has_instance_def_type_quest()) {
    if (!this->instance_def_type_quest().IsInitialized()) return false;
  }
  if (has_instance_def_type_quest_objective()) {
    if (!this->instance_def_type_quest_objective().IsInitialized()) return false;
  }
  if (has_instance_def_type_paintkit_variables()) {
    if (!this->instance_def_type_paintkit_variables().IsInitialized()) return false;
  }
  if (has_instance_def_type_paintkit_operation()) {
    if (!this->instance_def_type_paintkit_operation().IsInitialized()) return false;
  }
  if (has_instance_def_type_paintkit_item_definition()) {
    if (!this->instance_def_type_paintkit_item_definition().IsInitialized()) return false;
  }
  if (has_instance_def_type_paintkit_definition()) {
    if (!this->instance_def_type_paintkit_definition().IsInitialized()) return false;
  }
  if (has_instance_def_type_header_only()) {
    if (!this->instance_def_type_header_only().IsInitialized()) return false;
  }
  return true;
}

void CMsgProtoDefID::Swap(CMsgProtoDefID* other) {
  if (other != this) {
    std::swap(defindex_, other->defindex_);
    std::swap(type_, other->type_);
    std::swap(instance_, other->instance_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgProtoDefID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgProtoDefID_descriptor_;
  metadata.reflection = CMsgProtoDefID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgQuestObjectiveDef_ETF2GameModes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestObjectiveDef_ETF2GameModes_descriptor_;
}
bool CMsgQuestObjectiveDef_ETF2GameModes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Escort;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_CTF;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_AttackDefense;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Koth;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_CP;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_EscortRace;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_EventMix;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_SD;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Quickplay;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Event247;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Arena;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_RobotDestruction;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Powerup;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Featured;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Passtime;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Community_Update;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Misc;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Competitive_6v6;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Other;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::kGameCategory_Halloween;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::ETF2GameModes_MIN;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::ETF2GameModes_MAX;
const int CMsgQuestObjectiveDef::ETF2GameModes_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Conditions_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestObjectiveDef_ETF2Conditions_descriptor_;
}
bool CMsgQuestObjectiveDef_ETF2Conditions_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_AIMING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_ZOOMED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DISGUISING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DISGUISED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TELEPORTED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TAUNTING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE_WEARINGOFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED_BLINK;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SELECTED_TO_TELEPORT;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TMPDAMAGEBONUS;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_FEIGN_DEATH;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PHASE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STUNNED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_OFFENSEBUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SHIELD_CHARGE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DEMO_BUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_ENERGY_BUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RADIUSHEAL;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HEALTH_BUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BURNING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HEALTH_OVERHEALED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_URINE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BLEEDING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DEFENSEBUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MAD_MILK;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEGAHEAL;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_REGENONDAMAGEBUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MARKEDFORDEATH;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_NOHEALINGDAMAGEBUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SPEED_BOOST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_PUMPKIN;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_USER_BUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_DEMO_CHARGE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SODAPOPPER_HYPE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_FIRST_BLOOD;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_BONUS_TIME;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_CTF_CAPTURE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_ON_KILL;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CANNOT_SWITCH_FROM_MELEE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_REPROGRAMMED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_RAGE_BUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DEFENSEBUFF_HIGH;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SNIPERCHARGE_RAGE_BUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DISGUISE_WEARINGOFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MARKEDFORDEATH_SILENT;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DISGUISED_AS_DISPENSER;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SAPPED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE_USER_BUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_BOMB_HEAD;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_THRILLER;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RADIUSHEAL_ON_DAMAGE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_CARD_EFFECT;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_INVULNERABLE_CARD_EFFECT;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_UBER_BULLET_RESIST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_UBER_BLAST_RESIST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_UBER_FIRE_RESIST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_SMALL_BULLET_RESIST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_SMALL_BLAST_RESIST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_SMALL_FIRE_RESIST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED_USER_BUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MEDIGUN_DEBUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED_USER_BUFF_FADING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BULLET_IMMUNE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BLAST_IMMUNE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_FIRE_IMMUNE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PREVENT_DEATH;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MVM_BOT_STUN_RADIOWAVE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_SPEED_BOOST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_QUICK_HEAL;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_GIANT;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_TINY;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_IN_HELL;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_GHOST_MODE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MINICRITBOOSTED_ON_KILL;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_OBSCURED_SMOKE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PARACHUTE_ACTIVE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BLASTJUMPING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_KART;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_KART_DASH;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_BALLOON_HEAD;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_MELEE_ONLY;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SWIMMING_CURSE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_FREEZE_INPUT;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HALLOWEEN_KART_CAGE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_DONOTUSE_0;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_STRENGTH;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_HASTE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_REGEN;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_RESIST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_VAMPIRE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_REFLECT;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_PRECISION;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_AGILITY;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GRAPPLINGHOOK;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GRAPPLINGHOOK_SAFEFALL;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GRAPPLINGHOOK_LATCHED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GRAPPLINGHOOK_BLEEDING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_AFTERBURN_IMMUNE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_KNOCKOUT;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_IMBALANCE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CRITBOOSTED_RUNE_TEMP;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PASSTIME_INTERCEPTION;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SWIMMING_NO_EFFECTS;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PURGATORY;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_KING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_PLAGUE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_RUNE_SUPERNOVA;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PLAGUE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_KING_BUFFED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TEAM_GLOWS;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_KNOCKED_INTO_AIR;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_COMPETITIVE_WINNER;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_COMPETITIVE_LOSER;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_HEALING_DEBUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PASSTIME_PENALTY_DEBUFF;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_PARACHUTE_DEPLOYED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_NO_COMBAT_SPEED_BOOST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TRANQ_SPY_BOOST;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_TRANQ_MARKED;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_ROCKETPACK;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_ROCKETPACK_PASSENGER;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_STEALTHED_PHASE;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_CLIP_OVERLOAD;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_SPY_CLASS_STEAL;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::TF_COND_GAS;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::ETF2Conditions_MIN;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::ETF2Conditions_MAX;
const int CMsgQuestObjectiveDef::ETF2Conditions_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Team_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestObjectiveDef_ETF2Team_descriptor_;
}
bool CMsgQuestObjectiveDef_ETF2Team_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::TF_TEAM_RED;
const CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::TF_TEAM_BLUE;
const CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::ETF2Team_MIN;
const CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::ETF2Team_MAX;
const int CMsgQuestObjectiveDef::ETF2Team_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgQuestObjectiveDef::kHeaderFieldNumber;
const int CMsgQuestObjectiveDef::kLocDesctokenFieldNumber;
const int CMsgQuestObjectiveDef::kPointsFieldNumber;
const int CMsgQuestObjectiveDef::kConditionsDefindexFieldNumber;
const int CMsgQuestObjectiveDef::kMapFieldNumber;
const int CMsgQuestObjectiveDef::kGameModeFieldNumber;
const int CMsgQuestObjectiveDef::kTeamFieldNumber;
const int CMsgQuestObjectiveDef::kConditionVarsFieldNumber;
const int CMsgQuestObjectiveDef::kClassesVarsFieldNumber;
const int CMsgQuestObjectiveDef::kConditionsFieldNumber;
const int CMsgQuestObjectiveDef::kConditionLogicFieldNumber;
const int CMsgQuestObjectiveDef::kItemNameFieldNumber;
const int CMsgQuestObjectiveDef::kItemLogicFieldNumber;
const int CMsgQuestObjectiveDef::kJumpStateFieldNumber;
#endif  // !_MSC_VER

CMsgQuestObjectiveDef::CMsgQuestObjectiveDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestObjectiveDef)
}

void CMsgQuestObjectiveDef::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
}

CMsgQuestObjectiveDef::CMsgQuestObjectiveDef(const CMsgQuestObjectiveDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestObjectiveDef)
}

void CMsgQuestObjectiveDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  loc_desctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  points_ = 0u;
  conditions_defindex_ = 0u;
  team_ = 2;
  condition_logic_ = 0;
  item_logic_ = 0;
  jump_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestObjectiveDef::~CMsgQuestObjectiveDef() {
  // @@protoc_insertion_point(destructor:CMsgQuestObjectiveDef)
  SharedDtor();
}

void CMsgQuestObjectiveDef::SharedDtor() {
  if (loc_desctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loc_desctoken_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void CMsgQuestObjectiveDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestObjectiveDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestObjectiveDef_descriptor_;
}

const CMsgQuestObjectiveDef& CMsgQuestObjectiveDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestObjectiveDef* CMsgQuestObjectiveDef::default_instance_ = NULL;

CMsgQuestObjectiveDef* CMsgQuestObjectiveDef::New() const {
  return new CMsgQuestObjectiveDef;
}

void CMsgQuestObjectiveDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQuestObjectiveDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 79) {
    ZR_(points_, conditions_defindex_);
    if (has_header()) {
      if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
    }
    if (has_loc_desctoken()) {
      if (loc_desctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loc_desctoken_->clear();
      }
    }
    team_ = 2;
  }
  if (_has_bits_[8 / 32] & 13312) {
    ZR_(item_logic_, jump_state_);
    condition_logic_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  map_.Clear();
  game_mode_.Clear();
  condition_vars_.Clear();
  classes_vars_.Clear();
  conditions_.Clear();
  item_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestObjectiveDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestObjectiveDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loc_desctoken;
        break;
      }

      // optional string loc_desctoken = 2;
      case 2: {
        if (tag == 18) {
         parse_loc_desctoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loc_desctoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loc_desctoken().data(), this->loc_desctoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loc_desctoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_points;
        break;
      }

      // optional uint32 points = 3;
      case 3: {
        if (tag == 24) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_conditions_defindex;
        break;
      }

      // optional uint32 conditions_defindex = 5;
      case 5: {
        if (tag == 40) {
         parse_conditions_defindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conditions_defindex_)));
          set_has_conditions_defindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_map;
        break;
      }

      // repeated string map = 8;
      case 8: {
        if (tag == 66) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map(this->map_size() - 1).data(),
            this->map(this->map_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_map;
        if (input->ExpectTag(72)) goto parse_game_mode;
        break;
      }

      // repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9;
      case 9: {
        if (tag == 72) {
         parse_game_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgQuestObjectiveDef_ETF2GameModes_IsValid(value)) {
            add_game_mode(static_cast< ::CMsgQuestObjectiveDef_ETF2GameModes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::CMsgQuestObjectiveDef_ETF2GameModes_IsValid,
                 this->mutable_game_mode())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_game_mode;
        if (input->ExpectTag(80)) goto parse_team;
        break;
      }

      // optional .CMsgQuestObjectiveDef.ETF2Team team = 10;
      case 10: {
        if (tag == 80) {
         parse_team:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgQuestObjectiveDef_ETF2Team_IsValid(value)) {
            set_team(static_cast< ::CMsgQuestObjectiveDef_ETF2Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_condition_vars;
        break;
      }

      // repeated .CMsgVarField condition_vars = 11;
      case 11: {
        if (tag == 90) {
         parse_condition_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_condition_vars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_condition_vars;
        if (input->ExpectTag(98)) goto parse_classes_vars;
        break;
      }

      // repeated .CMsgVarField classes_vars = 12;
      case 12: {
        if (tag == 98) {
         parse_classes_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classes_vars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_classes_vars;
        if (input->ExpectTag(104)) goto parse_conditions;
        break;
      }

      // repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13;
      case 13: {
        if (tag == 104) {
         parse_conditions:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgQuestObjectiveDef_ETF2Conditions_IsValid(value)) {
            add_conditions(static_cast< ::CMsgQuestObjectiveDef_ETF2Conditions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::CMsgQuestObjectiveDef_ETF2Conditions_IsValid,
                 this->mutable_conditions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_conditions;
        if (input->ExpectTag(112)) goto parse_condition_logic;
        break;
      }

      // optional .LogicalOperation condition_logic = 14;
      case 14: {
        if (tag == 112) {
         parse_condition_logic:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogicalOperation_IsValid(value)) {
            set_condition_logic(static_cast< ::LogicalOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_item_name;
        break;
      }

      // repeated string item_name = 15;
      case 15: {
        if (tag == 122) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_name(this->item_name_size() - 1).data(),
            this->item_name(this->item_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "item_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_item_name;
        if (input->ExpectTag(128)) goto parse_item_logic;
        break;
      }

      // optional .LogicalOperation item_logic = 16;
      case 16: {
        if (tag == 128) {
         parse_item_logic:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogicalOperation_IsValid(value)) {
            set_item_logic(static_cast< ::LogicalOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_jump_state;
        break;
      }

      // optional uint32 jump_state = 17;
      case 17: {
        if (tag == 136) {
         parse_jump_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jump_state_)));
          set_has_jump_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestObjectiveDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestObjectiveDef)
  return false;
#undef DO_
}

void CMsgQuestObjectiveDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestObjectiveDef)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string loc_desctoken = 2;
  if (has_loc_desctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loc_desctoken().data(), this->loc_desctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loc_desctoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->loc_desctoken(), output);
  }

  // optional uint32 points = 3;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->points(), output);
  }

  // optional uint32 conditions_defindex = 5;
  if (has_conditions_defindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->conditions_defindex(), output);
  }

  // repeated string map = 8;
  for (int i = 0; i < this->map_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->map(i).data(), this->map(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "map");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->map(i), output);
  }

  // repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9;
  for (int i = 0; i < this->game_mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->game_mode(i), output);
  }

  // optional .CMsgQuestObjectiveDef.ETF2Team team = 10;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->team(), output);
  }

  // repeated .CMsgVarField condition_vars = 11;
  for (int i = 0; i < this->condition_vars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->condition_vars(i), output);
  }

  // repeated .CMsgVarField classes_vars = 12;
  for (int i = 0; i < this->classes_vars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->classes_vars(i), output);
  }

  // repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13;
  for (int i = 0; i < this->conditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->conditions(i), output);
  }

  // optional .LogicalOperation condition_logic = 14;
  if (has_condition_logic()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->condition_logic(), output);
  }

  // repeated string item_name = 15;
  for (int i = 0; i < this->item_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->item_name(i).data(), this->item_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "item_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->item_name(i), output);
  }

  // optional .LogicalOperation item_logic = 16;
  if (has_item_logic()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->item_logic(), output);
  }

  // optional uint32 jump_state = 17;
  if (has_jump_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->jump_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestObjectiveDef)
}

::google::protobuf::uint8* CMsgQuestObjectiveDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestObjectiveDef)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string loc_desctoken = 2;
  if (has_loc_desctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loc_desctoken().data(), this->loc_desctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loc_desctoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->loc_desctoken(), target);
  }

  // optional uint32 points = 3;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->points(), target);
  }

  // optional uint32 conditions_defindex = 5;
  if (has_conditions_defindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->conditions_defindex(), target);
  }

  // repeated string map = 8;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map(i).data(), this->map(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->map(i), target);
  }

  // repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9;
  for (int i = 0; i < this->game_mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->game_mode(i), target);
  }

  // optional .CMsgQuestObjectiveDef.ETF2Team team = 10;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->team(), target);
  }

  // repeated .CMsgVarField condition_vars = 11;
  for (int i = 0; i < this->condition_vars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->condition_vars(i), target);
  }

  // repeated .CMsgVarField classes_vars = 12;
  for (int i = 0; i < this->classes_vars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->classes_vars(i), target);
  }

  // repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13;
  for (int i = 0; i < this->conditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->conditions(i), target);
  }

  // optional .LogicalOperation condition_logic = 14;
  if (has_condition_logic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->condition_logic(), target);
  }

  // repeated string item_name = 15;
  for (int i = 0; i < this->item_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name(i).data(), this->item_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->item_name(i), target);
  }

  // optional .LogicalOperation item_logic = 16;
  if (has_item_logic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->item_logic(), target);
  }

  // optional uint32 jump_state = 17;
  if (has_jump_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->jump_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestObjectiveDef)
  return target;
}

int CMsgQuestObjectiveDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string loc_desctoken = 2;
    if (has_loc_desctoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loc_desctoken());
    }

    // optional uint32 points = 3;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points());
    }

    // optional uint32 conditions_defindex = 5;
    if (has_conditions_defindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conditions_defindex());
    }

    // optional .CMsgQuestObjectiveDef.ETF2Team team = 10;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .LogicalOperation condition_logic = 14;
    if (has_condition_logic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->condition_logic());
    }

    // optional .LogicalOperation item_logic = 16;
    if (has_item_logic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->item_logic());
    }

    // optional uint32 jump_state = 17;
    if (has_jump_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jump_state());
    }

  }
  // repeated string map = 8;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->map(i));
  }

  // repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->game_mode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->game_mode(i));
    }
    total_size += 1 * this->game_mode_size() + data_size;
  }

  // repeated .CMsgVarField condition_vars = 11;
  total_size += 1 * this->condition_vars_size();
  for (int i = 0; i < this->condition_vars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->condition_vars(i));
  }

  // repeated .CMsgVarField classes_vars = 12;
  total_size += 1 * this->classes_vars_size();
  for (int i = 0; i < this->classes_vars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classes_vars(i));
  }

  // repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->conditions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->conditions(i));
    }
    total_size += 1 * this->conditions_size() + data_size;
  }

  // repeated string item_name = 15;
  total_size += 1 * this->item_name_size();
  for (int i = 0; i < this->item_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestObjectiveDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestObjectiveDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestObjectiveDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestObjectiveDef::MergeFrom(const CMsgQuestObjectiveDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_.MergeFrom(from.map_);
  game_mode_.MergeFrom(from.game_mode_);
  condition_vars_.MergeFrom(from.condition_vars_);
  classes_vars_.MergeFrom(from.classes_vars_);
  conditions_.MergeFrom(from.conditions_);
  item_name_.MergeFrom(from.item_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
    if (from.has_loc_desctoken()) {
      set_loc_desctoken(from.loc_desctoken());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_conditions_defindex()) {
      set_conditions_defindex(from.conditions_defindex());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_condition_logic()) {
      set_condition_logic(from.condition_logic());
    }
    if (from.has_item_logic()) {
      set_item_logic(from.item_logic());
    }
    if (from.has_jump_state()) {
      set_jump_state(from.jump_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestObjectiveDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestObjectiveDef::CopyFrom(const CMsgQuestObjectiveDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestObjectiveDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestObjectiveDef::Swap(CMsgQuestObjectiveDef* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(loc_desctoken_, other->loc_desctoken_);
    std::swap(points_, other->points_);
    std::swap(conditions_defindex_, other->conditions_defindex_);
    map_.Swap(&other->map_);
    game_mode_.Swap(&other->game_mode_);
    std::swap(team_, other->team_);
    condition_vars_.Swap(&other->condition_vars_);
    classes_vars_.Swap(&other->classes_vars_);
    conditions_.Swap(&other->conditions_);
    std::swap(condition_logic_, other->condition_logic_);
    item_name_.Swap(&other->item_name_);
    std::swap(item_logic_, other->item_logic_);
    std::swap(jump_state_, other->jump_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestObjectiveDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestObjectiveDef_descriptor_;
  metadata.reflection = CMsgQuestObjectiveDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestDef_MMCriteria::kGroupNameFieldNumber;
const int CMsgQuestDef_MMCriteria::kCategoryNameFieldNumber;
const int CMsgQuestDef_MMCriteria::kMapNameFieldNumber;
#endif  // !_MSC_VER

CMsgQuestDef_MMCriteria::CMsgQuestDef_MMCriteria()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestDef.MMCriteria)
}

void CMsgQuestDef_MMCriteria::InitAsDefaultInstance() {
}

CMsgQuestDef_MMCriteria::CMsgQuestDef_MMCriteria(const CMsgQuestDef_MMCriteria& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestDef.MMCriteria)
}

void CMsgQuestDef_MMCriteria::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestDef_MMCriteria::~CMsgQuestDef_MMCriteria() {
  // @@protoc_insertion_point(destructor:CMsgQuestDef.MMCriteria)
  SharedDtor();
}

void CMsgQuestDef_MMCriteria::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete category_name_;
  }
  if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgQuestDef_MMCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestDef_MMCriteria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestDef_MMCriteria_descriptor_;
}

const CMsgQuestDef_MMCriteria& CMsgQuestDef_MMCriteria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestDef_MMCriteria* CMsgQuestDef_MMCriteria::default_instance_ = NULL;

CMsgQuestDef_MMCriteria* CMsgQuestDef_MMCriteria::New() const {
  return new CMsgQuestDef_MMCriteria;
}

void CMsgQuestDef_MMCriteria::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    if (has_category_name()) {
      if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        category_name_->clear();
      }
    }
    if (has_map_name()) {
      if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestDef_MMCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestDef.MMCriteria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_category_name;
        break;
      }

      // optional string category_name = 2;
      case 2: {
        if (tag == 18) {
         parse_category_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category_name().data(), this->category_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "category_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_map_name;
        break;
      }

      // optional string map_name = 3;
      case 3: {
        if (tag == 26) {
         parse_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestDef.MMCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestDef.MMCriteria)
  return false;
#undef DO_
}

void CMsgQuestDef_MMCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestDef.MMCriteria)
  // optional string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_name(), output);
  }

  // optional string category_name = 2;
  if (has_category_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category_name().data(), this->category_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "category_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category_name(), output);
  }

  // optional string map_name = 3;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestDef.MMCriteria)
}

::google::protobuf::uint8* CMsgQuestDef_MMCriteria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestDef.MMCriteria)
  // optional string group_name = 1;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_name(), target);
  }

  // optional string category_name = 2;
  if (has_category_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category_name().data(), this->category_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "category_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category_name(), target);
  }

  // optional string map_name = 3;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestDef.MMCriteria)
  return target;
}

int CMsgQuestDef_MMCriteria::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string group_name = 1;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional string category_name = 2;
    if (has_category_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category_name());
    }

    // optional string map_name = 3;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestDef_MMCriteria::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestDef_MMCriteria* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestDef_MMCriteria*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestDef_MMCriteria::MergeFrom(const CMsgQuestDef_MMCriteria& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_category_name()) {
      set_category_name(from.category_name());
    }
    if (from.has_map_name()) {
      set_map_name(from.map_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestDef_MMCriteria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestDef_MMCriteria::CopyFrom(const CMsgQuestDef_MMCriteria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestDef_MMCriteria::IsInitialized() const {

  return true;
}

void CMsgQuestDef_MMCriteria::Swap(CMsgQuestDef_MMCriteria* other) {
  if (other != this) {
    std::swap(group_name_, other->group_name_);
    std::swap(category_name_, other->category_name_);
    std::swap(map_name_, other->map_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestDef_MMCriteria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestDef_MMCriteria_descriptor_;
  metadata.reflection = CMsgQuestDef_MMCriteria_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgQuestDef_ObjectiveInstance::kObjectiveFieldNumber;
const int CMsgQuestDef_ObjectiveInstance::kPointTypeFieldNumber;
const int CMsgQuestDef_ObjectiveInstance::kPointValueFieldNumber;
#endif  // !_MSC_VER

CMsgQuestDef_ObjectiveInstance::CMsgQuestDef_ObjectiveInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestDef.ObjectiveInstance)
}

void CMsgQuestDef_ObjectiveInstance::InitAsDefaultInstance() {
  objective_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
}

CMsgQuestDef_ObjectiveInstance::CMsgQuestDef_ObjectiveInstance(const CMsgQuestDef_ObjectiveInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestDef.ObjectiveInstance)
}

void CMsgQuestDef_ObjectiveInstance::SharedCtor() {
  _cached_size_ = 0;
  objective_ = NULL;
  point_type_ = 0;
  point_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestDef_ObjectiveInstance::~CMsgQuestDef_ObjectiveInstance() {
  // @@protoc_insertion_point(destructor:CMsgQuestDef.ObjectiveInstance)
  SharedDtor();
}

void CMsgQuestDef_ObjectiveInstance::SharedDtor() {
  if (this != default_instance_) {
    delete objective_;
  }
}

void CMsgQuestDef_ObjectiveInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestDef_ObjectiveInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestDef_ObjectiveInstance_descriptor_;
}

const CMsgQuestDef_ObjectiveInstance& CMsgQuestDef_ObjectiveInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestDef_ObjectiveInstance* CMsgQuestDef_ObjectiveInstance::default_instance_ = NULL;

CMsgQuestDef_ObjectiveInstance* CMsgQuestDef_ObjectiveInstance::New() const {
  return new CMsgQuestDef_ObjectiveInstance;
}

void CMsgQuestDef_ObjectiveInstance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQuestDef_ObjectiveInstance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(point_type_, point_value_);
    if (has_objective()) {
      if (objective_ != NULL) objective_->::CMsgProtoDefID::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestDef_ObjectiveInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestDef.ObjectiveInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgProtoDefID objective = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objective()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point_type;
        break;
      }

      // optional .EQuestPoints point_type = 2;
      case 2: {
        if (tag == 16) {
         parse_point_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EQuestPoints_IsValid(value)) {
            set_point_type(static_cast< ::EQuestPoints >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point_value;
        break;
      }

      // optional uint32 point_value = 3;
      case 3: {
        if (tag == 24) {
         parse_point_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_value_)));
          set_has_point_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestDef.ObjectiveInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestDef.ObjectiveInstance)
  return false;
#undef DO_
}

void CMsgQuestDef_ObjectiveInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestDef.ObjectiveInstance)
  // optional .CMsgProtoDefID objective = 1;
  if (has_objective()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objective(), output);
  }

  // optional .EQuestPoints point_type = 2;
  if (has_point_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->point_type(), output);
  }

  // optional uint32 point_value = 3;
  if (has_point_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->point_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestDef.ObjectiveInstance)
}

::google::protobuf::uint8* CMsgQuestDef_ObjectiveInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestDef.ObjectiveInstance)
  // optional .CMsgProtoDefID objective = 1;
  if (has_objective()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objective(), target);
  }

  // optional .EQuestPoints point_type = 2;
  if (has_point_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->point_type(), target);
  }

  // optional uint32 point_value = 3;
  if (has_point_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->point_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestDef.ObjectiveInstance)
  return target;
}

int CMsgQuestDef_ObjectiveInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgProtoDefID objective = 1;
    if (has_objective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objective());
    }

    // optional .EQuestPoints point_type = 2;
    if (has_point_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->point_type());
    }

    // optional uint32 point_value = 3;
    if (has_point_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestDef_ObjectiveInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestDef_ObjectiveInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestDef_ObjectiveInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestDef_ObjectiveInstance::MergeFrom(const CMsgQuestDef_ObjectiveInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objective()) {
      mutable_objective()->::CMsgProtoDefID::MergeFrom(from.objective());
    }
    if (from.has_point_type()) {
      set_point_type(from.point_type());
    }
    if (from.has_point_value()) {
      set_point_value(from.point_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestDef_ObjectiveInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestDef_ObjectiveInstance::CopyFrom(const CMsgQuestDef_ObjectiveInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestDef_ObjectiveInstance::IsInitialized() const {

  if (has_objective()) {
    if (!this->objective().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestDef_ObjectiveInstance::Swap(CMsgQuestDef_ObjectiveInstance* other) {
  if (other != this) {
    std::swap(objective_, other->objective_);
    std::swap(point_type_, other->point_type_);
    std::swap(point_value_, other->point_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestDef_ObjectiveInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestDef_ObjectiveInstance_descriptor_;
  metadata.reflection = CMsgQuestDef_ObjectiveInstance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgQuestDef::kHeaderFieldNumber;
const int CMsgQuestDef::kMaxPoints0FieldNumber;
const int CMsgQuestDef::kMaxPoints1FieldNumber;
const int CMsgQuestDef::kMaxPoints2FieldNumber;
const int CMsgQuestDef::kNameLoctokenFieldNumber;
const int CMsgQuestDef::kOperationFieldNumber;
const int CMsgQuestDef::kMmCriteriaFieldNumber;
const int CMsgQuestDef::kNodeImageFieldNumber;
const int CMsgQuestDef::kIconImageFieldNumber;
const int CMsgQuestDef::kThemeFieldNumber;
const int CMsgQuestDef::kLoanerNamesFieldNumber;
const int CMsgQuestDef::kObjectivesFieldNumber;
const int CMsgQuestDef::kMapFieldNumber;
#endif  // !_MSC_VER

CMsgQuestDef::CMsgQuestDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestDef)
}

void CMsgQuestDef::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
  mm_criteria_ = const_cast< ::CMsgQuestDef_MMCriteria*>(&::CMsgQuestDef_MMCriteria::default_instance());
  theme_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
}

CMsgQuestDef::CMsgQuestDef(const CMsgQuestDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestDef)
}

void CMsgQuestDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  max_points_0_ = 0u;
  max_points_1_ = 0u;
  max_points_2_ = 0u;
  name_loctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mm_criteria_ = NULL;
  node_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  theme_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestDef::~CMsgQuestDef() {
  // @@protoc_insertion_point(destructor:CMsgQuestDef)
  SharedDtor();
}

void CMsgQuestDef::SharedDtor() {
  if (name_loctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_loctoken_;
  }
  if (operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_;
  }
  if (node_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_image_;
  }
  if (icon_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_image_;
  }
  if (this != default_instance_) {
    delete header_;
    delete mm_criteria_;
    delete theme_;
  }
}

void CMsgQuestDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestDef_descriptor_;
}

const CMsgQuestDef& CMsgQuestDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestDef* CMsgQuestDef::default_instance_ = NULL;

CMsgQuestDef* CMsgQuestDef::New() const {
  return new CMsgQuestDef;
}

void CMsgQuestDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQuestDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(max_points_0_, max_points_1_);
    if (has_header()) {
      if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
    }
    max_points_2_ = 0u;
    if (has_name_loctoken()) {
      if (name_loctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_loctoken_->clear();
      }
    }
    if (has_operation()) {
      if (operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operation_->clear();
      }
    }
    if (has_mm_criteria()) {
      if (mm_criteria_ != NULL) mm_criteria_->::CMsgQuestDef_MMCriteria::Clear();
    }
    if (has_node_image()) {
      if (node_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_image_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_icon_image()) {
      if (icon_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_image_->clear();
      }
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::CMsgProtoDefID::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  loaner_names_.Clear();
  objectives_.Clear();
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_points_0;
        break;
      }

      // optional uint32 max_points_0 = 2;
      case 2: {
        if (tag == 16) {
         parse_max_points_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_points_0_)));
          set_has_max_points_0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_points_1;
        break;
      }

      // optional uint32 max_points_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_max_points_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_points_1_)));
          set_has_max_points_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_points_2;
        break;
      }

      // optional uint32 max_points_2 = 4;
      case 4: {
        if (tag == 32) {
         parse_max_points_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_points_2_)));
          set_has_max_points_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name_loctoken;
        break;
      }

      // optional string name_loctoken = 5;
      case 5: {
        if (tag == 42) {
         parse_name_loctoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_loctoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_loctoken().data(), this->name_loctoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name_loctoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_operation;
        break;
      }

      // optional string operation = 7;
      case 7: {
        if (tag == 58) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "operation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mm_criteria;
        break;
      }

      // optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
      case 8: {
        if (tag == 66) {
         parse_mm_criteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mm_criteria()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_node_image;
        break;
      }

      // optional string node_image = 12;
      case 12: {
        if (tag == 98) {
         parse_node_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_image().data(), this->node_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_icon_image;
        break;
      }

      // optional string icon_image = 13;
      case 13: {
        if (tag == 106) {
         parse_icon_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_image().data(), this->icon_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon_image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_theme;
        break;
      }

      // optional .CMsgProtoDefID theme = 14;
      case 14: {
        if (tag == 114) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loaner_names;
        break;
      }

      // repeated string loaner_names = 15;
      case 15: {
        if (tag == 122) {
         parse_loaner_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_loaner_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loaner_names(this->loaner_names_size() - 1).data(),
            this->loaner_names(this->loaner_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loaner_names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loaner_names;
        if (input->ExpectTag(130)) goto parse_objectives;
        break;
      }

      // repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
      case 16: {
        if (tag == 130) {
         parse_objectives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objectives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_objectives;
        if (input->ExpectTag(138)) goto parse_map;
        break;
      }

      // repeated string map = 17;
      case 17: {
        if (tag == 138) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map(this->map_size() - 1).data(),
            this->map(this->map_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_map;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestDef)
  return false;
#undef DO_
}

void CMsgQuestDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestDef)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint32 max_points_0 = 2;
  if (has_max_points_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_points_0(), output);
  }

  // optional uint32 max_points_1 = 3;
  if (has_max_points_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_points_1(), output);
  }

  // optional uint32 max_points_2 = 4;
  if (has_max_points_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_points_2(), output);
  }

  // optional string name_loctoken = 5;
  if (has_name_loctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_loctoken().data(), this->name_loctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_loctoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name_loctoken(), output);
  }

  // optional string operation = 7;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->operation(), output);
  }

  // optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
  if (has_mm_criteria()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mm_criteria(), output);
  }

  // optional string node_image = 12;
  if (has_node_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_image().data(), this->node_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->node_image(), output);
  }

  // optional string icon_image = 13;
  if (has_icon_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_image().data(), this->icon_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->icon_image(), output);
  }

  // optional .CMsgProtoDefID theme = 14;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->theme(), output);
  }

  // repeated string loaner_names = 15;
  for (int i = 0; i < this->loaner_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->loaner_names(i).data(), this->loaner_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "loaner_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->loaner_names(i), output);
  }

  // repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
  for (int i = 0; i < this->objectives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->objectives(i), output);
  }

  // repeated string map = 17;
  for (int i = 0; i < this->map_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->map(i).data(), this->map(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "map");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestDef)
}

::google::protobuf::uint8* CMsgQuestDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestDef)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint32 max_points_0 = 2;
  if (has_max_points_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_points_0(), target);
  }

  // optional uint32 max_points_1 = 3;
  if (has_max_points_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_points_1(), target);
  }

  // optional uint32 max_points_2 = 4;
  if (has_max_points_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_points_2(), target);
  }

  // optional string name_loctoken = 5;
  if (has_name_loctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_loctoken().data(), this->name_loctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_loctoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name_loctoken(), target);
  }

  // optional string operation = 7;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->operation(), target);
  }

  // optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
  if (has_mm_criteria()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mm_criteria(), target);
  }

  // optional string node_image = 12;
  if (has_node_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_image().data(), this->node_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->node_image(), target);
  }

  // optional string icon_image = 13;
  if (has_icon_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_image().data(), this->icon_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->icon_image(), target);
  }

  // optional .CMsgProtoDefID theme = 14;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->theme(), target);
  }

  // repeated string loaner_names = 15;
  for (int i = 0; i < this->loaner_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loaner_names(i).data(), this->loaner_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loaner_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->loaner_names(i), target);
  }

  // repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
  for (int i = 0; i < this->objectives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->objectives(i), target);
  }

  // repeated string map = 17;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map(i).data(), this->map(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestDef)
  return target;
}

int CMsgQuestDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint32 max_points_0 = 2;
    if (has_max_points_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_points_0());
    }

    // optional uint32 max_points_1 = 3;
    if (has_max_points_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_points_1());
    }

    // optional uint32 max_points_2 = 4;
    if (has_max_points_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_points_2());
    }

    // optional string name_loctoken = 5;
    if (has_name_loctoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_loctoken());
    }

    // optional string operation = 7;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation());
    }

    // optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
    if (has_mm_criteria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mm_criteria());
    }

    // optional string node_image = 12;
    if (has_node_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_image());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string icon_image = 13;
    if (has_icon_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_image());
    }

    // optional .CMsgProtoDefID theme = 14;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

  }
  // repeated string loaner_names = 15;
  total_size += 1 * this->loaner_names_size();
  for (int i = 0; i < this->loaner_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->loaner_names(i));
  }

  // repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
  total_size += 2 * this->objectives_size();
  for (int i = 0; i < this->objectives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objectives(i));
  }

  // repeated string map = 17;
  total_size += 2 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestDef::MergeFrom(const CMsgQuestDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  loaner_names_.MergeFrom(from.loaner_names_);
  objectives_.MergeFrom(from.objectives_);
  map_.MergeFrom(from.map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
    if (from.has_max_points_0()) {
      set_max_points_0(from.max_points_0());
    }
    if (from.has_max_points_1()) {
      set_max_points_1(from.max_points_1());
    }
    if (from.has_max_points_2()) {
      set_max_points_2(from.max_points_2());
    }
    if (from.has_name_loctoken()) {
      set_name_loctoken(from.name_loctoken());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_mm_criteria()) {
      mutable_mm_criteria()->::CMsgQuestDef_MMCriteria::MergeFrom(from.mm_criteria());
    }
    if (from.has_node_image()) {
      set_node_image(from.node_image());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_icon_image()) {
      set_icon_image(from.icon_image());
    }
    if (from.has_theme()) {
      mutable_theme()->::CMsgProtoDefID::MergeFrom(from.theme());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestDef::CopyFrom(const CMsgQuestDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->objectives())) return false;
  return true;
}

void CMsgQuestDef::Swap(CMsgQuestDef* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(max_points_0_, other->max_points_0_);
    std::swap(max_points_1_, other->max_points_1_);
    std::swap(max_points_2_, other->max_points_2_);
    std::swap(name_loctoken_, other->name_loctoken_);
    std::swap(operation_, other->operation_);
    std::swap(mm_criteria_, other->mm_criteria_);
    std::swap(node_image_, other->node_image_);
    std::swap(icon_image_, other->icon_image_);
    std::swap(theme_, other->theme_);
    loaner_names_.Swap(&other->loaner_names_);
    objectives_.Swap(&other->objectives_);
    map_.Swap(&other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestDef_descriptor_;
  metadata.reflection = CMsgQuestDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestMapStoreItem::kHeaderFieldNumber;
const int CMsgQuestMapStoreItem::kItemNameFieldNumber;
const int CMsgQuestMapStoreItem::kRewardLootlistNameFieldNumber;
const int CMsgQuestMapStoreItem::kPriceFieldNumber;
const int CMsgQuestMapStoreItem::kPurchaseLimitFieldNumber;
const int CMsgQuestMapStoreItem::kSortGroupFieldNumber;
#endif  // !_MSC_VER

CMsgQuestMapStoreItem::CMsgQuestMapStoreItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestMapStoreItem)
}

void CMsgQuestMapStoreItem::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
  price_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
}

CMsgQuestMapStoreItem::CMsgQuestMapStoreItem(const CMsgQuestMapStoreItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapStoreItem)
}

void CMsgQuestMapStoreItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_lootlist_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = NULL;
  purchase_limit_ = 0u;
  sort_group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestMapStoreItem::~CMsgQuestMapStoreItem() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapStoreItem)
  SharedDtor();
}

void CMsgQuestMapStoreItem::SharedDtor() {
  if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_name_;
  }
  if (reward_lootlist_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_lootlist_name_;
  }
  if (this != default_instance_) {
    delete header_;
    delete price_;
  }
}

void CMsgQuestMapStoreItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestMapStoreItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestMapStoreItem_descriptor_;
}

const CMsgQuestMapStoreItem& CMsgQuestMapStoreItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestMapStoreItem* CMsgQuestMapStoreItem::default_instance_ = NULL;

CMsgQuestMapStoreItem* CMsgQuestMapStoreItem::New() const {
  return new CMsgQuestMapStoreItem;
}

void CMsgQuestMapStoreItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQuestMapStoreItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(purchase_limit_, sort_group_);
    if (has_header()) {
      if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
    }
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_name_->clear();
      }
    }
    if (has_reward_lootlist_name()) {
      if (reward_lootlist_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_lootlist_name_->clear();
      }
    }
    if (has_price()) {
      if (price_ != NULL) price_->::CMsgVarField::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestMapStoreItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestMapStoreItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_name;
        break;
      }

      // optional string item_name = 2;
      case 2: {
        if (tag == 18) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "item_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_price;
        break;
      }

      // optional .CMsgVarField price = 3;
      case 3: {
        if (tag == 26) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_purchase_limit;
        break;
      }

      // optional uint32 purchase_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_purchase_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchase_limit_)));
          set_has_purchase_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sort_group;
        break;
      }

      // optional uint32 sort_group = 5;
      case 5: {
        if (tag == 40) {
         parse_sort_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_group_)));
          set_has_sort_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reward_lootlist_name;
        break;
      }

      // optional string reward_lootlist_name = 6;
      case 6: {
        if (tag == 50) {
         parse_reward_lootlist_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward_lootlist_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward_lootlist_name().data(), this->reward_lootlist_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward_lootlist_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestMapStoreItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestMapStoreItem)
  return false;
#undef DO_
}

void CMsgQuestMapStoreItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestMapStoreItem)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_name(), output);
  }

  // optional .CMsgVarField price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->price(), output);
  }

  // optional uint32 purchase_limit = 4;
  if (has_purchase_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->purchase_limit(), output);
  }

  // optional uint32 sort_group = 5;
  if (has_sort_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sort_group(), output);
  }

  // optional string reward_lootlist_name = 6;
  if (has_reward_lootlist_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward_lootlist_name().data(), this->reward_lootlist_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward_lootlist_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reward_lootlist_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestMapStoreItem)
}

::google::protobuf::uint8* CMsgQuestMapStoreItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapStoreItem)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string item_name = 2;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_name(), target);
  }

  // optional .CMsgVarField price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->price(), target);
  }

  // optional uint32 purchase_limit = 4;
  if (has_purchase_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->purchase_limit(), target);
  }

  // optional uint32 sort_group = 5;
  if (has_sort_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sort_group(), target);
  }

  // optional string reward_lootlist_name = 6;
  if (has_reward_lootlist_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward_lootlist_name().data(), this->reward_lootlist_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward_lootlist_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reward_lootlist_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapStoreItem)
  return target;
}

int CMsgQuestMapStoreItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string item_name = 2;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // optional string reward_lootlist_name = 6;
    if (has_reward_lootlist_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward_lootlist_name());
    }

    // optional .CMsgVarField price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price());
    }

    // optional uint32 purchase_limit = 4;
    if (has_purchase_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchase_limit());
    }

    // optional uint32 sort_group = 5;
    if (has_sort_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestMapStoreItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestMapStoreItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestMapStoreItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestMapStoreItem::MergeFrom(const CMsgQuestMapStoreItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_reward_lootlist_name()) {
      set_reward_lootlist_name(from.reward_lootlist_name());
    }
    if (from.has_price()) {
      mutable_price()->::CMsgVarField::MergeFrom(from.price());
    }
    if (from.has_purchase_limit()) {
      set_purchase_limit(from.purchase_limit());
    }
    if (from.has_sort_group()) {
      set_sort_group(from.sort_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestMapStoreItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapStoreItem::CopyFrom(const CMsgQuestMapStoreItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapStoreItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapStoreItem::Swap(CMsgQuestMapStoreItem* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(item_name_, other->item_name_);
    std::swap(reward_lootlist_name_, other->reward_lootlist_name_);
    std::swap(price_, other->price_);
    std::swap(purchase_limit_, other->purchase_limit_);
    std::swap(sort_group_, other->sort_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestMapStoreItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestMapStoreItem_descriptor_;
  metadata.reflection = CMsgQuestMapStoreItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestMapRegionDef_RegionLink::kTargetRegionDefidFieldNumber;
const int CMsgQuestMapRegionDef_RegionLink::kXposFieldNumber;
const int CMsgQuestMapRegionDef_RegionLink::kYposFieldNumber;
#endif  // !_MSC_VER

CMsgQuestMapRegionDef_RegionLink::CMsgQuestMapRegionDef_RegionLink()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestMapRegionDef.RegionLink)
}

void CMsgQuestMapRegionDef_RegionLink::InitAsDefaultInstance() {
  target_region_defid_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
}

CMsgQuestMapRegionDef_RegionLink::CMsgQuestMapRegionDef_RegionLink(const CMsgQuestMapRegionDef_RegionLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapRegionDef.RegionLink)
}

void CMsgQuestMapRegionDef_RegionLink::SharedCtor() {
  _cached_size_ = 0;
  target_region_defid_ = NULL;
  xpos_ = 0u;
  ypos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestMapRegionDef_RegionLink::~CMsgQuestMapRegionDef_RegionLink() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapRegionDef.RegionLink)
  SharedDtor();
}

void CMsgQuestMapRegionDef_RegionLink::SharedDtor() {
  if (this != default_instance_) {
    delete target_region_defid_;
  }
}

void CMsgQuestMapRegionDef_RegionLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestMapRegionDef_RegionLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestMapRegionDef_RegionLink_descriptor_;
}

const CMsgQuestMapRegionDef_RegionLink& CMsgQuestMapRegionDef_RegionLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestMapRegionDef_RegionLink* CMsgQuestMapRegionDef_RegionLink::default_instance_ = NULL;

CMsgQuestMapRegionDef_RegionLink* CMsgQuestMapRegionDef_RegionLink::New() const {
  return new CMsgQuestMapRegionDef_RegionLink;
}

void CMsgQuestMapRegionDef_RegionLink::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQuestMapRegionDef_RegionLink*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(xpos_, ypos_);
    if (has_target_region_defid()) {
      if (target_region_defid_ != NULL) target_region_defid_->::CMsgProtoDefID::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestMapRegionDef_RegionLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestMapRegionDef.RegionLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefID target_region_defid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_region_defid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_xpos;
        break;
      }

      // optional uint32 xpos = 2;
      case 2: {
        if (tag == 16) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ypos;
        break;
      }

      // optional uint32 ypos = 3;
      case 3: {
        if (tag == 24) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestMapRegionDef.RegionLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestMapRegionDef.RegionLink)
  return false;
#undef DO_
}

void CMsgQuestMapRegionDef_RegionLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestMapRegionDef.RegionLink)
  // required .CMsgProtoDefID target_region_defid = 1;
  if (has_target_region_defid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target_region_defid(), output);
  }

  // optional uint32 xpos = 2;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->xpos(), output);
  }

  // optional uint32 ypos = 3;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ypos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestMapRegionDef.RegionLink)
}

::google::protobuf::uint8* CMsgQuestMapRegionDef_RegionLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapRegionDef.RegionLink)
  // required .CMsgProtoDefID target_region_defid = 1;
  if (has_target_region_defid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_region_defid(), target);
  }

  // optional uint32 xpos = 2;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->xpos(), target);
  }

  // optional uint32 ypos = 3;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ypos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapRegionDef.RegionLink)
  return target;
}

int CMsgQuestMapRegionDef_RegionLink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefID target_region_defid = 1;
    if (has_target_region_defid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_region_defid());
    }

    // optional uint32 xpos = 2;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpos());
    }

    // optional uint32 ypos = 3;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ypos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestMapRegionDef_RegionLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestMapRegionDef_RegionLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestMapRegionDef_RegionLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestMapRegionDef_RegionLink::MergeFrom(const CMsgQuestMapRegionDef_RegionLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_region_defid()) {
      mutable_target_region_defid()->::CMsgProtoDefID::MergeFrom(from.target_region_defid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestMapRegionDef_RegionLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapRegionDef_RegionLink::CopyFrom(const CMsgQuestMapRegionDef_RegionLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapRegionDef_RegionLink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_target_region_defid()) {
    if (!this->target_region_defid().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapRegionDef_RegionLink::Swap(CMsgQuestMapRegionDef_RegionLink* other) {
  if (other != this) {
    std::swap(target_region_defid_, other->target_region_defid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestMapRegionDef_RegionLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestMapRegionDef_RegionLink_descriptor_;
  metadata.reflection = CMsgQuestMapRegionDef_RegionLink_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgQuestMapRegionDef::kHeaderFieldNumber;
const int CMsgQuestMapRegionDef::kNameFieldNumber;
const int CMsgQuestMapRegionDef::kResfileFieldNumber;
const int CMsgQuestMapRegionDef::kLinksFieldNumber;
const int CMsgQuestMapRegionDef::kReturnLinkFieldNumber;
const int CMsgQuestMapRegionDef::kRadioFreqFieldNumber;
const int CMsgQuestMapRegionDef::kZoomScaleFieldNumber;
const int CMsgQuestMapRegionDef::kStarTypeFieldNumber;
#endif  // !_MSC_VER

CMsgQuestMapRegionDef::CMsgQuestMapRegionDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestMapRegionDef)
}

void CMsgQuestMapRegionDef::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
  return_link_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
  star_type_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
}

CMsgQuestMapRegionDef::CMsgQuestMapRegionDef(const CMsgQuestMapRegionDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapRegionDef)
}

void CMsgQuestMapRegionDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_link_ = NULL;
  radio_freq_ = 0;
  zoom_scale_ = 0;
  star_type_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestMapRegionDef::~CMsgQuestMapRegionDef() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapRegionDef)
  SharedDtor();
}

void CMsgQuestMapRegionDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (resfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resfile_;
  }
  if (this != default_instance_) {
    delete header_;
    delete return_link_;
    delete star_type_;
  }
}

void CMsgQuestMapRegionDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestMapRegionDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestMapRegionDef_descriptor_;
}

const CMsgQuestMapRegionDef& CMsgQuestMapRegionDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestMapRegionDef* CMsgQuestMapRegionDef::default_instance_ = NULL;

CMsgQuestMapRegionDef* CMsgQuestMapRegionDef::New() const {
  return new CMsgQuestMapRegionDef;
}

void CMsgQuestMapRegionDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQuestMapRegionDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(radio_freq_, zoom_scale_);
    if (has_header()) {
      if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_resfile()) {
      if (resfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resfile_->clear();
      }
    }
    if (has_return_link()) {
      if (return_link_ != NULL) return_link_->::CMsgProtoDefID::Clear();
    }
    if (has_star_type()) {
      if (star_type_ != NULL) star_type_->::CMsgProtoDefID::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestMapRegionDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestMapRegionDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resfile;
        break;
      }

      // optional string resfile = 3;
      case 3: {
        if (tag == 26) {
         parse_resfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resfile().data(), this->resfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resfile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_links;
        break;
      }

      // repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
      case 4: {
        if (tag == 34) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_links;
        if (input->ExpectTag(42)) goto parse_return_link;
        break;
      }

      // optional .CMsgProtoDefID return_link = 5;
      case 5: {
        if (tag == 42) {
         parse_return_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_return_link()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_radio_freq;
        break;
      }

      // optional float radio_freq = 6;
      case 6: {
        if (tag == 53) {
         parse_radio_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radio_freq_)));
          set_has_radio_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_zoom_scale;
        break;
      }

      // optional float zoom_scale = 7;
      case 7: {
        if (tag == 61) {
         parse_zoom_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_scale_)));
          set_has_zoom_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_star_type;
        break;
      }

      // optional .CMsgProtoDefID star_type = 8;
      case 8: {
        if (tag == 66) {
         parse_star_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_star_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestMapRegionDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestMapRegionDef)
  return false;
#undef DO_
}

void CMsgQuestMapRegionDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestMapRegionDef)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string resfile = 3;
  if (has_resfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resfile().data(), this->resfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resfile(), output);
  }

  // repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->links(i), output);
  }

  // optional .CMsgProtoDefID return_link = 5;
  if (has_return_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->return_link(), output);
  }

  // optional float radio_freq = 6;
  if (has_radio_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->radio_freq(), output);
  }

  // optional float zoom_scale = 7;
  if (has_zoom_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->zoom_scale(), output);
  }

  // optional .CMsgProtoDefID star_type = 8;
  if (has_star_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->star_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestMapRegionDef)
}

::google::protobuf::uint8* CMsgQuestMapRegionDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapRegionDef)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string resfile = 3;
  if (has_resfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resfile().data(), this->resfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resfile(), target);
  }

  // repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->links(i), target);
  }

  // optional .CMsgProtoDefID return_link = 5;
  if (has_return_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->return_link(), target);
  }

  // optional float radio_freq = 6;
  if (has_radio_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->radio_freq(), target);
  }

  // optional float zoom_scale = 7;
  if (has_zoom_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->zoom_scale(), target);
  }

  // optional .CMsgProtoDefID star_type = 8;
  if (has_star_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->star_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapRegionDef)
  return target;
}

int CMsgQuestMapRegionDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string resfile = 3;
    if (has_resfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resfile());
    }

    // optional .CMsgProtoDefID return_link = 5;
    if (has_return_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->return_link());
    }

    // optional float radio_freq = 6;
    if (has_radio_freq()) {
      total_size += 1 + 4;
    }

    // optional float zoom_scale = 7;
    if (has_zoom_scale()) {
      total_size += 1 + 4;
    }

    // optional .CMsgProtoDefID star_type = 8;
    if (has_star_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->star_type());
    }

  }
  // repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestMapRegionDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestMapRegionDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestMapRegionDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestMapRegionDef::MergeFrom(const CMsgQuestMapRegionDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_resfile()) {
      set_resfile(from.resfile());
    }
    if (from.has_return_link()) {
      mutable_return_link()->::CMsgProtoDefID::MergeFrom(from.return_link());
    }
    if (from.has_radio_freq()) {
      set_radio_freq(from.radio_freq());
    }
    if (from.has_zoom_scale()) {
      set_zoom_scale(from.zoom_scale());
    }
    if (from.has_star_type()) {
      mutable_star_type()->::CMsgProtoDefID::MergeFrom(from.star_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestMapRegionDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapRegionDef::CopyFrom(const CMsgQuestMapRegionDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapRegionDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->links())) return false;
  if (has_return_link()) {
    if (!this->return_link().IsInitialized()) return false;
  }
  if (has_star_type()) {
    if (!this->star_type().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapRegionDef::Swap(CMsgQuestMapRegionDef* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(name_, other->name_);
    std::swap(resfile_, other->resfile_);
    links_.Swap(&other->links_);
    std::swap(return_link_, other->return_link_);
    std::swap(radio_freq_, other->radio_freq_);
    std::swap(zoom_scale_, other->zoom_scale_);
    std::swap(star_type_, other->star_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestMapRegionDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestMapRegionDef_descriptor_;
  metadata.reflection = CMsgQuestMapRegionDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgVarField::kVariableFieldNumber;
const int CMsgVarField::kFloatFieldNumber;
const int CMsgVarField::kDoubleFieldNumber;
const int CMsgVarField::kUint32FieldNumber;
const int CMsgVarField::kUint64FieldNumber;
const int CMsgVarField::kSint32FieldNumber;
const int CMsgVarField::kSint64FieldNumber;
const int CMsgVarField::kBoolFieldNumber;
const int CMsgVarField::kStringFieldNumber;
#endif  // !_MSC_VER

CMsgVarField::CMsgVarField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgVarField)
}

void CMsgVarField::InitAsDefaultInstance() {
  CMsgVarField_default_oneof_instance_->float__ = 0;
  CMsgVarField_default_oneof_instance_->double__ = 0;
  CMsgVarField_default_oneof_instance_->uint32_ = 0u;
  CMsgVarField_default_oneof_instance_->uint64_ = GOOGLE_ULONGLONG(0);
  CMsgVarField_default_oneof_instance_->sint32_ = 0;
  CMsgVarField_default_oneof_instance_->sint64_ = GOOGLE_LONGLONG(0);
  CMsgVarField_default_oneof_instance_->bool__ = false;
  CMsgVarField_default_oneof_instance_->string_ = &::google::protobuf::internal::GetEmptyStringAlreadyInited();
}

CMsgVarField::CMsgVarField(const CMsgVarField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgVarField)
}

void CMsgVarField::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  variable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

CMsgVarField::~CMsgVarField() {
  // @@protoc_insertion_point(destructor:CMsgVarField)
  SharedDtor();
}

void CMsgVarField::SharedDtor() {
  if (variable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete variable_;
  }
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void CMsgVarField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVarField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgVarField_descriptor_;
}

const CMsgVarField& CMsgVarField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgVarField* CMsgVarField::default_instance_ = NULL;

CMsgVarField* CMsgVarField::New() const {
  return new CMsgVarField;
}

void CMsgVarField::clear_value() {
  switch(value_case()) {
    case kFloat: {
      // No need to clear
      break;
    }
    case kDouble: {
      // No need to clear
      break;
    }
    case kUint32: {
      // No need to clear
      break;
    }
    case kUint64: {
      // No need to clear
      break;
    }
    case kSint32: {
      // No need to clear
      break;
    }
    case kSint64: {
      // No need to clear
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kString: {
      delete value_.string_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void CMsgVarField::Clear() {
  if (has_variable()) {
    if (variable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      variable_->clear();
    }
  }
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgVarField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgVarField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string variable = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->variable().data(), this->variable().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "variable");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_float;
        break;
      }

      // optional float float = 2;
      case 2: {
        if (tag == 21) {
         parse_float:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.float__)));
          set_has_float_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_double;
        break;
      }

      // optional double double = 3;
      case 3: {
        if (tag == 25) {
         parse_double:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double__)));
          set_has_double_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uint32;
        break;
      }

      // optional uint32 uint32 = 4;
      case 4: {
        if (tag == 32) {
         parse_uint32:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_.uint32_)));
          set_has_uint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uint64;
        break;
      }

      // optional uint64 uint64 = 5;
      case 5: {
        if (tag == 40) {
         parse_uint64:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_.uint64_)));
          set_has_uint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sint32;
        break;
      }

      // optional sint32 sint32 = 6;
      case 6: {
        if (tag == 48) {
         parse_sint32:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value_.sint32_)));
          set_has_sint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sint64;
        break;
      }

      // optional sint64 sint64 = 7;
      case 7: {
        if (tag == 56) {
         parse_sint64:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_.sint64_)));
          set_has_sint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bool;
        break;
      }

      // optional bool bool = 8;
      case 8: {
        if (tag == 64) {
         parse_bool:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool__)));
          set_has_bool_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_string;
        break;
      }

      // optional string string = 9;
      case 9: {
        if (tag == 74) {
         parse_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgVarField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgVarField)
  return false;
#undef DO_
}

void CMsgVarField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgVarField)
  // optional string variable = 1;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variable().data(), this->variable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "variable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variable(), output);
  }

  // optional float float = 2;
  if (has_float_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_(), output);
  }

  // optional double double = 3;
  if (has_double_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_(), output);
  }

  // optional uint32 uint32 = 4;
  if (has_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uint32(), output);
  }

  // optional uint64 uint64 = 5;
  if (has_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uint64(), output);
  }

  // optional sint32 sint32 = 6;
  if (has_sint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->sint32(), output);
  }

  // optional sint64 sint64 = 7;
  if (has_sint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->sint64(), output);
  }

  // optional bool bool = 8;
  if (has_bool_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bool_(), output);
  }

  // optional string string = 9;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgVarField)
}

::google::protobuf::uint8* CMsgVarField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVarField)
  // optional string variable = 1;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variable().data(), this->variable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "variable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->variable(), target);
  }

  // optional float float = 2;
  if (has_float_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->float_(), target);
  }

  // optional double double = 3;
  if (has_double_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_(), target);
  }

  // optional uint32 uint32 = 4;
  if (has_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint32(), target);
  }

  // optional uint64 uint64 = 5;
  if (has_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uint64(), target);
  }

  // optional sint32 sint32 = 6;
  if (has_sint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->sint32(), target);
  }

  // optional sint64 sint64 = 7;
  if (has_sint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->sint64(), target);
  }

  // optional bool bool = 8;
  if (has_bool_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bool_(), target);
  }

  // optional string string = 9;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVarField)
  return target;
}

int CMsgVarField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string variable = 1;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->variable());
    }

  }
  switch (value_case()) {
    // optional float float = 2;
    case kFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional double double = 3;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // optional uint32 uint32 = 4;
    case kUint32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32());
      break;
    }
    // optional uint64 uint64 = 5;
    case kUint64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64());
      break;
    }
    // optional sint32 sint32 = 6;
    case kSint32: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sint32());
      break;
    }
    // optional sint64 sint64 = 7;
    case kSint64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64());
      break;
    }
    // optional bool bool = 8;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // optional string string = 9;
    case kString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVarField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgVarField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgVarField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgVarField::MergeFrom(const CMsgVarField& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.value_case()) {
    case kFloat: {
      set_float_(from.float_());
      break;
    }
    case kDouble: {
      set_double_(from.double_());
      break;
    }
    case kUint32: {
      set_uint32(from.uint32());
      break;
    }
    case kUint64: {
      set_uint64(from.uint64());
      break;
    }
    case kSint32: {
      set_sint32(from.sint32());
      break;
    }
    case kSint64: {
      set_sint64(from.sint64());
      break;
    }
    case kBool: {
      set_bool_(from.bool_());
      break;
    }
    case kString: {
      set_string(from.string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_variable()) {
      set_variable(from.variable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgVarField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVarField::CopyFrom(const CMsgVarField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVarField::IsInitialized() const {

  return true;
}

void CMsgVarField::Swap(CMsgVarField* other) {
  if (other != this) {
    std::swap(variable_, other->variable_);
    std::swap(value_, other->value_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgVarField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgVarField_descriptor_;
  metadata.reflection = CMsgVarField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestMapStarType::kHeaderFieldNumber;
const int CMsgQuestMapStarType::kNameFieldNumber;
#endif  // !_MSC_VER

CMsgQuestMapStarType::CMsgQuestMapStarType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestMapStarType)
}

void CMsgQuestMapStarType::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
}

CMsgQuestMapStarType::CMsgQuestMapStarType(const CMsgQuestMapStarType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapStarType)
}

void CMsgQuestMapStarType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestMapStarType::~CMsgQuestMapStarType() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapStarType)
  SharedDtor();
}

void CMsgQuestMapStarType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void CMsgQuestMapStarType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestMapStarType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestMapStarType_descriptor_;
}

const CMsgQuestMapStarType& CMsgQuestMapStarType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestMapStarType* CMsgQuestMapStarType::default_instance_ = NULL;

CMsgQuestMapStarType* CMsgQuestMapStarType::New() const {
  return new CMsgQuestMapStarType;
}

void CMsgQuestMapStarType::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestMapStarType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestMapStarType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestMapStarType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestMapStarType)
  return false;
#undef DO_
}

void CMsgQuestMapStarType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestMapStarType)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestMapStarType)
}

::google::protobuf::uint8* CMsgQuestMapStarType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapStarType)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapStarType)
  return target;
}

int CMsgQuestMapStarType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestMapStarType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestMapStarType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestMapStarType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestMapStarType::MergeFrom(const CMsgQuestMapStarType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestMapStarType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapStarType::CopyFrom(const CMsgQuestMapStarType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapStarType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapStarType::Swap(CMsgQuestMapStarType* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestMapStarType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestMapStarType_descriptor_;
  metadata.reflection = CMsgQuestMapStarType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestMapNodeDef::kHeaderFieldNumber;
const int CMsgQuestMapNodeDef::kNameLoctokenFieldNumber;
const int CMsgQuestMapNodeDef::kXPosFieldNumber;
const int CMsgQuestMapNodeDef::kYPosFieldNumber;
const int CMsgQuestMapNodeDef::kConditionFieldNumber;
const int CMsgQuestMapNodeDef::kOwningRegionFieldNumber;
const int CMsgQuestMapNodeDef::kQuestOptionsFieldNumber;
const int CMsgQuestMapNodeDef::kAssociatedOperationFieldNumber;
const int CMsgQuestMapNodeDef::kRewardItemNameFieldNumber;
const int CMsgQuestMapNodeDef::kRewardLootlistNameFieldNumber;
const int CMsgQuestMapNodeDef::kCashRewardFieldNumber;
const int CMsgQuestMapNodeDef::kStarTypeFieldNumber;
const int CMsgQuestMapNodeDef::kStarsToUnlockFieldNumber;
#endif  // !_MSC_VER

CMsgQuestMapNodeDef::CMsgQuestMapNodeDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestMapNodeDef)
}

void CMsgQuestMapNodeDef::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
  condition_ = const_cast< ::CMsgQuestMapNodeCondition*>(&::CMsgQuestMapNodeCondition::default_instance());
  owning_region_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
  star_type_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
}

CMsgQuestMapNodeDef::CMsgQuestMapNodeDef(const CMsgQuestMapNodeDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapNodeDef)
}

void CMsgQuestMapNodeDef::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  name_loctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_pos_ = 0;
  y_pos_ = 0;
  condition_ = NULL;
  owning_region_ = NULL;
  associated_operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_lootlist_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cash_reward_ = 1;
  star_type_ = NULL;
  stars_to_unlock_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestMapNodeDef::~CMsgQuestMapNodeDef() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapNodeDef)
  SharedDtor();
}

void CMsgQuestMapNodeDef::SharedDtor() {
  if (name_loctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_loctoken_;
  }
  if (associated_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete associated_operation_;
  }
  if (reward_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_item_name_;
  }
  if (reward_lootlist_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_lootlist_name_;
  }
  if (this != default_instance_) {
    delete header_;
    delete condition_;
    delete owning_region_;
    delete star_type_;
  }
}

void CMsgQuestMapNodeDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestMapNodeDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestMapNodeDef_descriptor_;
}

const CMsgQuestMapNodeDef& CMsgQuestMapNodeDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestMapNodeDef* CMsgQuestMapNodeDef::default_instance_ = NULL;

CMsgQuestMapNodeDef* CMsgQuestMapNodeDef::New() const {
  return new CMsgQuestMapNodeDef;
}

void CMsgQuestMapNodeDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CMsgQuestMapNodeDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(x_pos_, y_pos_);
    if (has_header()) {
      if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
    }
    if (has_name_loctoken()) {
      if (name_loctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_loctoken_->clear();
      }
    }
    if (has_condition()) {
      if (condition_ != NULL) condition_->::CMsgQuestMapNodeCondition::Clear();
    }
    if (has_owning_region()) {
      if (owning_region_ != NULL) owning_region_->::CMsgProtoDefID::Clear();
    }
    if (has_associated_operation()) {
      if (associated_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        associated_operation_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_reward_item_name()) {
      if (reward_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_item_name_->clear();
      }
    }
    if (has_reward_lootlist_name()) {
      if (reward_lootlist_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_lootlist_name_->clear();
      }
    }
    cash_reward_ = 1;
    if (has_star_type()) {
      if (star_type_ != NULL) star_type_->::CMsgProtoDefID::Clear();
    }
    stars_to_unlock_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  quest_options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestMapNodeDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestMapNodeDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name_loctoken;
        break;
      }

      // optional string name_loctoken = 4;
      case 4: {
        if (tag == 34) {
         parse_name_loctoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_loctoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_loctoken().data(), this->name_loctoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name_loctoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_x_pos;
        break;
      }

      // optional float x_pos = 6;
      case 6: {
        if (tag == 53) {
         parse_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_y_pos;
        break;
      }

      // optional float y_pos = 7;
      case 7: {
        if (tag == 61) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_condition;
        break;
      }

      // optional .CMsgQuestMapNodeCondition condition = 9;
      case 9: {
        if (tag == 74) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_owning_region;
        break;
      }

      // optional .CMsgProtoDefID owning_region = 10;
      case 10: {
        if (tag == 82) {
         parse_owning_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owning_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_quest_options;
        break;
      }

      // repeated .CMsgProtoDefID quest_options = 11;
      case 11: {
        if (tag == 90) {
         parse_quest_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_quest_options;
        if (input->ExpectTag(130)) goto parse_associated_operation;
        break;
      }

      // optional string associated_operation = 16;
      case 16: {
        if (tag == 130) {
         parse_associated_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_associated_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->associated_operation().data(), this->associated_operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "associated_operation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_reward_item_name;
        break;
      }

      // optional string reward_item_name = 18;
      case 18: {
        if (tag == 146) {
         parse_reward_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward_item_name().data(), this->reward_item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward_item_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_cash_reward;
        break;
      }

      // optional .ENodeCashReward cash_reward = 19;
      case 19: {
        if (tag == 152) {
         parse_cash_reward:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ENodeCashReward_IsValid(value)) {
            set_cash_reward(static_cast< ::ENodeCashReward >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_star_type;
        break;
      }

      // optional .CMsgProtoDefID star_type = 20;
      case 20: {
        if (tag == 162) {
         parse_star_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_star_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_stars_to_unlock;
        break;
      }

      // optional uint32 stars_to_unlock = 21 [default = 1];
      case 21: {
        if (tag == 168) {
         parse_stars_to_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stars_to_unlock_)));
          set_has_stars_to_unlock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_reward_lootlist_name;
        break;
      }

      // optional string reward_lootlist_name = 22;
      case 22: {
        if (tag == 178) {
         parse_reward_lootlist_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward_lootlist_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward_lootlist_name().data(), this->reward_lootlist_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward_lootlist_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestMapNodeDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestMapNodeDef)
  return false;
#undef DO_
}

void CMsgQuestMapNodeDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestMapNodeDef)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string name_loctoken = 4;
  if (has_name_loctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_loctoken().data(), this->name_loctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_loctoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name_loctoken(), output);
  }

  // optional float x_pos = 6;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x_pos(), output);
  }

  // optional float y_pos = 7;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->y_pos(), output);
  }

  // optional .CMsgQuestMapNodeCondition condition = 9;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->condition(), output);
  }

  // optional .CMsgProtoDefID owning_region = 10;
  if (has_owning_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->owning_region(), output);
  }

  // repeated .CMsgProtoDefID quest_options = 11;
  for (int i = 0; i < this->quest_options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->quest_options(i), output);
  }

  // optional string associated_operation = 16;
  if (has_associated_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->associated_operation().data(), this->associated_operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "associated_operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->associated_operation(), output);
  }

  // optional string reward_item_name = 18;
  if (has_reward_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward_item_name().data(), this->reward_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward_item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->reward_item_name(), output);
  }

  // optional .ENodeCashReward cash_reward = 19;
  if (has_cash_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->cash_reward(), output);
  }

  // optional .CMsgProtoDefID star_type = 20;
  if (has_star_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->star_type(), output);
  }

  // optional uint32 stars_to_unlock = 21 [default = 1];
  if (has_stars_to_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->stars_to_unlock(), output);
  }

  // optional string reward_lootlist_name = 22;
  if (has_reward_lootlist_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward_lootlist_name().data(), this->reward_lootlist_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward_lootlist_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->reward_lootlist_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestMapNodeDef)
}

::google::protobuf::uint8* CMsgQuestMapNodeDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapNodeDef)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string name_loctoken = 4;
  if (has_name_loctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_loctoken().data(), this->name_loctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_loctoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name_loctoken(), target);
  }

  // optional float x_pos = 6;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x_pos(), target);
  }

  // optional float y_pos = 7;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->y_pos(), target);
  }

  // optional .CMsgQuestMapNodeCondition condition = 9;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->condition(), target);
  }

  // optional .CMsgProtoDefID owning_region = 10;
  if (has_owning_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->owning_region(), target);
  }

  // repeated .CMsgProtoDefID quest_options = 11;
  for (int i = 0; i < this->quest_options_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->quest_options(i), target);
  }

  // optional string associated_operation = 16;
  if (has_associated_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->associated_operation().data(), this->associated_operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "associated_operation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->associated_operation(), target);
  }

  // optional string reward_item_name = 18;
  if (has_reward_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward_item_name().data(), this->reward_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward_item_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->reward_item_name(), target);
  }

  // optional .ENodeCashReward cash_reward = 19;
  if (has_cash_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->cash_reward(), target);
  }

  // optional .CMsgProtoDefID star_type = 20;
  if (has_star_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->star_type(), target);
  }

  // optional uint32 stars_to_unlock = 21 [default = 1];
  if (has_stars_to_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->stars_to_unlock(), target);
  }

  // optional string reward_lootlist_name = 22;
  if (has_reward_lootlist_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward_lootlist_name().data(), this->reward_lootlist_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward_lootlist_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->reward_lootlist_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapNodeDef)
  return target;
}

int CMsgQuestMapNodeDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string name_loctoken = 4;
    if (has_name_loctoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_loctoken());
    }

    // optional float x_pos = 6;
    if (has_x_pos()) {
      total_size += 1 + 4;
    }

    // optional float y_pos = 7;
    if (has_y_pos()) {
      total_size += 1 + 4;
    }

    // optional .CMsgQuestMapNodeCondition condition = 9;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

    // optional .CMsgProtoDefID owning_region = 10;
    if (has_owning_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owning_region());
    }

    // optional string associated_operation = 16;
    if (has_associated_operation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->associated_operation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string reward_item_name = 18;
    if (has_reward_item_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward_item_name());
    }

    // optional string reward_lootlist_name = 22;
    if (has_reward_lootlist_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward_lootlist_name());
    }

    // optional .ENodeCashReward cash_reward = 19;
    if (has_cash_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cash_reward());
    }

    // optional .CMsgProtoDefID star_type = 20;
    if (has_star_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->star_type());
    }

    // optional uint32 stars_to_unlock = 21 [default = 1];
    if (has_stars_to_unlock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stars_to_unlock());
    }

  }
  // repeated .CMsgProtoDefID quest_options = 11;
  total_size += 1 * this->quest_options_size();
  for (int i = 0; i < this->quest_options_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest_options(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestMapNodeDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestMapNodeDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestMapNodeDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestMapNodeDef::MergeFrom(const CMsgQuestMapNodeDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  quest_options_.MergeFrom(from.quest_options_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
    if (from.has_name_loctoken()) {
      set_name_loctoken(from.name_loctoken());
    }
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
    if (from.has_condition()) {
      mutable_condition()->::CMsgQuestMapNodeCondition::MergeFrom(from.condition());
    }
    if (from.has_owning_region()) {
      mutable_owning_region()->::CMsgProtoDefID::MergeFrom(from.owning_region());
    }
    if (from.has_associated_operation()) {
      set_associated_operation(from.associated_operation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_item_name()) {
      set_reward_item_name(from.reward_item_name());
    }
    if (from.has_reward_lootlist_name()) {
      set_reward_lootlist_name(from.reward_lootlist_name());
    }
    if (from.has_cash_reward()) {
      set_cash_reward(from.cash_reward());
    }
    if (from.has_star_type()) {
      mutable_star_type()->::CMsgProtoDefID::MergeFrom(from.star_type());
    }
    if (from.has_stars_to_unlock()) {
      set_stars_to_unlock(from.stars_to_unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestMapNodeDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapNodeDef::CopyFrom(const CMsgQuestMapNodeDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapNodeDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  if (has_owning_region()) {
    if (!this->owning_region().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->quest_options())) return false;
  if (has_star_type()) {
    if (!this->star_type().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapNodeDef::Swap(CMsgQuestMapNodeDef* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(name_loctoken_, other->name_loctoken_);
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(condition_, other->condition_);
    std::swap(owning_region_, other->owning_region_);
    quest_options_.Swap(&other->quest_options_);
    std::swap(associated_operation_, other->associated_operation_);
    std::swap(reward_item_name_, other->reward_item_name_);
    std::swap(reward_lootlist_name_, other->reward_lootlist_name_);
    std::swap(cash_reward_, other->cash_reward_);
    std::swap(star_type_, other->star_type_);
    std::swap(stars_to_unlock_, other->stars_to_unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestMapNodeDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestMapNodeDef_descriptor_;
  metadata.reflection = CMsgQuestMapNodeDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_Variables::kHeaderFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Variables::CMsgPaintKit_Variables()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Variables)
}

void CMsgPaintKit_Variables::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
}

CMsgPaintKit_Variables::CMsgPaintKit_Variables(const CMsgPaintKit_Variables& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Variables)
}

void CMsgPaintKit_Variables::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Variables::~CMsgPaintKit_Variables() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Variables)
  SharedDtor();
}

void CMsgPaintKit_Variables::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void CMsgPaintKit_Variables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Variables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Variables_descriptor_;
}

const CMsgPaintKit_Variables& CMsgPaintKit_Variables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Variables* CMsgPaintKit_Variables::default_instance_ = NULL;

CMsgPaintKit_Variables* CMsgPaintKit_Variables::New() const {
  return new CMsgPaintKit_Variables;
}

void CMsgPaintKit_Variables::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Variables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Variables)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Variables)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Variables)
  return false;
#undef DO_
}

void CMsgPaintKit_Variables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Variables)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Variables)
}

::google::protobuf::uint8* CMsgPaintKit_Variables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Variables)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Variables)
  return target;
}

int CMsgPaintKit_Variables::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Variables::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Variables* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Variables*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Variables::MergeFrom(const CMsgPaintKit_Variables& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Variables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Variables::CopyFrom(const CMsgPaintKit_Variables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Variables::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_Variables::Swap(CMsgPaintKit_Variables* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Variables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Variables_descriptor_;
  metadata.reflection = CMsgPaintKit_Variables_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_Operation_TextureStage::kTextureFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kTextureRedFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kTextureBlueFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kAdjustBlackFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kAdjustOffsetFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kAdjustGammaFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kRotationFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kTranslateUFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kTranslateVFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kScaleUvFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kFlipUFieldNumber;
const int CMsgPaintKit_Operation_TextureStage::kFlipVFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Operation_TextureStage::CMsgPaintKit_Operation_TextureStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Operation_TextureStage)
}

void CMsgPaintKit_Operation_TextureStage::InitAsDefaultInstance() {
  texture_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  texture_red_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  texture_blue_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  adjust_black_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  adjust_offset_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  adjust_gamma_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  rotation_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  translate_u_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  translate_v_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  scale_uv_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  flip_u_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  flip_v_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
}

CMsgPaintKit_Operation_TextureStage::CMsgPaintKit_Operation_TextureStage(const CMsgPaintKit_Operation_TextureStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_TextureStage)
}

void CMsgPaintKit_Operation_TextureStage::SharedCtor() {
  _cached_size_ = 0;
  texture_ = NULL;
  texture_red_ = NULL;
  texture_blue_ = NULL;
  adjust_black_ = NULL;
  adjust_offset_ = NULL;
  adjust_gamma_ = NULL;
  rotation_ = NULL;
  translate_u_ = NULL;
  translate_v_ = NULL;
  scale_uv_ = NULL;
  flip_u_ = NULL;
  flip_v_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Operation_TextureStage::~CMsgPaintKit_Operation_TextureStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_TextureStage)
  SharedDtor();
}

void CMsgPaintKit_Operation_TextureStage::SharedDtor() {
  if (this != default_instance_) {
    delete texture_;
    delete texture_red_;
    delete texture_blue_;
    delete adjust_black_;
    delete adjust_offset_;
    delete adjust_gamma_;
    delete rotation_;
    delete translate_u_;
    delete translate_v_;
    delete scale_uv_;
    delete flip_u_;
    delete flip_v_;
  }
}

void CMsgPaintKit_Operation_TextureStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_TextureStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Operation_TextureStage_descriptor_;
}

const CMsgPaintKit_Operation_TextureStage& CMsgPaintKit_Operation_TextureStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Operation_TextureStage* CMsgPaintKit_Operation_TextureStage::default_instance_ = NULL;

CMsgPaintKit_Operation_TextureStage* CMsgPaintKit_Operation_TextureStage::New() const {
  return new CMsgPaintKit_Operation_TextureStage;
}

void CMsgPaintKit_Operation_TextureStage::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_texture()) {
      if (texture_ != NULL) texture_->::CMsgVarField::Clear();
    }
    if (has_texture_red()) {
      if (texture_red_ != NULL) texture_red_->::CMsgVarField::Clear();
    }
    if (has_texture_blue()) {
      if (texture_blue_ != NULL) texture_blue_->::CMsgVarField::Clear();
    }
    if (has_adjust_black()) {
      if (adjust_black_ != NULL) adjust_black_->::CMsgVarField::Clear();
    }
    if (has_adjust_offset()) {
      if (adjust_offset_ != NULL) adjust_offset_->::CMsgVarField::Clear();
    }
    if (has_adjust_gamma()) {
      if (adjust_gamma_ != NULL) adjust_gamma_->::CMsgVarField::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::CMsgVarField::Clear();
    }
    if (has_translate_u()) {
      if (translate_u_ != NULL) translate_u_->::CMsgVarField::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_translate_v()) {
      if (translate_v_ != NULL) translate_v_->::CMsgVarField::Clear();
    }
    if (has_scale_uv()) {
      if (scale_uv_ != NULL) scale_uv_->::CMsgVarField::Clear();
    }
    if (has_flip_u()) {
      if (flip_u_ != NULL) flip_u_->::CMsgVarField::Clear();
    }
    if (has_flip_v()) {
      if (flip_v_ != NULL) flip_v_->::CMsgVarField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Operation_TextureStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Operation_TextureStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVarField texture = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_texture_red;
        break;
      }

      // optional .CMsgVarField texture_red = 2;
      case 2: {
        if (tag == 18) {
         parse_texture_red:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture_red()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_texture_blue;
        break;
      }

      // optional .CMsgVarField texture_blue = 3;
      case 3: {
        if (tag == 26) {
         parse_texture_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture_blue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_adjust_black;
        break;
      }

      // optional .CMsgVarField adjust_black = 4;
      case 4: {
        if (tag == 34) {
         parse_adjust_black:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjust_black()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_adjust_offset;
        break;
      }

      // optional .CMsgVarField adjust_offset = 5;
      case 5: {
        if (tag == 42) {
         parse_adjust_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjust_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adjust_gamma;
        break;
      }

      // optional .CMsgVarField adjust_gamma = 6;
      case 6: {
        if (tag == 50) {
         parse_adjust_gamma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjust_gamma()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rotation;
        break;
      }

      // optional .CMsgVarField rotation = 7;
      case 7: {
        if (tag == 58) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_translate_u;
        break;
      }

      // optional .CMsgVarField translate_u = 8;
      case 8: {
        if (tag == 66) {
         parse_translate_u:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translate_u()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_translate_v;
        break;
      }

      // optional .CMsgVarField translate_v = 9;
      case 9: {
        if (tag == 74) {
         parse_translate_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translate_v()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_scale_uv;
        break;
      }

      // optional .CMsgVarField scale_uv = 10;
      case 10: {
        if (tag == 82) {
         parse_scale_uv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_uv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_flip_u;
        break;
      }

      // optional .CMsgVarField flip_u = 11;
      case 11: {
        if (tag == 90) {
         parse_flip_u:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flip_u()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_flip_v;
        break;
      }

      // optional .CMsgVarField flip_v = 12;
      case 12: {
        if (tag == 98) {
         parse_flip_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flip_v()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Operation_TextureStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Operation_TextureStage)
  return false;
#undef DO_
}

void CMsgPaintKit_Operation_TextureStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Operation_TextureStage)
  // optional .CMsgVarField texture = 1;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->texture(), output);
  }

  // optional .CMsgVarField texture_red = 2;
  if (has_texture_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->texture_red(), output);
  }

  // optional .CMsgVarField texture_blue = 3;
  if (has_texture_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->texture_blue(), output);
  }

  // optional .CMsgVarField adjust_black = 4;
  if (has_adjust_black()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->adjust_black(), output);
  }

  // optional .CMsgVarField adjust_offset = 5;
  if (has_adjust_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->adjust_offset(), output);
  }

  // optional .CMsgVarField adjust_gamma = 6;
  if (has_adjust_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->adjust_gamma(), output);
  }

  // optional .CMsgVarField rotation = 7;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rotation(), output);
  }

  // optional .CMsgVarField translate_u = 8;
  if (has_translate_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->translate_u(), output);
  }

  // optional .CMsgVarField translate_v = 9;
  if (has_translate_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->translate_v(), output);
  }

  // optional .CMsgVarField scale_uv = 10;
  if (has_scale_uv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->scale_uv(), output);
  }

  // optional .CMsgVarField flip_u = 11;
  if (has_flip_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->flip_u(), output);
  }

  // optional .CMsgVarField flip_v = 12;
  if (has_flip_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->flip_v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Operation_TextureStage)
}

::google::protobuf::uint8* CMsgPaintKit_Operation_TextureStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_TextureStage)
  // optional .CMsgVarField texture = 1;
  if (has_texture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->texture(), target);
  }

  // optional .CMsgVarField texture_red = 2;
  if (has_texture_red()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->texture_red(), target);
  }

  // optional .CMsgVarField texture_blue = 3;
  if (has_texture_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->texture_blue(), target);
  }

  // optional .CMsgVarField adjust_black = 4;
  if (has_adjust_black()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->adjust_black(), target);
  }

  // optional .CMsgVarField adjust_offset = 5;
  if (has_adjust_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->adjust_offset(), target);
  }

  // optional .CMsgVarField adjust_gamma = 6;
  if (has_adjust_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->adjust_gamma(), target);
  }

  // optional .CMsgVarField rotation = 7;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rotation(), target);
  }

  // optional .CMsgVarField translate_u = 8;
  if (has_translate_u()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->translate_u(), target);
  }

  // optional .CMsgVarField translate_v = 9;
  if (has_translate_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->translate_v(), target);
  }

  // optional .CMsgVarField scale_uv = 10;
  if (has_scale_uv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->scale_uv(), target);
  }

  // optional .CMsgVarField flip_u = 11;
  if (has_flip_u()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->flip_u(), target);
  }

  // optional .CMsgVarField flip_v = 12;
  if (has_flip_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->flip_v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_TextureStage)
  return target;
}

int CMsgPaintKit_Operation_TextureStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVarField texture = 1;
    if (has_texture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture());
    }

    // optional .CMsgVarField texture_red = 2;
    if (has_texture_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture_red());
    }

    // optional .CMsgVarField texture_blue = 3;
    if (has_texture_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture_blue());
    }

    // optional .CMsgVarField adjust_black = 4;
    if (has_adjust_black()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjust_black());
    }

    // optional .CMsgVarField adjust_offset = 5;
    if (has_adjust_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjust_offset());
    }

    // optional .CMsgVarField adjust_gamma = 6;
    if (has_adjust_gamma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjust_gamma());
    }

    // optional .CMsgVarField rotation = 7;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // optional .CMsgVarField translate_u = 8;
    if (has_translate_u()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translate_u());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgVarField translate_v = 9;
    if (has_translate_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translate_v());
    }

    // optional .CMsgVarField scale_uv = 10;
    if (has_scale_uv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale_uv());
    }

    // optional .CMsgVarField flip_u = 11;
    if (has_flip_u()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flip_u());
    }

    // optional .CMsgVarField flip_v = 12;
    if (has_flip_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flip_v());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Operation_TextureStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Operation_TextureStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Operation_TextureStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_TextureStage::MergeFrom(const CMsgPaintKit_Operation_TextureStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_texture()) {
      mutable_texture()->::CMsgVarField::MergeFrom(from.texture());
    }
    if (from.has_texture_red()) {
      mutable_texture_red()->::CMsgVarField::MergeFrom(from.texture_red());
    }
    if (from.has_texture_blue()) {
      mutable_texture_blue()->::CMsgVarField::MergeFrom(from.texture_blue());
    }
    if (from.has_adjust_black()) {
      mutable_adjust_black()->::CMsgVarField::MergeFrom(from.adjust_black());
    }
    if (from.has_adjust_offset()) {
      mutable_adjust_offset()->::CMsgVarField::MergeFrom(from.adjust_offset());
    }
    if (from.has_adjust_gamma()) {
      mutable_adjust_gamma()->::CMsgVarField::MergeFrom(from.adjust_gamma());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::CMsgVarField::MergeFrom(from.rotation());
    }
    if (from.has_translate_u()) {
      mutable_translate_u()->::CMsgVarField::MergeFrom(from.translate_u());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_translate_v()) {
      mutable_translate_v()->::CMsgVarField::MergeFrom(from.translate_v());
    }
    if (from.has_scale_uv()) {
      mutable_scale_uv()->::CMsgVarField::MergeFrom(from.scale_uv());
    }
    if (from.has_flip_u()) {
      mutable_flip_u()->::CMsgVarField::MergeFrom(from.flip_u());
    }
    if (from.has_flip_v()) {
      mutable_flip_v()->::CMsgVarField::MergeFrom(from.flip_v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Operation_TextureStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_TextureStage::CopyFrom(const CMsgPaintKit_Operation_TextureStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_TextureStage::IsInitialized() const {

  return true;
}

void CMsgPaintKit_Operation_TextureStage::Swap(CMsgPaintKit_Operation_TextureStage* other) {
  if (other != this) {
    std::swap(texture_, other->texture_);
    std::swap(texture_red_, other->texture_red_);
    std::swap(texture_blue_, other->texture_blue_);
    std::swap(adjust_black_, other->adjust_black_);
    std::swap(adjust_offset_, other->adjust_offset_);
    std::swap(adjust_gamma_, other->adjust_gamma_);
    std::swap(rotation_, other->rotation_);
    std::swap(translate_u_, other->translate_u_);
    std::swap(translate_v_, other->translate_v_);
    std::swap(scale_uv_, other->scale_uv_);
    std::swap(flip_u_, other->flip_u_);
    std::swap(flip_v_, other->flip_v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Operation_TextureStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Operation_TextureStage_descriptor_;
  metadata.reflection = CMsgPaintKit_Operation_TextureStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_Operation_CombineStage::kAdjustBlackFieldNumber;
const int CMsgPaintKit_Operation_CombineStage::kAdjustOffsetFieldNumber;
const int CMsgPaintKit_Operation_CombineStage::kAdjustGammaFieldNumber;
const int CMsgPaintKit_Operation_CombineStage::kRotationFieldNumber;
const int CMsgPaintKit_Operation_CombineStage::kTranslateUFieldNumber;
const int CMsgPaintKit_Operation_CombineStage::kTranslateVFieldNumber;
const int CMsgPaintKit_Operation_CombineStage::kScaleUvFieldNumber;
const int CMsgPaintKit_Operation_CombineStage::kFlipUFieldNumber;
const int CMsgPaintKit_Operation_CombineStage::kFlipVFieldNumber;
const int CMsgPaintKit_Operation_CombineStage::kOperationNodeFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Operation_CombineStage::CMsgPaintKit_Operation_CombineStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Operation_CombineStage)
}

void CMsgPaintKit_Operation_CombineStage::InitAsDefaultInstance() {
  adjust_black_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  adjust_offset_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  adjust_gamma_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  rotation_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  translate_u_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  translate_v_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  scale_uv_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  flip_u_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  flip_v_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
}

CMsgPaintKit_Operation_CombineStage::CMsgPaintKit_Operation_CombineStage(const CMsgPaintKit_Operation_CombineStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_CombineStage)
}

void CMsgPaintKit_Operation_CombineStage::SharedCtor() {
  _cached_size_ = 0;
  adjust_black_ = NULL;
  adjust_offset_ = NULL;
  adjust_gamma_ = NULL;
  rotation_ = NULL;
  translate_u_ = NULL;
  translate_v_ = NULL;
  scale_uv_ = NULL;
  flip_u_ = NULL;
  flip_v_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Operation_CombineStage::~CMsgPaintKit_Operation_CombineStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_CombineStage)
  SharedDtor();
}

void CMsgPaintKit_Operation_CombineStage::SharedDtor() {
  if (this != default_instance_) {
    delete adjust_black_;
    delete adjust_offset_;
    delete adjust_gamma_;
    delete rotation_;
    delete translate_u_;
    delete translate_v_;
    delete scale_uv_;
    delete flip_u_;
    delete flip_v_;
  }
}

void CMsgPaintKit_Operation_CombineStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_CombineStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Operation_CombineStage_descriptor_;
}

const CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_Operation_CombineStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_Operation_CombineStage::default_instance_ = NULL;

CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_Operation_CombineStage::New() const {
  return new CMsgPaintKit_Operation_CombineStage;
}

void CMsgPaintKit_Operation_CombineStage::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_adjust_black()) {
      if (adjust_black_ != NULL) adjust_black_->::CMsgVarField::Clear();
    }
    if (has_adjust_offset()) {
      if (adjust_offset_ != NULL) adjust_offset_->::CMsgVarField::Clear();
    }
    if (has_adjust_gamma()) {
      if (adjust_gamma_ != NULL) adjust_gamma_->::CMsgVarField::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::CMsgVarField::Clear();
    }
    if (has_translate_u()) {
      if (translate_u_ != NULL) translate_u_->::CMsgVarField::Clear();
    }
    if (has_translate_v()) {
      if (translate_v_ != NULL) translate_v_->::CMsgVarField::Clear();
    }
    if (has_scale_uv()) {
      if (scale_uv_ != NULL) scale_uv_->::CMsgVarField::Clear();
    }
    if (has_flip_u()) {
      if (flip_u_ != NULL) flip_u_->::CMsgVarField::Clear();
    }
  }
  if (has_flip_v()) {
    if (flip_v_ != NULL) flip_v_->::CMsgVarField::Clear();
  }
  operation_node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Operation_CombineStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Operation_CombineStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVarField adjust_black = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjust_black()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_adjust_offset;
        break;
      }

      // optional .CMsgVarField adjust_offset = 2;
      case 2: {
        if (tag == 18) {
         parse_adjust_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjust_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_adjust_gamma;
        break;
      }

      // optional .CMsgVarField adjust_gamma = 3;
      case 3: {
        if (tag == 26) {
         parse_adjust_gamma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjust_gamma()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rotation;
        break;
      }

      // optional .CMsgVarField rotation = 4;
      case 4: {
        if (tag == 34) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_translate_u;
        break;
      }

      // optional .CMsgVarField translate_u = 5;
      case 5: {
        if (tag == 42) {
         parse_translate_u:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translate_u()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_translate_v;
        break;
      }

      // optional .CMsgVarField translate_v = 6;
      case 6: {
        if (tag == 50) {
         parse_translate_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translate_v()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scale_uv;
        break;
      }

      // optional .CMsgVarField scale_uv = 7;
      case 7: {
        if (tag == 58) {
         parse_scale_uv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_uv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_flip_u;
        break;
      }

      // optional .CMsgVarField flip_u = 8;
      case 8: {
        if (tag == 66) {
         parse_flip_u:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flip_u()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_flip_v;
        break;
      }

      // optional .CMsgVarField flip_v = 9;
      case 9: {
        if (tag == 74) {
         parse_flip_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flip_v()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_operation_node;
        break;
      }

      // repeated .CMsgPaintKit_OperationNode operation_node = 11;
      case 11: {
        if (tag == 90) {
         parse_operation_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operation_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_operation_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Operation_CombineStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Operation_CombineStage)
  return false;
#undef DO_
}

void CMsgPaintKit_Operation_CombineStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Operation_CombineStage)
  // optional .CMsgVarField adjust_black = 1;
  if (has_adjust_black()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->adjust_black(), output);
  }

  // optional .CMsgVarField adjust_offset = 2;
  if (has_adjust_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->adjust_offset(), output);
  }

  // optional .CMsgVarField adjust_gamma = 3;
  if (has_adjust_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->adjust_gamma(), output);
  }

  // optional .CMsgVarField rotation = 4;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rotation(), output);
  }

  // optional .CMsgVarField translate_u = 5;
  if (has_translate_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->translate_u(), output);
  }

  // optional .CMsgVarField translate_v = 6;
  if (has_translate_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->translate_v(), output);
  }

  // optional .CMsgVarField scale_uv = 7;
  if (has_scale_uv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->scale_uv(), output);
  }

  // optional .CMsgVarField flip_u = 8;
  if (has_flip_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->flip_u(), output);
  }

  // optional .CMsgVarField flip_v = 9;
  if (has_flip_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->flip_v(), output);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 11;
  for (int i = 0; i < this->operation_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->operation_node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Operation_CombineStage)
}

::google::protobuf::uint8* CMsgPaintKit_Operation_CombineStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_CombineStage)
  // optional .CMsgVarField adjust_black = 1;
  if (has_adjust_black()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->adjust_black(), target);
  }

  // optional .CMsgVarField adjust_offset = 2;
  if (has_adjust_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->adjust_offset(), target);
  }

  // optional .CMsgVarField adjust_gamma = 3;
  if (has_adjust_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->adjust_gamma(), target);
  }

  // optional .CMsgVarField rotation = 4;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rotation(), target);
  }

  // optional .CMsgVarField translate_u = 5;
  if (has_translate_u()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->translate_u(), target);
  }

  // optional .CMsgVarField translate_v = 6;
  if (has_translate_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->translate_v(), target);
  }

  // optional .CMsgVarField scale_uv = 7;
  if (has_scale_uv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->scale_uv(), target);
  }

  // optional .CMsgVarField flip_u = 8;
  if (has_flip_u()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->flip_u(), target);
  }

  // optional .CMsgVarField flip_v = 9;
  if (has_flip_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->flip_v(), target);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 11;
  for (int i = 0; i < this->operation_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->operation_node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_CombineStage)
  return target;
}

int CMsgPaintKit_Operation_CombineStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVarField adjust_black = 1;
    if (has_adjust_black()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjust_black());
    }

    // optional .CMsgVarField adjust_offset = 2;
    if (has_adjust_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjust_offset());
    }

    // optional .CMsgVarField adjust_gamma = 3;
    if (has_adjust_gamma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjust_gamma());
    }

    // optional .CMsgVarField rotation = 4;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // optional .CMsgVarField translate_u = 5;
    if (has_translate_u()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translate_u());
    }

    // optional .CMsgVarField translate_v = 6;
    if (has_translate_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translate_v());
    }

    // optional .CMsgVarField scale_uv = 7;
    if (has_scale_uv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale_uv());
    }

    // optional .CMsgVarField flip_u = 8;
    if (has_flip_u()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flip_u());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgVarField flip_v = 9;
    if (has_flip_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flip_v());
    }

  }
  // repeated .CMsgPaintKit_OperationNode operation_node = 11;
  total_size += 1 * this->operation_node_size();
  for (int i = 0; i < this->operation_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operation_node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Operation_CombineStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Operation_CombineStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Operation_CombineStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_CombineStage::MergeFrom(const CMsgPaintKit_Operation_CombineStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  operation_node_.MergeFrom(from.operation_node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adjust_black()) {
      mutable_adjust_black()->::CMsgVarField::MergeFrom(from.adjust_black());
    }
    if (from.has_adjust_offset()) {
      mutable_adjust_offset()->::CMsgVarField::MergeFrom(from.adjust_offset());
    }
    if (from.has_adjust_gamma()) {
      mutable_adjust_gamma()->::CMsgVarField::MergeFrom(from.adjust_gamma());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::CMsgVarField::MergeFrom(from.rotation());
    }
    if (from.has_translate_u()) {
      mutable_translate_u()->::CMsgVarField::MergeFrom(from.translate_u());
    }
    if (from.has_translate_v()) {
      mutable_translate_v()->::CMsgVarField::MergeFrom(from.translate_v());
    }
    if (from.has_scale_uv()) {
      mutable_scale_uv()->::CMsgVarField::MergeFrom(from.scale_uv());
    }
    if (from.has_flip_u()) {
      mutable_flip_u()->::CMsgVarField::MergeFrom(from.flip_u());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flip_v()) {
      mutable_flip_v()->::CMsgVarField::MergeFrom(from.flip_v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Operation_CombineStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_CombineStage::CopyFrom(const CMsgPaintKit_Operation_CombineStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_CombineStage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->operation_node())) return false;
  return true;
}

void CMsgPaintKit_Operation_CombineStage::Swap(CMsgPaintKit_Operation_CombineStage* other) {
  if (other != this) {
    std::swap(adjust_black_, other->adjust_black_);
    std::swap(adjust_offset_, other->adjust_offset_);
    std::swap(adjust_gamma_, other->adjust_gamma_);
    std::swap(rotation_, other->rotation_);
    std::swap(translate_u_, other->translate_u_);
    std::swap(translate_v_, other->translate_v_);
    std::swap(scale_uv_, other->scale_uv_);
    std::swap(flip_u_, other->flip_u_);
    std::swap(flip_v_, other->flip_v_);
    operation_node_.Swap(&other->operation_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Operation_CombineStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Operation_CombineStage_descriptor_;
  metadata.reflection = CMsgPaintKit_Operation_CombineStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_Operation_SelectStage::kGroupsFieldNumber;
const int CMsgPaintKit_Operation_SelectStage::kSelectFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Operation_SelectStage::CMsgPaintKit_Operation_SelectStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Operation_SelectStage)
}

void CMsgPaintKit_Operation_SelectStage::InitAsDefaultInstance() {
  groups_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
}

CMsgPaintKit_Operation_SelectStage::CMsgPaintKit_Operation_SelectStage(const CMsgPaintKit_Operation_SelectStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_SelectStage)
}

void CMsgPaintKit_Operation_SelectStage::SharedCtor() {
  _cached_size_ = 0;
  groups_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Operation_SelectStage::~CMsgPaintKit_Operation_SelectStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_SelectStage)
  SharedDtor();
}

void CMsgPaintKit_Operation_SelectStage::SharedDtor() {
  if (this != default_instance_) {
    delete groups_;
  }
}

void CMsgPaintKit_Operation_SelectStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_SelectStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Operation_SelectStage_descriptor_;
}

const CMsgPaintKit_Operation_SelectStage& CMsgPaintKit_Operation_SelectStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Operation_SelectStage* CMsgPaintKit_Operation_SelectStage::default_instance_ = NULL;

CMsgPaintKit_Operation_SelectStage* CMsgPaintKit_Operation_SelectStage::New() const {
  return new CMsgPaintKit_Operation_SelectStage;
}

void CMsgPaintKit_Operation_SelectStage::Clear() {
  if (has_groups()) {
    if (groups_ != NULL) groups_->::CMsgVarField::Clear();
  }
  select_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Operation_SelectStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Operation_SelectStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVarField groups = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_select;
        break;
      }

      // repeated .CMsgVarField select = 2;
      case 2: {
        if (tag == 18) {
         parse_select:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_select()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_select;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Operation_SelectStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Operation_SelectStage)
  return false;
#undef DO_
}

void CMsgPaintKit_Operation_SelectStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Operation_SelectStage)
  // optional .CMsgVarField groups = 1;
  if (has_groups()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(), output);
  }

  // repeated .CMsgVarField select = 2;
  for (int i = 0; i < this->select_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->select(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Operation_SelectStage)
}

::google::protobuf::uint8* CMsgPaintKit_Operation_SelectStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_SelectStage)
  // optional .CMsgVarField groups = 1;
  if (has_groups()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groups(), target);
  }

  // repeated .CMsgVarField select = 2;
  for (int i = 0; i < this->select_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->select(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_SelectStage)
  return target;
}

int CMsgPaintKit_Operation_SelectStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVarField groups = 1;
    if (has_groups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups());
    }

  }
  // repeated .CMsgVarField select = 2;
  total_size += 1 * this->select_size();
  for (int i = 0; i < this->select_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->select(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Operation_SelectStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Operation_SelectStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Operation_SelectStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_SelectStage::MergeFrom(const CMsgPaintKit_Operation_SelectStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  select_.MergeFrom(from.select_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groups()) {
      mutable_groups()->::CMsgVarField::MergeFrom(from.groups());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Operation_SelectStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_SelectStage::CopyFrom(const CMsgPaintKit_Operation_SelectStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_SelectStage::IsInitialized() const {

  return true;
}

void CMsgPaintKit_Operation_SelectStage::Swap(CMsgPaintKit_Operation_SelectStage* other) {
  if (other != this) {
    std::swap(groups_, other->groups_);
    select_.Swap(&other->select_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Operation_SelectStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Operation_SelectStage_descriptor_;
  metadata.reflection = CMsgPaintKit_Operation_SelectStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_Operation_Sticker::kBaseFieldNumber;
const int CMsgPaintKit_Operation_Sticker::kWeightFieldNumber;
const int CMsgPaintKit_Operation_Sticker::kSpecFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Operation_Sticker::CMsgPaintKit_Operation_Sticker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Operation_Sticker)
}

void CMsgPaintKit_Operation_Sticker::InitAsDefaultInstance() {
  base_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  weight_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  spec_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
}

CMsgPaintKit_Operation_Sticker::CMsgPaintKit_Operation_Sticker(const CMsgPaintKit_Operation_Sticker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_Sticker)
}

void CMsgPaintKit_Operation_Sticker::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  weight_ = NULL;
  spec_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Operation_Sticker::~CMsgPaintKit_Operation_Sticker() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_Sticker)
  SharedDtor();
}

void CMsgPaintKit_Operation_Sticker::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete weight_;
    delete spec_;
  }
}

void CMsgPaintKit_Operation_Sticker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_Sticker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Operation_Sticker_descriptor_;
}

const CMsgPaintKit_Operation_Sticker& CMsgPaintKit_Operation_Sticker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Operation_Sticker* CMsgPaintKit_Operation_Sticker::default_instance_ = NULL;

CMsgPaintKit_Operation_Sticker* CMsgPaintKit_Operation_Sticker::New() const {
  return new CMsgPaintKit_Operation_Sticker;
}

void CMsgPaintKit_Operation_Sticker::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_base()) {
      if (base_ != NULL) base_->::CMsgVarField::Clear();
    }
    if (has_weight()) {
      if (weight_ != NULL) weight_->::CMsgVarField::Clear();
    }
    if (has_spec()) {
      if (spec_ != NULL) spec_->::CMsgVarField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Operation_Sticker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Operation_Sticker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVarField base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_weight;
        break;
      }

      // optional .CMsgVarField weight = 2;
      case 2: {
        if (tag == 18) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spec;
        break;
      }

      // optional .CMsgVarField spec = 3;
      case 3: {
        if (tag == 26) {
         parse_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Operation_Sticker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Operation_Sticker)
  return false;
#undef DO_
}

void CMsgPaintKit_Operation_Sticker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Operation_Sticker)
  // optional .CMsgVarField base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .CMsgVarField weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->weight(), output);
  }

  // optional .CMsgVarField spec = 3;
  if (has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Operation_Sticker)
}

::google::protobuf::uint8* CMsgPaintKit_Operation_Sticker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_Sticker)
  // optional .CMsgVarField base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .CMsgVarField weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->weight(), target);
  }

  // optional .CMsgVarField spec = 3;
  if (has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_Sticker)
  return target;
}

int CMsgPaintKit_Operation_Sticker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVarField base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .CMsgVarField weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight());
    }

    // optional .CMsgVarField spec = 3;
    if (has_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Operation_Sticker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Operation_Sticker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Operation_Sticker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_Sticker::MergeFrom(const CMsgPaintKit_Operation_Sticker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CMsgVarField::MergeFrom(from.base());
    }
    if (from.has_weight()) {
      mutable_weight()->::CMsgVarField::MergeFrom(from.weight());
    }
    if (from.has_spec()) {
      mutable_spec()->::CMsgVarField::MergeFrom(from.spec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Operation_Sticker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_Sticker::CopyFrom(const CMsgPaintKit_Operation_Sticker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_Sticker::IsInitialized() const {

  return true;
}

void CMsgPaintKit_Operation_Sticker::Swap(CMsgPaintKit_Operation_Sticker* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(weight_, other->weight_);
    std::swap(spec_, other->spec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Operation_Sticker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Operation_Sticker_descriptor_;
  metadata.reflection = CMsgPaintKit_Operation_Sticker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_Operation_StickerStage::kStickerFieldNumber;
const int CMsgPaintKit_Operation_StickerStage::kDestTlFieldNumber;
const int CMsgPaintKit_Operation_StickerStage::kDestTrFieldNumber;
const int CMsgPaintKit_Operation_StickerStage::kDestBlFieldNumber;
const int CMsgPaintKit_Operation_StickerStage::kAdjustBlackFieldNumber;
const int CMsgPaintKit_Operation_StickerStage::kAdjustOffsetFieldNumber;
const int CMsgPaintKit_Operation_StickerStage::kAdjustGammaFieldNumber;
const int CMsgPaintKit_Operation_StickerStage::kOperationNodeFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Operation_StickerStage::CMsgPaintKit_Operation_StickerStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Operation_StickerStage)
}

void CMsgPaintKit_Operation_StickerStage::InitAsDefaultInstance() {
  dest_tl_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  dest_tr_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  dest_bl_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  adjust_black_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  adjust_offset_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
  adjust_gamma_ = const_cast< ::CMsgVarField*>(&::CMsgVarField::default_instance());
}

CMsgPaintKit_Operation_StickerStage::CMsgPaintKit_Operation_StickerStage(const CMsgPaintKit_Operation_StickerStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation_StickerStage)
}

void CMsgPaintKit_Operation_StickerStage::SharedCtor() {
  _cached_size_ = 0;
  dest_tl_ = NULL;
  dest_tr_ = NULL;
  dest_bl_ = NULL;
  adjust_black_ = NULL;
  adjust_offset_ = NULL;
  adjust_gamma_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Operation_StickerStage::~CMsgPaintKit_Operation_StickerStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation_StickerStage)
  SharedDtor();
}

void CMsgPaintKit_Operation_StickerStage::SharedDtor() {
  if (this != default_instance_) {
    delete dest_tl_;
    delete dest_tr_;
    delete dest_bl_;
    delete adjust_black_;
    delete adjust_offset_;
    delete adjust_gamma_;
  }
}

void CMsgPaintKit_Operation_StickerStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation_StickerStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Operation_StickerStage_descriptor_;
}

const CMsgPaintKit_Operation_StickerStage& CMsgPaintKit_Operation_StickerStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Operation_StickerStage* CMsgPaintKit_Operation_StickerStage::default_instance_ = NULL;

CMsgPaintKit_Operation_StickerStage* CMsgPaintKit_Operation_StickerStage::New() const {
  return new CMsgPaintKit_Operation_StickerStage;
}

void CMsgPaintKit_Operation_StickerStage::Clear() {
  if (_has_bits_[0 / 32] & 126) {
    if (has_dest_tl()) {
      if (dest_tl_ != NULL) dest_tl_->::CMsgVarField::Clear();
    }
    if (has_dest_tr()) {
      if (dest_tr_ != NULL) dest_tr_->::CMsgVarField::Clear();
    }
    if (has_dest_bl()) {
      if (dest_bl_ != NULL) dest_bl_->::CMsgVarField::Clear();
    }
    if (has_adjust_black()) {
      if (adjust_black_ != NULL) adjust_black_->::CMsgVarField::Clear();
    }
    if (has_adjust_offset()) {
      if (adjust_offset_ != NULL) adjust_offset_->::CMsgVarField::Clear();
    }
    if (has_adjust_gamma()) {
      if (adjust_gamma_ != NULL) adjust_gamma_->::CMsgVarField::Clear();
    }
  }
  sticker_.Clear();
  operation_node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Operation_StickerStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Operation_StickerStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
      case 1: {
        if (tag == 10) {
         parse_sticker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sticker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_sticker;
        if (input->ExpectTag(18)) goto parse_dest_tl;
        break;
      }

      // optional .CMsgVarField dest_tl = 2;
      case 2: {
        if (tag == 18) {
         parse_dest_tl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_tl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dest_tr;
        break;
      }

      // optional .CMsgVarField dest_tr = 3;
      case 3: {
        if (tag == 26) {
         parse_dest_tr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_tr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dest_bl;
        break;
      }

      // optional .CMsgVarField dest_bl = 4;
      case 4: {
        if (tag == 34) {
         parse_dest_bl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_bl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_adjust_black;
        break;
      }

      // optional .CMsgVarField adjust_black = 5;
      case 5: {
        if (tag == 42) {
         parse_adjust_black:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjust_black()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adjust_offset;
        break;
      }

      // optional .CMsgVarField adjust_offset = 6;
      case 6: {
        if (tag == 50) {
         parse_adjust_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjust_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_adjust_gamma;
        break;
      }

      // optional .CMsgVarField adjust_gamma = 7;
      case 7: {
        if (tag == 58) {
         parse_adjust_gamma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjust_gamma()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_operation_node;
        break;
      }

      // repeated .CMsgPaintKit_OperationNode operation_node = 9;
      case 9: {
        if (tag == 74) {
         parse_operation_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operation_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_operation_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Operation_StickerStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Operation_StickerStage)
  return false;
#undef DO_
}

void CMsgPaintKit_Operation_StickerStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Operation_StickerStage)
  // repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
  for (int i = 0; i < this->sticker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sticker(i), output);
  }

  // optional .CMsgVarField dest_tl = 2;
  if (has_dest_tl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dest_tl(), output);
  }

  // optional .CMsgVarField dest_tr = 3;
  if (has_dest_tr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dest_tr(), output);
  }

  // optional .CMsgVarField dest_bl = 4;
  if (has_dest_bl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dest_bl(), output);
  }

  // optional .CMsgVarField adjust_black = 5;
  if (has_adjust_black()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->adjust_black(), output);
  }

  // optional .CMsgVarField adjust_offset = 6;
  if (has_adjust_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->adjust_offset(), output);
  }

  // optional .CMsgVarField adjust_gamma = 7;
  if (has_adjust_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->adjust_gamma(), output);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 9;
  for (int i = 0; i < this->operation_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->operation_node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Operation_StickerStage)
}

::google::protobuf::uint8* CMsgPaintKit_Operation_StickerStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation_StickerStage)
  // repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
  for (int i = 0; i < this->sticker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sticker(i), target);
  }

  // optional .CMsgVarField dest_tl = 2;
  if (has_dest_tl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dest_tl(), target);
  }

  // optional .CMsgVarField dest_tr = 3;
  if (has_dest_tr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dest_tr(), target);
  }

  // optional .CMsgVarField dest_bl = 4;
  if (has_dest_bl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dest_bl(), target);
  }

  // optional .CMsgVarField adjust_black = 5;
  if (has_adjust_black()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->adjust_black(), target);
  }

  // optional .CMsgVarField adjust_offset = 6;
  if (has_adjust_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->adjust_offset(), target);
  }

  // optional .CMsgVarField adjust_gamma = 7;
  if (has_adjust_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->adjust_gamma(), target);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 9;
  for (int i = 0; i < this->operation_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->operation_node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation_StickerStage)
  return target;
}

int CMsgPaintKit_Operation_StickerStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .CMsgVarField dest_tl = 2;
    if (has_dest_tl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_tl());
    }

    // optional .CMsgVarField dest_tr = 3;
    if (has_dest_tr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_tr());
    }

    // optional .CMsgVarField dest_bl = 4;
    if (has_dest_bl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_bl());
    }

    // optional .CMsgVarField adjust_black = 5;
    if (has_adjust_black()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjust_black());
    }

    // optional .CMsgVarField adjust_offset = 6;
    if (has_adjust_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjust_offset());
    }

    // optional .CMsgVarField adjust_gamma = 7;
    if (has_adjust_gamma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjust_gamma());
    }

  }
  // repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
  total_size += 1 * this->sticker_size();
  for (int i = 0; i < this->sticker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sticker(i));
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 9;
  total_size += 1 * this->operation_node_size();
  for (int i = 0; i < this->operation_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operation_node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Operation_StickerStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Operation_StickerStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Operation_StickerStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation_StickerStage::MergeFrom(const CMsgPaintKit_Operation_StickerStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  sticker_.MergeFrom(from.sticker_);
  operation_node_.MergeFrom(from.operation_node_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dest_tl()) {
      mutable_dest_tl()->::CMsgVarField::MergeFrom(from.dest_tl());
    }
    if (from.has_dest_tr()) {
      mutable_dest_tr()->::CMsgVarField::MergeFrom(from.dest_tr());
    }
    if (from.has_dest_bl()) {
      mutable_dest_bl()->::CMsgVarField::MergeFrom(from.dest_bl());
    }
    if (from.has_adjust_black()) {
      mutable_adjust_black()->::CMsgVarField::MergeFrom(from.adjust_black());
    }
    if (from.has_adjust_offset()) {
      mutable_adjust_offset()->::CMsgVarField::MergeFrom(from.adjust_offset());
    }
    if (from.has_adjust_gamma()) {
      mutable_adjust_gamma()->::CMsgVarField::MergeFrom(from.adjust_gamma());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Operation_StickerStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation_StickerStage::CopyFrom(const CMsgPaintKit_Operation_StickerStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation_StickerStage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->operation_node())) return false;
  return true;
}

void CMsgPaintKit_Operation_StickerStage::Swap(CMsgPaintKit_Operation_StickerStage* other) {
  if (other != this) {
    sticker_.Swap(&other->sticker_);
    std::swap(dest_tl_, other->dest_tl_);
    std::swap(dest_tr_, other->dest_tr_);
    std::swap(dest_bl_, other->dest_bl_);
    std::swap(adjust_black_, other->adjust_black_);
    std::swap(adjust_offset_, other->adjust_offset_);
    std::swap(adjust_gamma_, other->adjust_gamma_);
    operation_node_.Swap(&other->operation_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Operation_StickerStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Operation_StickerStage_descriptor_;
  metadata.reflection = CMsgPaintKit_Operation_StickerStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_OperationStage::kTextureLookupFieldNumber;
const int CMsgPaintKit_OperationStage::kCombineAddFieldNumber;
const int CMsgPaintKit_OperationStage::kCombineLerpFieldNumber;
const int CMsgPaintKit_OperationStage::kCombineMultiplyFieldNumber;
const int CMsgPaintKit_OperationStage::kSelectFieldNumber;
const int CMsgPaintKit_OperationStage::kApplyStickerFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_OperationStage::CMsgPaintKit_OperationStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_OperationStage)
}

void CMsgPaintKit_OperationStage::InitAsDefaultInstance() {
  CMsgPaintKit_OperationStage_default_oneof_instance_->texture_lookup_ = const_cast< ::CMsgPaintKit_Operation_TextureStage*>(&::CMsgPaintKit_Operation_TextureStage::default_instance());
  CMsgPaintKit_OperationStage_default_oneof_instance_->combine_add_ = const_cast< ::CMsgPaintKit_Operation_CombineStage*>(&::CMsgPaintKit_Operation_CombineStage::default_instance());
  CMsgPaintKit_OperationStage_default_oneof_instance_->combine_lerp_ = const_cast< ::CMsgPaintKit_Operation_CombineStage*>(&::CMsgPaintKit_Operation_CombineStage::default_instance());
  CMsgPaintKit_OperationStage_default_oneof_instance_->combine_multiply_ = const_cast< ::CMsgPaintKit_Operation_CombineStage*>(&::CMsgPaintKit_Operation_CombineStage::default_instance());
  CMsgPaintKit_OperationStage_default_oneof_instance_->select_ = const_cast< ::CMsgPaintKit_Operation_SelectStage*>(&::CMsgPaintKit_Operation_SelectStage::default_instance());
  CMsgPaintKit_OperationStage_default_oneof_instance_->apply_sticker_ = const_cast< ::CMsgPaintKit_Operation_StickerStage*>(&::CMsgPaintKit_Operation_StickerStage::default_instance());
}

CMsgPaintKit_OperationStage::CMsgPaintKit_OperationStage(const CMsgPaintKit_OperationStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_OperationStage)
}

void CMsgPaintKit_OperationStage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_stage();
}

CMsgPaintKit_OperationStage::~CMsgPaintKit_OperationStage() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_OperationStage)
  SharedDtor();
}

void CMsgPaintKit_OperationStage::SharedDtor() {
  if (has_stage()) {
    clear_stage();
  }
  if (this != default_instance_) {
  }
}

void CMsgPaintKit_OperationStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_OperationStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_OperationStage_descriptor_;
}

const CMsgPaintKit_OperationStage& CMsgPaintKit_OperationStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_OperationStage* CMsgPaintKit_OperationStage::default_instance_ = NULL;

CMsgPaintKit_OperationStage* CMsgPaintKit_OperationStage::New() const {
  return new CMsgPaintKit_OperationStage;
}

void CMsgPaintKit_OperationStage::clear_stage() {
  switch(stage_case()) {
    case kTextureLookup: {
      delete stage_.texture_lookup_;
      break;
    }
    case kCombineAdd: {
      delete stage_.combine_add_;
      break;
    }
    case kCombineLerp: {
      delete stage_.combine_lerp_;
      break;
    }
    case kCombineMultiply: {
      delete stage_.combine_multiply_;
      break;
    }
    case kSelect: {
      delete stage_.select_;
      break;
    }
    case kApplySticker: {
      delete stage_.apply_sticker_;
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STAGE_NOT_SET;
}


void CMsgPaintKit_OperationStage::Clear() {
  clear_stage();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_OperationStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_OperationStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture_lookup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_combine_add;
        break;
      }

      // optional .CMsgPaintKit_Operation_CombineStage combine_add = 2;
      case 2: {
        if (tag == 18) {
         parse_combine_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combine_add()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_combine_lerp;
        break;
      }

      // optional .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
      case 3: {
        if (tag == 26) {
         parse_combine_lerp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combine_lerp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_combine_multiply;
        break;
      }

      // optional .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
      case 4: {
        if (tag == 34) {
         parse_combine_multiply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combine_multiply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_select;
        break;
      }

      // optional .CMsgPaintKit_Operation_SelectStage select = 5;
      case 5: {
        if (tag == 42) {
         parse_select:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_apply_sticker;
        break;
      }

      // optional .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
      case 6: {
        if (tag == 50) {
         parse_apply_sticker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply_sticker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_OperationStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_OperationStage)
  return false;
#undef DO_
}

void CMsgPaintKit_OperationStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_OperationStage)
  // optional .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
  if (has_texture_lookup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->texture_lookup(), output);
  }

  // optional .CMsgPaintKit_Operation_CombineStage combine_add = 2;
  if (has_combine_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->combine_add(), output);
  }

  // optional .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
  if (has_combine_lerp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->combine_lerp(), output);
  }

  // optional .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
  if (has_combine_multiply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->combine_multiply(), output);
  }

  // optional .CMsgPaintKit_Operation_SelectStage select = 5;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->select(), output);
  }

  // optional .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
  if (has_apply_sticker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->apply_sticker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_OperationStage)
}

::google::protobuf::uint8* CMsgPaintKit_OperationStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_OperationStage)
  // optional .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
  if (has_texture_lookup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->texture_lookup(), target);
  }

  // optional .CMsgPaintKit_Operation_CombineStage combine_add = 2;
  if (has_combine_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->combine_add(), target);
  }

  // optional .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
  if (has_combine_lerp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->combine_lerp(), target);
  }

  // optional .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
  if (has_combine_multiply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->combine_multiply(), target);
  }

  // optional .CMsgPaintKit_Operation_SelectStage select = 5;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->select(), target);
  }

  // optional .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
  if (has_apply_sticker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->apply_sticker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_OperationStage)
  return target;
}

int CMsgPaintKit_OperationStage::ByteSize() const {
  int total_size = 0;

  switch (stage_case()) {
    // optional .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
    case kTextureLookup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture_lookup());
      break;
    }
    // optional .CMsgPaintKit_Operation_CombineStage combine_add = 2;
    case kCombineAdd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combine_add());
      break;
    }
    // optional .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
    case kCombineLerp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combine_lerp());
      break;
    }
    // optional .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
    case kCombineMultiply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combine_multiply());
      break;
    }
    // optional .CMsgPaintKit_Operation_SelectStage select = 5;
    case kSelect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->select());
      break;
    }
    // optional .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
    case kApplySticker: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply_sticker());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_OperationStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_OperationStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_OperationStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_OperationStage::MergeFrom(const CMsgPaintKit_OperationStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.stage_case()) {
    case kTextureLookup: {
      mutable_texture_lookup()->::CMsgPaintKit_Operation_TextureStage::MergeFrom(from.texture_lookup());
      break;
    }
    case kCombineAdd: {
      mutable_combine_add()->::CMsgPaintKit_Operation_CombineStage::MergeFrom(from.combine_add());
      break;
    }
    case kCombineLerp: {
      mutable_combine_lerp()->::CMsgPaintKit_Operation_CombineStage::MergeFrom(from.combine_lerp());
      break;
    }
    case kCombineMultiply: {
      mutable_combine_multiply()->::CMsgPaintKit_Operation_CombineStage::MergeFrom(from.combine_multiply());
      break;
    }
    case kSelect: {
      mutable_select()->::CMsgPaintKit_Operation_SelectStage::MergeFrom(from.select());
      break;
    }
    case kApplySticker: {
      mutable_apply_sticker()->::CMsgPaintKit_Operation_StickerStage::MergeFrom(from.apply_sticker());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_OperationStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_OperationStage::CopyFrom(const CMsgPaintKit_OperationStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_OperationStage::IsInitialized() const {

  if (has_combine_add()) {
    if (!this->combine_add().IsInitialized()) return false;
  }
  if (has_combine_lerp()) {
    if (!this->combine_lerp().IsInitialized()) return false;
  }
  if (has_combine_multiply()) {
    if (!this->combine_multiply().IsInitialized()) return false;
  }
  if (has_apply_sticker()) {
    if (!this->apply_sticker().IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_OperationStage::Swap(CMsgPaintKit_OperationStage* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_OperationStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_OperationStage_descriptor_;
  metadata.reflection = CMsgPaintKit_OperationStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_OperationNode::kStageFieldNumber;
const int CMsgPaintKit_OperationNode::kOperationTemplateFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_OperationNode::CMsgPaintKit_OperationNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_OperationNode)
}

void CMsgPaintKit_OperationNode::InitAsDefaultInstance() {
  CMsgPaintKit_OperationNode_default_oneof_instance_->stage_ = const_cast< ::CMsgPaintKit_OperationStage*>(&::CMsgPaintKit_OperationStage::default_instance());
  CMsgPaintKit_OperationNode_default_oneof_instance_->operation_template_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
}

CMsgPaintKit_OperationNode::CMsgPaintKit_OperationNode(const CMsgPaintKit_OperationNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_OperationNode)
}

void CMsgPaintKit_OperationNode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_node();
}

CMsgPaintKit_OperationNode::~CMsgPaintKit_OperationNode() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_OperationNode)
  SharedDtor();
}

void CMsgPaintKit_OperationNode::SharedDtor() {
  if (has_node()) {
    clear_node();
  }
  if (this != default_instance_) {
  }
}

void CMsgPaintKit_OperationNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_OperationNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_OperationNode_descriptor_;
}

const CMsgPaintKit_OperationNode& CMsgPaintKit_OperationNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_OperationNode* CMsgPaintKit_OperationNode::default_instance_ = NULL;

CMsgPaintKit_OperationNode* CMsgPaintKit_OperationNode::New() const {
  return new CMsgPaintKit_OperationNode;
}

void CMsgPaintKit_OperationNode::clear_node() {
  switch(node_case()) {
    case kStage: {
      delete node_.stage_;
      break;
    }
    case kOperationTemplate: {
      delete node_.operation_template_;
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void CMsgPaintKit_OperationNode::Clear() {
  clear_node();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_OperationNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_OperationNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgPaintKit_OperationStage stage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_operation_template;
        break;
      }

      // optional .CMsgProtoDefID operation_template = 2;
      case 2: {
        if (tag == 18) {
         parse_operation_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operation_template()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_OperationNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_OperationNode)
  return false;
#undef DO_
}

void CMsgPaintKit_OperationNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_OperationNode)
  // optional .CMsgPaintKit_OperationStage stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stage(), output);
  }

  // optional .CMsgProtoDefID operation_template = 2;
  if (has_operation_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->operation_template(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_OperationNode)
}

::google::protobuf::uint8* CMsgPaintKit_OperationNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_OperationNode)
  // optional .CMsgPaintKit_OperationStage stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stage(), target);
  }

  // optional .CMsgProtoDefID operation_template = 2;
  if (has_operation_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->operation_template(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_OperationNode)
  return target;
}

int CMsgPaintKit_OperationNode::ByteSize() const {
  int total_size = 0;

  switch (node_case()) {
    // optional .CMsgPaintKit_OperationStage stage = 1;
    case kStage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage());
      break;
    }
    // optional .CMsgProtoDefID operation_template = 2;
    case kOperationTemplate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operation_template());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_OperationNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_OperationNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_OperationNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_OperationNode::MergeFrom(const CMsgPaintKit_OperationNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.node_case()) {
    case kStage: {
      mutable_stage()->::CMsgPaintKit_OperationStage::MergeFrom(from.stage());
      break;
    }
    case kOperationTemplate: {
      mutable_operation_template()->::CMsgProtoDefID::MergeFrom(from.operation_template());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_OperationNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_OperationNode::CopyFrom(const CMsgPaintKit_OperationNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_OperationNode::IsInitialized() const {

  if (has_stage()) {
    if (!this->stage().IsInitialized()) return false;
  }
  if (has_operation_template()) {
    if (!this->operation_template().IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_OperationNode::Swap(CMsgPaintKit_OperationNode* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_OperationNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_OperationNode_descriptor_;
  metadata.reflection = CMsgPaintKit_OperationNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_Operation::kHeaderFieldNumber;
const int CMsgPaintKit_Operation::kOperationNodeFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Operation::CMsgPaintKit_Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Operation)
}

void CMsgPaintKit_Operation::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
}

CMsgPaintKit_Operation::CMsgPaintKit_Operation(const CMsgPaintKit_Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Operation)
}

void CMsgPaintKit_Operation::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Operation::~CMsgPaintKit_Operation() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Operation)
  SharedDtor();
}

void CMsgPaintKit_Operation::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void CMsgPaintKit_Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Operation_descriptor_;
}

const CMsgPaintKit_Operation& CMsgPaintKit_Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Operation* CMsgPaintKit_Operation::default_instance_ = NULL;

CMsgPaintKit_Operation* CMsgPaintKit_Operation::New() const {
  return new CMsgPaintKit_Operation;
}

void CMsgPaintKit_Operation::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  }
  operation_node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Operation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_operation_node;
        break;
      }

      // repeated .CMsgPaintKit_OperationNode operation_node = 2;
      case 2: {
        if (tag == 18) {
         parse_operation_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operation_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_operation_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Operation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Operation)
  return false;
#undef DO_
}

void CMsgPaintKit_Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Operation)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 2;
  for (int i = 0; i < this->operation_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->operation_node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Operation)
}

::google::protobuf::uint8* CMsgPaintKit_Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Operation)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .CMsgPaintKit_OperationNode operation_node = 2;
  for (int i = 0; i < this->operation_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->operation_node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Operation)
  return target;
}

int CMsgPaintKit_Operation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .CMsgPaintKit_OperationNode operation_node = 2;
  total_size += 1 * this->operation_node_size();
  for (int i = 0; i < this->operation_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operation_node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Operation::MergeFrom(const CMsgPaintKit_Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  operation_node_.MergeFrom(from.operation_node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Operation::CopyFrom(const CMsgPaintKit_Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Operation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->operation_node())) return false;
  return true;
}

void CMsgPaintKit_Operation::Swap(CMsgPaintKit_Operation* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    operation_node_.Swap(&other->operation_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Operation_descriptor_;
  metadata.reflection = CMsgPaintKit_Operation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_ItemDefinition_Definition::kOperationTemplateFieldNumber;
const int CMsgPaintKit_ItemDefinition_Definition::kVariableFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_ItemDefinition_Definition::CMsgPaintKit_ItemDefinition_Definition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_ItemDefinition.Definition)
}

void CMsgPaintKit_ItemDefinition_Definition::InitAsDefaultInstance() {
  operation_template_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
}

CMsgPaintKit_ItemDefinition_Definition::CMsgPaintKit_ItemDefinition_Definition(const CMsgPaintKit_ItemDefinition_Definition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_ItemDefinition.Definition)
}

void CMsgPaintKit_ItemDefinition_Definition::SharedCtor() {
  _cached_size_ = 0;
  operation_template_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_ItemDefinition_Definition::~CMsgPaintKit_ItemDefinition_Definition() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_ItemDefinition.Definition)
  SharedDtor();
}

void CMsgPaintKit_ItemDefinition_Definition::SharedDtor() {
  if (this != default_instance_) {
    delete operation_template_;
  }
}

void CMsgPaintKit_ItemDefinition_Definition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_ItemDefinition_Definition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_ItemDefinition_Definition_descriptor_;
}

const CMsgPaintKit_ItemDefinition_Definition& CMsgPaintKit_ItemDefinition_Definition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_ItemDefinition_Definition* CMsgPaintKit_ItemDefinition_Definition::default_instance_ = NULL;

CMsgPaintKit_ItemDefinition_Definition* CMsgPaintKit_ItemDefinition_Definition::New() const {
  return new CMsgPaintKit_ItemDefinition_Definition;
}

void CMsgPaintKit_ItemDefinition_Definition::Clear() {
  if (has_operation_template()) {
    if (operation_template_ != NULL) operation_template_->::CMsgProtoDefID::Clear();
  }
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_ItemDefinition_Definition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_ItemDefinition.Definition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgProtoDefID operation_template = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operation_template()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        break;
      }

      // repeated .CMsgVarField variable = 2;
      case 2: {
        if (tag == 18) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_ItemDefinition.Definition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_ItemDefinition.Definition)
  return false;
#undef DO_
}

void CMsgPaintKit_ItemDefinition_Definition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_ItemDefinition.Definition)
  // optional .CMsgProtoDefID operation_template = 1;
  if (has_operation_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operation_template(), output);
  }

  // repeated .CMsgVarField variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->variable(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_ItemDefinition.Definition)
}

::google::protobuf::uint8* CMsgPaintKit_ItemDefinition_Definition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_ItemDefinition.Definition)
  // optional .CMsgProtoDefID operation_template = 1;
  if (has_operation_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operation_template(), target);
  }

  // repeated .CMsgVarField variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->variable(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_ItemDefinition.Definition)
  return target;
}

int CMsgPaintKit_ItemDefinition_Definition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgProtoDefID operation_template = 1;
    if (has_operation_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operation_template());
    }

  }
  // repeated .CMsgVarField variable = 2;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_ItemDefinition_Definition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_ItemDefinition_Definition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_ItemDefinition_Definition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_ItemDefinition_Definition::MergeFrom(const CMsgPaintKit_ItemDefinition_Definition& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation_template()) {
      mutable_operation_template()->::CMsgProtoDefID::MergeFrom(from.operation_template());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_ItemDefinition_Definition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_ItemDefinition_Definition::CopyFrom(const CMsgPaintKit_ItemDefinition_Definition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_ItemDefinition_Definition::IsInitialized() const {

  if (has_operation_template()) {
    if (!this->operation_template().IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_ItemDefinition_Definition::Swap(CMsgPaintKit_ItemDefinition_Definition* other) {
  if (other != this) {
    std::swap(operation_template_, other->operation_template_);
    variable_.Swap(&other->variable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_ItemDefinition_Definition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_ItemDefinition_Definition_descriptor_;
  metadata.reflection = CMsgPaintKit_ItemDefinition_Definition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPaintKit_ItemDefinition::kHeaderFieldNumber;
const int CMsgPaintKit_ItemDefinition::kItemDefinitionIndexFieldNumber;
const int CMsgPaintKit_ItemDefinition::kVariableTemplateFieldNumber;
const int CMsgPaintKit_ItemDefinition::kDefinitionFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_ItemDefinition::CMsgPaintKit_ItemDefinition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_ItemDefinition)
}

void CMsgPaintKit_ItemDefinition::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
  variable_template_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
}

CMsgPaintKit_ItemDefinition::CMsgPaintKit_ItemDefinition(const CMsgPaintKit_ItemDefinition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_ItemDefinition)
}

void CMsgPaintKit_ItemDefinition::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  item_definition_index_ = 0u;
  variable_template_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_ItemDefinition::~CMsgPaintKit_ItemDefinition() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_ItemDefinition)
  SharedDtor();
}

void CMsgPaintKit_ItemDefinition::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete variable_template_;
  }
}

void CMsgPaintKit_ItemDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_ItemDefinition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_ItemDefinition_descriptor_;
}

const CMsgPaintKit_ItemDefinition& CMsgPaintKit_ItemDefinition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_ItemDefinition* CMsgPaintKit_ItemDefinition::default_instance_ = NULL;

CMsgPaintKit_ItemDefinition* CMsgPaintKit_ItemDefinition::New() const {
  return new CMsgPaintKit_ItemDefinition;
}

void CMsgPaintKit_ItemDefinition::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_header()) {
      if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
    }
    item_definition_index_ = 0u;
    if (has_variable_template()) {
      if (variable_template_ != NULL) variable_template_->::CMsgProtoDefID::Clear();
    }
  }
  definition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_ItemDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_ItemDefinition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_definition_index;
        break;
      }

      // required uint32 item_definition_index = 2;
      case 2: {
        if (tag == 16) {
         parse_item_definition_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_definition_index_)));
          set_has_item_definition_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_variable_template;
        break;
      }

      // optional .CMsgProtoDefID variable_template = 3;
      case 3: {
        if (tag == 26) {
         parse_variable_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variable_template()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_definition;
        break;
      }

      // repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4;
      case 4: {
        if (tag == 34) {
         parse_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_definition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_definition;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_ItemDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_ItemDefinition)
  return false;
#undef DO_
}

void CMsgPaintKit_ItemDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_ItemDefinition)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required uint32 item_definition_index = 2;
  if (has_item_definition_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_definition_index(), output);
  }

  // optional .CMsgProtoDefID variable_template = 3;
  if (has_variable_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->variable_template(), output);
  }

  // repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4;
  for (int i = 0; i < this->definition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->definition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_ItemDefinition)
}

::google::protobuf::uint8* CMsgPaintKit_ItemDefinition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_ItemDefinition)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required uint32 item_definition_index = 2;
  if (has_item_definition_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_definition_index(), target);
  }

  // optional .CMsgProtoDefID variable_template = 3;
  if (has_variable_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->variable_template(), target);
  }

  // repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4;
  for (int i = 0; i < this->definition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->definition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_ItemDefinition)
  return target;
}

int CMsgPaintKit_ItemDefinition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required uint32 item_definition_index = 2;
    if (has_item_definition_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_definition_index());
    }

    // optional .CMsgProtoDefID variable_template = 3;
    if (has_variable_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->variable_template());
    }

  }
  // repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4;
  total_size += 1 * this->definition_size();
  for (int i = 0; i < this->definition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->definition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_ItemDefinition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_ItemDefinition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_ItemDefinition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_ItemDefinition::MergeFrom(const CMsgPaintKit_ItemDefinition& from) {
  GOOGLE_CHECK_NE(&from, this);
  definition_.MergeFrom(from.definition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
    if (from.has_item_definition_index()) {
      set_item_definition_index(from.item_definition_index());
    }
    if (from.has_variable_template()) {
      mutable_variable_template()->::CMsgProtoDefID::MergeFrom(from.variable_template());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_ItemDefinition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_ItemDefinition::CopyFrom(const CMsgPaintKit_ItemDefinition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_ItemDefinition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_variable_template()) {
    if (!this->variable_template().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->definition())) return false;
  return true;
}

void CMsgPaintKit_ItemDefinition::Swap(CMsgPaintKit_ItemDefinition* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(item_definition_index_, other->item_definition_index_);
    std::swap(variable_template_, other->variable_template_);
    definition_.Swap(&other->definition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_ItemDefinition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_ItemDefinition_descriptor_;
  metadata.reflection = CMsgPaintKit_ItemDefinition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPaintKit_Definition_Item_ItemData::kCanApplyPaintkitFieldNumber;
const int CMsgPaintKit_Definition_Item_ItemData::kMaterialOverrideFieldNumber;
const int CMsgPaintKit_Definition_Item_ItemData::kVariableFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Definition_Item_ItemData::CMsgPaintKit_Definition_Item_ItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Definition.Item.ItemData)
}

void CMsgPaintKit_Definition_Item_ItemData::InitAsDefaultInstance() {
}

CMsgPaintKit_Definition_Item_ItemData::CMsgPaintKit_Definition_Item_ItemData(const CMsgPaintKit_Definition_Item_ItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Definition.Item.ItemData)
}

void CMsgPaintKit_Definition_Item_ItemData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  can_apply_paintkit_ = true;
  material_override_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Definition_Item_ItemData::~CMsgPaintKit_Definition_Item_ItemData() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Definition.Item.ItemData)
  SharedDtor();
}

void CMsgPaintKit_Definition_Item_ItemData::SharedDtor() {
  if (material_override_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_override_;
  }
  if (this != default_instance_) {
  }
}

void CMsgPaintKit_Definition_Item_ItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Definition_Item_ItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Definition_Item_ItemData_descriptor_;
}

const CMsgPaintKit_Definition_Item_ItemData& CMsgPaintKit_Definition_Item_ItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Definition_Item_ItemData* CMsgPaintKit_Definition_Item_ItemData::default_instance_ = NULL;

CMsgPaintKit_Definition_Item_ItemData* CMsgPaintKit_Definition_Item_ItemData::New() const {
  return new CMsgPaintKit_Definition_Item_ItemData;
}

void CMsgPaintKit_Definition_Item_ItemData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    can_apply_paintkit_ = true;
    if (has_material_override()) {
      if (material_override_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        material_override_->clear();
      }
    }
  }
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Definition_Item_ItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Definition.Item.ItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool can_apply_paintkit = 2 [default = true];
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_apply_paintkit_)));
          set_has_can_apply_paintkit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_material_override;
        break;
      }

      // optional string material_override = 3;
      case 3: {
        if (tag == 26) {
         parse_material_override:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_material_override()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->material_override().data(), this->material_override().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "material_override");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_variable;
        break;
      }

      // repeated .CMsgVarField variable = 4;
      case 4: {
        if (tag == 34) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_variable;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Definition.Item.ItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Definition.Item.ItemData)
  return false;
#undef DO_
}

void CMsgPaintKit_Definition_Item_ItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Definition.Item.ItemData)
  // optional bool can_apply_paintkit = 2 [default = true];
  if (has_can_apply_paintkit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_apply_paintkit(), output);
  }

  // optional string material_override = 3;
  if (has_material_override()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->material_override().data(), this->material_override().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "material_override");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->material_override(), output);
  }

  // repeated .CMsgVarField variable = 4;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->variable(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Definition.Item.ItemData)
}

::google::protobuf::uint8* CMsgPaintKit_Definition_Item_ItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Definition.Item.ItemData)
  // optional bool can_apply_paintkit = 2 [default = true];
  if (has_can_apply_paintkit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_apply_paintkit(), target);
  }

  // optional string material_override = 3;
  if (has_material_override()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->material_override().data(), this->material_override().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "material_override");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->material_override(), target);
  }

  // repeated .CMsgVarField variable = 4;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->variable(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Definition.Item.ItemData)
  return target;
}

int CMsgPaintKit_Definition_Item_ItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool can_apply_paintkit = 2 [default = true];
    if (has_can_apply_paintkit()) {
      total_size += 1 + 1;
    }

    // optional string material_override = 3;
    if (has_material_override()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->material_override());
    }

  }
  // repeated .CMsgVarField variable = 4;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Definition_Item_ItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Definition_Item_ItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Definition_Item_ItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Definition_Item_ItemData::MergeFrom(const CMsgPaintKit_Definition_Item_ItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_apply_paintkit()) {
      set_can_apply_paintkit(from.can_apply_paintkit());
    }
    if (from.has_material_override()) {
      set_material_override(from.material_override());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Definition_Item_ItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Definition_Item_ItemData::CopyFrom(const CMsgPaintKit_Definition_Item_ItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Definition_Item_ItemData::IsInitialized() const {

  return true;
}

void CMsgPaintKit_Definition_Item_ItemData::Swap(CMsgPaintKit_Definition_Item_ItemData* other) {
  if (other != this) {
    std::swap(can_apply_paintkit_, other->can_apply_paintkit_);
    std::swap(material_override_, other->material_override_);
    variable_.Swap(&other->variable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Definition_Item_ItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Definition_Item_ItemData_descriptor_;
  metadata.reflection = CMsgPaintKit_Definition_Item_ItemData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPaintKit_Definition_Item::kItemDefinitionTemplateFieldNumber;
const int CMsgPaintKit_Definition_Item::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Definition_Item::CMsgPaintKit_Definition_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Definition.Item)
}

void CMsgPaintKit_Definition_Item::InitAsDefaultInstance() {
  item_definition_template_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
  data_ = const_cast< ::CMsgPaintKit_Definition_Item_ItemData*>(&::CMsgPaintKit_Definition_Item_ItemData::default_instance());
}

CMsgPaintKit_Definition_Item::CMsgPaintKit_Definition_Item(const CMsgPaintKit_Definition_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Definition.Item)
}

void CMsgPaintKit_Definition_Item::SharedCtor() {
  _cached_size_ = 0;
  item_definition_template_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Definition_Item::~CMsgPaintKit_Definition_Item() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Definition.Item)
  SharedDtor();
}

void CMsgPaintKit_Definition_Item::SharedDtor() {
  if (this != default_instance_) {
    delete item_definition_template_;
    delete data_;
  }
}

void CMsgPaintKit_Definition_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Definition_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Definition_Item_descriptor_;
}

const CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition_Item::default_instance_ = NULL;

CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition_Item::New() const {
  return new CMsgPaintKit_Definition_Item;
}

void CMsgPaintKit_Definition_Item::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_item_definition_template()) {
      if (item_definition_template_ != NULL) item_definition_template_->::CMsgProtoDefID::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::CMsgPaintKit_Definition_Item_ItemData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Definition_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Definition.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefID item_definition_template = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_definition_template()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Definition.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Definition.Item)
  return false;
#undef DO_
}

void CMsgPaintKit_Definition_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Definition.Item)
  // required .CMsgProtoDefID item_definition_template = 1;
  if (has_item_definition_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_definition_template(), output);
  }

  // optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Definition.Item)
}

::google::protobuf::uint8* CMsgPaintKit_Definition_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Definition.Item)
  // required .CMsgProtoDefID item_definition_template = 1;
  if (has_item_definition_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_definition_template(), target);
  }

  // optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Definition.Item)
  return target;
}

int CMsgPaintKit_Definition_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefID item_definition_template = 1;
    if (has_item_definition_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_definition_template());
    }

    // optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Definition_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Definition_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Definition_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Definition_Item::MergeFrom(const CMsgPaintKit_Definition_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_definition_template()) {
      mutable_item_definition_template()->::CMsgProtoDefID::MergeFrom(from.item_definition_template());
    }
    if (from.has_data()) {
      mutable_data()->::CMsgPaintKit_Definition_Item_ItemData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Definition_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Definition_Item::CopyFrom(const CMsgPaintKit_Definition_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Definition_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item_definition_template()) {
    if (!this->item_definition_template().IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_Definition_Item::Swap(CMsgPaintKit_Definition_Item* other) {
  if (other != this) {
    std::swap(item_definition_template_, other->item_definition_template_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Definition_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Definition_Item_descriptor_;
  metadata.reflection = CMsgPaintKit_Definition_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPaintKit_Definition::kHeaderFieldNumber;
const int CMsgPaintKit_Definition::kLocDesctokenFieldNumber;
const int CMsgPaintKit_Definition::kOperationTemplateFieldNumber;
const int CMsgPaintKit_Definition::kHasTeamTexturesFieldNumber;
const int CMsgPaintKit_Definition::kItemFieldNumber;
const int CMsgPaintKit_Definition::kPaintkitToolFieldNumber;
const int CMsgPaintKit_Definition::kFlamethrowerFieldNumber;
const int CMsgPaintKit_Definition::kGrenadelauncherFieldNumber;
const int CMsgPaintKit_Definition::kKnifeFieldNumber;
const int CMsgPaintKit_Definition::kMedigunFieldNumber;
const int CMsgPaintKit_Definition::kMinigunFieldNumber;
const int CMsgPaintKit_Definition::kPistolFieldNumber;
const int CMsgPaintKit_Definition::kRevolverFieldNumber;
const int CMsgPaintKit_Definition::kRocketlauncherFieldNumber;
const int CMsgPaintKit_Definition::kScattergunFieldNumber;
const int CMsgPaintKit_Definition::kShotgunFieldNumber;
const int CMsgPaintKit_Definition::kSmgFieldNumber;
const int CMsgPaintKit_Definition::kSniperrifleFieldNumber;
const int CMsgPaintKit_Definition::kStickybombLauncherFieldNumber;
const int CMsgPaintKit_Definition::kUbersawFieldNumber;
const int CMsgPaintKit_Definition::kWrenchFieldNumber;
const int CMsgPaintKit_Definition::kAmputatorFieldNumber;
const int CMsgPaintKit_Definition::kAtomLauncherFieldNumber;
const int CMsgPaintKit_Definition::kBackScratcherFieldNumber;
const int CMsgPaintKit_Definition::kBattleaxeFieldNumber;
const int CMsgPaintKit_Definition::kBazaarSniperFieldNumber;
const int CMsgPaintKit_Definition::kBlackboxFieldNumber;
const int CMsgPaintKit_Definition::kClaidheamohmorFieldNumber;
const int CMsgPaintKit_Definition::kCrusadersCrossbowFieldNumber;
const int CMsgPaintKit_Definition::kDegreaserFieldNumber;
const int CMsgPaintKit_Definition::kDemoCannonFieldNumber;
const int CMsgPaintKit_Definition::kDemoSultanSwordFieldNumber;
const int CMsgPaintKit_Definition::kDetonatorFieldNumber;
const int CMsgPaintKit_Definition::kGatlingGunFieldNumber;
const int CMsgPaintKit_Definition::kHolymackerelFieldNumber;
const int CMsgPaintKit_Definition::kJagFieldNumber;
const int CMsgPaintKit_Definition::kLochnloadFieldNumber;
const int CMsgPaintKit_Definition::kPowerjackFieldNumber;
const int CMsgPaintKit_Definition::kQuadballFieldNumber;
const int CMsgPaintKit_Definition::kReserveShooterFieldNumber;
const int CMsgPaintKit_Definition::kRidingCropFieldNumber;
const int CMsgPaintKit_Definition::kRussianRiotFieldNumber;
const int CMsgPaintKit_Definition::kScimitarFieldNumber;
const int CMsgPaintKit_Definition::kScorchShotFieldNumber;
const int CMsgPaintKit_Definition::kShortstopFieldNumber;
const int CMsgPaintKit_Definition::kSodaPopperFieldNumber;
const int CMsgPaintKit_Definition::kTeleShotgunFieldNumber;
const int CMsgPaintKit_Definition::kTomislavFieldNumber;
const int CMsgPaintKit_Definition::kTrenchgunFieldNumber;
const int CMsgPaintKit_Definition::kWingerPistolFieldNumber;
#endif  // !_MSC_VER

CMsgPaintKit_Definition::CMsgPaintKit_Definition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgPaintKit_Definition)
}

void CMsgPaintKit_Definition::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
  operation_template_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
  paintkit_tool_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  flamethrower_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  grenadelauncher_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  knife_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  medigun_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  minigun_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  pistol_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  revolver_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  rocketlauncher_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  scattergun_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  shotgun_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  smg_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  sniperrifle_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  stickybomb_launcher_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  ubersaw_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  wrench_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  amputator_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  atom_launcher_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  back_scratcher_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  battleaxe_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  bazaar_sniper_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  blackbox_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  claidheamohmor_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  crusaders_crossbow_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  degreaser_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  demo_cannon_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  demo_sultan_sword_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  detonator_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  gatling_gun_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  holymackerel_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  jag_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  lochnload_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  powerjack_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  quadball_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  reserve_shooter_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  riding_crop_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  russian_riot_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  scimitar_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  scorch_shot_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  shortstop_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  soda_popper_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  tele_shotgun_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  tomislav_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  trenchgun_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
  winger_pistol_ = const_cast< ::CMsgPaintKit_Definition_Item*>(&::CMsgPaintKit_Definition_Item::default_instance());
}

CMsgPaintKit_Definition::CMsgPaintKit_Definition(const CMsgPaintKit_Definition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgPaintKit_Definition)
}

void CMsgPaintKit_Definition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  loc_desctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_template_ = NULL;
  has_team_textures_ = false;
  paintkit_tool_ = NULL;
  flamethrower_ = NULL;
  grenadelauncher_ = NULL;
  knife_ = NULL;
  medigun_ = NULL;
  minigun_ = NULL;
  pistol_ = NULL;
  revolver_ = NULL;
  rocketlauncher_ = NULL;
  scattergun_ = NULL;
  shotgun_ = NULL;
  smg_ = NULL;
  sniperrifle_ = NULL;
  stickybomb_launcher_ = NULL;
  ubersaw_ = NULL;
  wrench_ = NULL;
  amputator_ = NULL;
  atom_launcher_ = NULL;
  back_scratcher_ = NULL;
  battleaxe_ = NULL;
  bazaar_sniper_ = NULL;
  blackbox_ = NULL;
  claidheamohmor_ = NULL;
  crusaders_crossbow_ = NULL;
  degreaser_ = NULL;
  demo_cannon_ = NULL;
  demo_sultan_sword_ = NULL;
  detonator_ = NULL;
  gatling_gun_ = NULL;
  holymackerel_ = NULL;
  jag_ = NULL;
  lochnload_ = NULL;
  powerjack_ = NULL;
  quadball_ = NULL;
  reserve_shooter_ = NULL;
  riding_crop_ = NULL;
  russian_riot_ = NULL;
  scimitar_ = NULL;
  scorch_shot_ = NULL;
  shortstop_ = NULL;
  soda_popper_ = NULL;
  tele_shotgun_ = NULL;
  tomislav_ = NULL;
  trenchgun_ = NULL;
  winger_pistol_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPaintKit_Definition::~CMsgPaintKit_Definition() {
  // @@protoc_insertion_point(destructor:CMsgPaintKit_Definition)
  SharedDtor();
}

void CMsgPaintKit_Definition::SharedDtor() {
  if (loc_desctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loc_desctoken_;
  }
  if (this != default_instance_) {
    delete header_;
    delete operation_template_;
    delete paintkit_tool_;
    delete flamethrower_;
    delete grenadelauncher_;
    delete knife_;
    delete medigun_;
    delete minigun_;
    delete pistol_;
    delete revolver_;
    delete rocketlauncher_;
    delete scattergun_;
    delete shotgun_;
    delete smg_;
    delete sniperrifle_;
    delete stickybomb_launcher_;
    delete ubersaw_;
    delete wrench_;
    delete amputator_;
    delete atom_launcher_;
    delete back_scratcher_;
    delete battleaxe_;
    delete bazaar_sniper_;
    delete blackbox_;
    delete claidheamohmor_;
    delete crusaders_crossbow_;
    delete degreaser_;
    delete demo_cannon_;
    delete demo_sultan_sword_;
    delete detonator_;
    delete gatling_gun_;
    delete holymackerel_;
    delete jag_;
    delete lochnload_;
    delete powerjack_;
    delete quadball_;
    delete reserve_shooter_;
    delete riding_crop_;
    delete russian_riot_;
    delete scimitar_;
    delete scorch_shot_;
    delete shortstop_;
    delete soda_popper_;
    delete tele_shotgun_;
    delete tomislav_;
    delete trenchgun_;
    delete winger_pistol_;
  }
}

void CMsgPaintKit_Definition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPaintKit_Definition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgPaintKit_Definition_descriptor_;
}

const CMsgPaintKit_Definition& CMsgPaintKit_Definition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgPaintKit_Definition* CMsgPaintKit_Definition::default_instance_ = NULL;

CMsgPaintKit_Definition* CMsgPaintKit_Definition::New() const {
  return new CMsgPaintKit_Definition;
}

void CMsgPaintKit_Definition::Clear() {
  if (_has_bits_[0 / 32] & 239) {
    if (has_header()) {
      if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
    }
    if (has_loc_desctoken()) {
      if (loc_desctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loc_desctoken_->clear();
      }
    }
    if (has_operation_template()) {
      if (operation_template_ != NULL) operation_template_->::CMsgProtoDefID::Clear();
    }
    has_team_textures_ = false;
    if (has_paintkit_tool()) {
      if (paintkit_tool_ != NULL) paintkit_tool_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_flamethrower()) {
      if (flamethrower_ != NULL) flamethrower_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_grenadelauncher()) {
      if (grenadelauncher_ != NULL) grenadelauncher_->::CMsgPaintKit_Definition_Item::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_knife()) {
      if (knife_ != NULL) knife_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_medigun()) {
      if (medigun_ != NULL) medigun_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_minigun()) {
      if (minigun_ != NULL) minigun_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_pistol()) {
      if (pistol_ != NULL) pistol_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_revolver()) {
      if (revolver_ != NULL) revolver_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_rocketlauncher()) {
      if (rocketlauncher_ != NULL) rocketlauncher_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_scattergun()) {
      if (scattergun_ != NULL) scattergun_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_shotgun()) {
      if (shotgun_ != NULL) shotgun_->::CMsgPaintKit_Definition_Item::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_smg()) {
      if (smg_ != NULL) smg_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_sniperrifle()) {
      if (sniperrifle_ != NULL) sniperrifle_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_stickybomb_launcher()) {
      if (stickybomb_launcher_ != NULL) stickybomb_launcher_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_ubersaw()) {
      if (ubersaw_ != NULL) ubersaw_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_wrench()) {
      if (wrench_ != NULL) wrench_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_amputator()) {
      if (amputator_ != NULL) amputator_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_atom_launcher()) {
      if (atom_launcher_ != NULL) atom_launcher_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_back_scratcher()) {
      if (back_scratcher_ != NULL) back_scratcher_->::CMsgPaintKit_Definition_Item::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_battleaxe()) {
      if (battleaxe_ != NULL) battleaxe_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_bazaar_sniper()) {
      if (bazaar_sniper_ != NULL) bazaar_sniper_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_blackbox()) {
      if (blackbox_ != NULL) blackbox_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_claidheamohmor()) {
      if (claidheamohmor_ != NULL) claidheamohmor_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_crusaders_crossbow()) {
      if (crusaders_crossbow_ != NULL) crusaders_crossbow_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_degreaser()) {
      if (degreaser_ != NULL) degreaser_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_demo_cannon()) {
      if (demo_cannon_ != NULL) demo_cannon_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_demo_sultan_sword()) {
      if (demo_sultan_sword_ != NULL) demo_sultan_sword_->::CMsgPaintKit_Definition_Item::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_detonator()) {
      if (detonator_ != NULL) detonator_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_gatling_gun()) {
      if (gatling_gun_ != NULL) gatling_gun_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_holymackerel()) {
      if (holymackerel_ != NULL) holymackerel_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_jag()) {
      if (jag_ != NULL) jag_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_lochnload()) {
      if (lochnload_ != NULL) lochnload_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_powerjack()) {
      if (powerjack_ != NULL) powerjack_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_quadball()) {
      if (quadball_ != NULL) quadball_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_reserve_shooter()) {
      if (reserve_shooter_ != NULL) reserve_shooter_->::CMsgPaintKit_Definition_Item::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_riding_crop()) {
      if (riding_crop_ != NULL) riding_crop_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_russian_riot()) {
      if (russian_riot_ != NULL) russian_riot_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_scimitar()) {
      if (scimitar_ != NULL) scimitar_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_scorch_shot()) {
      if (scorch_shot_ != NULL) scorch_shot_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_shortstop()) {
      if (shortstop_ != NULL) shortstop_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_soda_popper()) {
      if (soda_popper_ != NULL) soda_popper_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_tele_shotgun()) {
      if (tele_shotgun_ != NULL) tele_shotgun_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_tomislav()) {
      if (tomislav_ != NULL) tomislav_->::CMsgPaintKit_Definition_Item::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 196608) {
    if (has_trenchgun()) {
      if (trenchgun_ != NULL) trenchgun_->::CMsgPaintKit_Definition_Item::Clear();
    }
    if (has_winger_pistol()) {
      if (winger_pistol_ != NULL) winger_pistol_->::CMsgPaintKit_Definition_Item::Clear();
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgPaintKit_Definition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgPaintKit_Definition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loc_desctoken;
        break;
      }

      // optional string loc_desctoken = 2;
      case 2: {
        if (tag == 18) {
         parse_loc_desctoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loc_desctoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loc_desctoken().data(), this->loc_desctoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loc_desctoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operation_template;
        break;
      }

      // optional .CMsgProtoDefID operation_template = 3;
      case 3: {
        if (tag == 26) {
         parse_operation_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operation_template()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_has_team_textures;
        break;
      }

      // optional bool has_team_textures = 4;
      case 4: {
        if (tag == 32) {
         parse_has_team_textures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_team_textures_)));
          set_has_has_team_textures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // repeated .CMsgPaintKit_Definition.Item item = 5;
      case 5: {
        if (tag == 42) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_item;
        if (input->ExpectTag(50)) goto parse_paintkit_tool;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
      case 6: {
        if (tag == 50) {
         parse_paintkit_tool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paintkit_tool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_flamethrower;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item flamethrower = 7;
      case 7: {
        if (tag == 58) {
         parse_flamethrower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flamethrower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_grenadelauncher;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
      case 8: {
        if (tag == 66) {
         parse_grenadelauncher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grenadelauncher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_knife;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item knife = 9;
      case 9: {
        if (tag == 74) {
         parse_knife:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_knife()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_medigun;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item medigun = 10;
      case 10: {
        if (tag == 82) {
         parse_medigun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medigun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_minigun;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item minigun = 11;
      case 11: {
        if (tag == 90) {
         parse_minigun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minigun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_pistol;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item pistol = 12;
      case 12: {
        if (tag == 98) {
         parse_pistol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pistol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_revolver;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item revolver = 13;
      case 13: {
        if (tag == 106) {
         parse_revolver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revolver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_rocketlauncher;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
      case 14: {
        if (tag == 114) {
         parse_rocketlauncher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rocketlauncher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_scattergun;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item scattergun = 15;
      case 15: {
        if (tag == 122) {
         parse_scattergun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scattergun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_shotgun;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item shotgun = 16;
      case 16: {
        if (tag == 130) {
         parse_shotgun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shotgun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_smg;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item smg = 17;
      case 17: {
        if (tag == 138) {
         parse_smg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_sniperrifle;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
      case 18: {
        if (tag == 146) {
         parse_sniperrifle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sniperrifle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_stickybomb_launcher;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
      case 19: {
        if (tag == 154) {
         parse_stickybomb_launcher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stickybomb_launcher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ubersaw;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item ubersaw = 20;
      case 20: {
        if (tag == 162) {
         parse_ubersaw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ubersaw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_wrench;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item wrench = 21;
      case 21: {
        if (tag == 170) {
         parse_wrench:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wrench()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_amputator;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item amputator = 22;
      case 22: {
        if (tag == 178) {
         parse_amputator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amputator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_atom_launcher;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
      case 23: {
        if (tag == 186) {
         parse_atom_launcher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atom_launcher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_back_scratcher;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
      case 24: {
        if (tag == 194) {
         parse_back_scratcher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_back_scratcher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_battleaxe;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item battleaxe = 25;
      case 25: {
        if (tag == 202) {
         parse_battleaxe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleaxe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_bazaar_sniper;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
      case 26: {
        if (tag == 210) {
         parse_bazaar_sniper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bazaar_sniper()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_blackbox;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item blackbox = 27;
      case 27: {
        if (tag == 218) {
         parse_blackbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blackbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_claidheamohmor;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
      case 28: {
        if (tag == 226) {
         parse_claidheamohmor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claidheamohmor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_crusaders_crossbow;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
      case 29: {
        if (tag == 234) {
         parse_crusaders_crossbow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crusaders_crossbow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_degreaser;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item degreaser = 30;
      case 30: {
        if (tag == 242) {
         parse_degreaser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_degreaser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_demo_cannon;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
      case 31: {
        if (tag == 250) {
         parse_demo_cannon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_demo_cannon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_demo_sultan_sword;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
      case 32: {
        if (tag == 258) {
         parse_demo_sultan_sword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_demo_sultan_sword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_detonator;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item detonator = 33;
      case 33: {
        if (tag == 266) {
         parse_detonator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detonator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_gatling_gun;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
      case 34: {
        if (tag == 274) {
         parse_gatling_gun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gatling_gun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_holymackerel;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item holymackerel = 35;
      case 35: {
        if (tag == 282) {
         parse_holymackerel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_holymackerel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_jag;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item jag = 36;
      case 36: {
        if (tag == 290) {
         parse_jag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_lochnload;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item lochnload = 37;
      case 37: {
        if (tag == 298) {
         parse_lochnload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lochnload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_powerjack;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item powerjack = 38;
      case 38: {
        if (tag == 306) {
         parse_powerjack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_powerjack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_quadball;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item quadball = 39;
      case 39: {
        if (tag == 314) {
         parse_quadball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quadball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_reserve_shooter;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
      case 40: {
        if (tag == 322) {
         parse_reserve_shooter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reserve_shooter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_riding_crop;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item riding_crop = 41;
      case 41: {
        if (tag == 330) {
         parse_riding_crop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_riding_crop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_russian_riot;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item russian_riot = 42;
      case 42: {
        if (tag == 338) {
         parse_russian_riot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_russian_riot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_scimitar;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item scimitar = 43;
      case 43: {
        if (tag == 346) {
         parse_scimitar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scimitar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_scorch_shot;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
      case 44: {
        if (tag == 354) {
         parse_scorch_shot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scorch_shot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_shortstop;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item shortstop = 45;
      case 45: {
        if (tag == 362) {
         parse_shortstop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shortstop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_soda_popper;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item soda_popper = 46;
      case 46: {
        if (tag == 370) {
         parse_soda_popper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soda_popper()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_tele_shotgun;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
      case 47: {
        if (tag == 378) {
         parse_tele_shotgun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tele_shotgun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_tomislav;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item tomislav = 48;
      case 48: {
        if (tag == 386) {
         parse_tomislav:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tomislav()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_trenchgun;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item trenchgun = 49;
      case 49: {
        if (tag == 394) {
         parse_trenchgun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trenchgun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_winger_pistol;
        break;
      }

      // optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
      case 50: {
        if (tag == 402) {
         parse_winger_pistol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winger_pistol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgPaintKit_Definition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgPaintKit_Definition)
  return false;
#undef DO_
}

void CMsgPaintKit_Definition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgPaintKit_Definition)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string loc_desctoken = 2;
  if (has_loc_desctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loc_desctoken().data(), this->loc_desctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loc_desctoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->loc_desctoken(), output);
  }

  // optional .CMsgProtoDefID operation_template = 3;
  if (has_operation_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operation_template(), output);
  }

  // optional bool has_team_textures = 4;
  if (has_has_team_textures()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_team_textures(), output);
  }

  // repeated .CMsgPaintKit_Definition.Item item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item(i), output);
  }

  // optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
  if (has_paintkit_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->paintkit_tool(), output);
  }

  // optional .CMsgPaintKit_Definition.Item flamethrower = 7;
  if (has_flamethrower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->flamethrower(), output);
  }

  // optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
  if (has_grenadelauncher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->grenadelauncher(), output);
  }

  // optional .CMsgPaintKit_Definition.Item knife = 9;
  if (has_knife()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->knife(), output);
  }

  // optional .CMsgPaintKit_Definition.Item medigun = 10;
  if (has_medigun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->medigun(), output);
  }

  // optional .CMsgPaintKit_Definition.Item minigun = 11;
  if (has_minigun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->minigun(), output);
  }

  // optional .CMsgPaintKit_Definition.Item pistol = 12;
  if (has_pistol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pistol(), output);
  }

  // optional .CMsgPaintKit_Definition.Item revolver = 13;
  if (has_revolver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->revolver(), output);
  }

  // optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
  if (has_rocketlauncher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->rocketlauncher(), output);
  }

  // optional .CMsgPaintKit_Definition.Item scattergun = 15;
  if (has_scattergun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->scattergun(), output);
  }

  // optional .CMsgPaintKit_Definition.Item shotgun = 16;
  if (has_shotgun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->shotgun(), output);
  }

  // optional .CMsgPaintKit_Definition.Item smg = 17;
  if (has_smg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->smg(), output);
  }

  // optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
  if (has_sniperrifle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->sniperrifle(), output);
  }

  // optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
  if (has_stickybomb_launcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->stickybomb_launcher(), output);
  }

  // optional .CMsgPaintKit_Definition.Item ubersaw = 20;
  if (has_ubersaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->ubersaw(), output);
  }

  // optional .CMsgPaintKit_Definition.Item wrench = 21;
  if (has_wrench()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->wrench(), output);
  }

  // optional .CMsgPaintKit_Definition.Item amputator = 22;
  if (has_amputator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->amputator(), output);
  }

  // optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
  if (has_atom_launcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->atom_launcher(), output);
  }

  // optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
  if (has_back_scratcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->back_scratcher(), output);
  }

  // optional .CMsgPaintKit_Definition.Item battleaxe = 25;
  if (has_battleaxe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->battleaxe(), output);
  }

  // optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
  if (has_bazaar_sniper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->bazaar_sniper(), output);
  }

  // optional .CMsgPaintKit_Definition.Item blackbox = 27;
  if (has_blackbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->blackbox(), output);
  }

  // optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
  if (has_claidheamohmor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->claidheamohmor(), output);
  }

  // optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
  if (has_crusaders_crossbow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->crusaders_crossbow(), output);
  }

  // optional .CMsgPaintKit_Definition.Item degreaser = 30;
  if (has_degreaser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->degreaser(), output);
  }

  // optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
  if (has_demo_cannon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->demo_cannon(), output);
  }

  // optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
  if (has_demo_sultan_sword()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->demo_sultan_sword(), output);
  }

  // optional .CMsgPaintKit_Definition.Item detonator = 33;
  if (has_detonator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->detonator(), output);
  }

  // optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
  if (has_gatling_gun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->gatling_gun(), output);
  }

  // optional .CMsgPaintKit_Definition.Item holymackerel = 35;
  if (has_holymackerel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->holymackerel(), output);
  }

  // optional .CMsgPaintKit_Definition.Item jag = 36;
  if (has_jag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->jag(), output);
  }

  // optional .CMsgPaintKit_Definition.Item lochnload = 37;
  if (has_lochnload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->lochnload(), output);
  }

  // optional .CMsgPaintKit_Definition.Item powerjack = 38;
  if (has_powerjack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->powerjack(), output);
  }

  // optional .CMsgPaintKit_Definition.Item quadball = 39;
  if (has_quadball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->quadball(), output);
  }

  // optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
  if (has_reserve_shooter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->reserve_shooter(), output);
  }

  // optional .CMsgPaintKit_Definition.Item riding_crop = 41;
  if (has_riding_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->riding_crop(), output);
  }

  // optional .CMsgPaintKit_Definition.Item russian_riot = 42;
  if (has_russian_riot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->russian_riot(), output);
  }

  // optional .CMsgPaintKit_Definition.Item scimitar = 43;
  if (has_scimitar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->scimitar(), output);
  }

  // optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
  if (has_scorch_shot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->scorch_shot(), output);
  }

  // optional .CMsgPaintKit_Definition.Item shortstop = 45;
  if (has_shortstop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->shortstop(), output);
  }

  // optional .CMsgPaintKit_Definition.Item soda_popper = 46;
  if (has_soda_popper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->soda_popper(), output);
  }

  // optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
  if (has_tele_shotgun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->tele_shotgun(), output);
  }

  // optional .CMsgPaintKit_Definition.Item tomislav = 48;
  if (has_tomislav()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->tomislav(), output);
  }

  // optional .CMsgPaintKit_Definition.Item trenchgun = 49;
  if (has_trenchgun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->trenchgun(), output);
  }

  // optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
  if (has_winger_pistol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->winger_pistol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgPaintKit_Definition)
}

::google::protobuf::uint8* CMsgPaintKit_Definition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPaintKit_Definition)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string loc_desctoken = 2;
  if (has_loc_desctoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loc_desctoken().data(), this->loc_desctoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loc_desctoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->loc_desctoken(), target);
  }

  // optional .CMsgProtoDefID operation_template = 3;
  if (has_operation_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->operation_template(), target);
  }

  // optional bool has_team_textures = 4;
  if (has_has_team_textures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_team_textures(), target);
  }

  // repeated .CMsgPaintKit_Definition.Item item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item(i), target);
  }

  // optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
  if (has_paintkit_tool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->paintkit_tool(), target);
  }

  // optional .CMsgPaintKit_Definition.Item flamethrower = 7;
  if (has_flamethrower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->flamethrower(), target);
  }

  // optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
  if (has_grenadelauncher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->grenadelauncher(), target);
  }

  // optional .CMsgPaintKit_Definition.Item knife = 9;
  if (has_knife()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->knife(), target);
  }

  // optional .CMsgPaintKit_Definition.Item medigun = 10;
  if (has_medigun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->medigun(), target);
  }

  // optional .CMsgPaintKit_Definition.Item minigun = 11;
  if (has_minigun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->minigun(), target);
  }

  // optional .CMsgPaintKit_Definition.Item pistol = 12;
  if (has_pistol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pistol(), target);
  }

  // optional .CMsgPaintKit_Definition.Item revolver = 13;
  if (has_revolver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->revolver(), target);
  }

  // optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
  if (has_rocketlauncher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->rocketlauncher(), target);
  }

  // optional .CMsgPaintKit_Definition.Item scattergun = 15;
  if (has_scattergun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->scattergun(), target);
  }

  // optional .CMsgPaintKit_Definition.Item shotgun = 16;
  if (has_shotgun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->shotgun(), target);
  }

  // optional .CMsgPaintKit_Definition.Item smg = 17;
  if (has_smg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->smg(), target);
  }

  // optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
  if (has_sniperrifle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->sniperrifle(), target);
  }

  // optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
  if (has_stickybomb_launcher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->stickybomb_launcher(), target);
  }

  // optional .CMsgPaintKit_Definition.Item ubersaw = 20;
  if (has_ubersaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->ubersaw(), target);
  }

  // optional .CMsgPaintKit_Definition.Item wrench = 21;
  if (has_wrench()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->wrench(), target);
  }

  // optional .CMsgPaintKit_Definition.Item amputator = 22;
  if (has_amputator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->amputator(), target);
  }

  // optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
  if (has_atom_launcher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->atom_launcher(), target);
  }

  // optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
  if (has_back_scratcher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->back_scratcher(), target);
  }

  // optional .CMsgPaintKit_Definition.Item battleaxe = 25;
  if (has_battleaxe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->battleaxe(), target);
  }

  // optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
  if (has_bazaar_sniper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->bazaar_sniper(), target);
  }

  // optional .CMsgPaintKit_Definition.Item blackbox = 27;
  if (has_blackbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->blackbox(), target);
  }

  // optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
  if (has_claidheamohmor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->claidheamohmor(), target);
  }

  // optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
  if (has_crusaders_crossbow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->crusaders_crossbow(), target);
  }

  // optional .CMsgPaintKit_Definition.Item degreaser = 30;
  if (has_degreaser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->degreaser(), target);
  }

  // optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
  if (has_demo_cannon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->demo_cannon(), target);
  }

  // optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
  if (has_demo_sultan_sword()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->demo_sultan_sword(), target);
  }

  // optional .CMsgPaintKit_Definition.Item detonator = 33;
  if (has_detonator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->detonator(), target);
  }

  // optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
  if (has_gatling_gun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->gatling_gun(), target);
  }

  // optional .CMsgPaintKit_Definition.Item holymackerel = 35;
  if (has_holymackerel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->holymackerel(), target);
  }

  // optional .CMsgPaintKit_Definition.Item jag = 36;
  if (has_jag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->jag(), target);
  }

  // optional .CMsgPaintKit_Definition.Item lochnload = 37;
  if (has_lochnload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->lochnload(), target);
  }

  // optional .CMsgPaintKit_Definition.Item powerjack = 38;
  if (has_powerjack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->powerjack(), target);
  }

  // optional .CMsgPaintKit_Definition.Item quadball = 39;
  if (has_quadball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->quadball(), target);
  }

  // optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
  if (has_reserve_shooter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->reserve_shooter(), target);
  }

  // optional .CMsgPaintKit_Definition.Item riding_crop = 41;
  if (has_riding_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->riding_crop(), target);
  }

  // optional .CMsgPaintKit_Definition.Item russian_riot = 42;
  if (has_russian_riot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->russian_riot(), target);
  }

  // optional .CMsgPaintKit_Definition.Item scimitar = 43;
  if (has_scimitar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->scimitar(), target);
  }

  // optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
  if (has_scorch_shot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->scorch_shot(), target);
  }

  // optional .CMsgPaintKit_Definition.Item shortstop = 45;
  if (has_shortstop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->shortstop(), target);
  }

  // optional .CMsgPaintKit_Definition.Item soda_popper = 46;
  if (has_soda_popper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->soda_popper(), target);
  }

  // optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
  if (has_tele_shotgun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->tele_shotgun(), target);
  }

  // optional .CMsgPaintKit_Definition.Item tomislav = 48;
  if (has_tomislav()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->tomislav(), target);
  }

  // optional .CMsgPaintKit_Definition.Item trenchgun = 49;
  if (has_trenchgun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->trenchgun(), target);
  }

  // optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
  if (has_winger_pistol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->winger_pistol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPaintKit_Definition)
  return target;
}

int CMsgPaintKit_Definition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string loc_desctoken = 2;
    if (has_loc_desctoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loc_desctoken());
    }

    // optional .CMsgProtoDefID operation_template = 3;
    if (has_operation_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operation_template());
    }

    // optional bool has_team_textures = 4;
    if (has_has_team_textures()) {
      total_size += 1 + 1;
    }

    // optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
    if (has_paintkit_tool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paintkit_tool());
    }

    // optional .CMsgPaintKit_Definition.Item flamethrower = 7;
    if (has_flamethrower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flamethrower());
    }

    // optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
    if (has_grenadelauncher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grenadelauncher());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgPaintKit_Definition.Item knife = 9;
    if (has_knife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knife());
    }

    // optional .CMsgPaintKit_Definition.Item medigun = 10;
    if (has_medigun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medigun());
    }

    // optional .CMsgPaintKit_Definition.Item minigun = 11;
    if (has_minigun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minigun());
    }

    // optional .CMsgPaintKit_Definition.Item pistol = 12;
    if (has_pistol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pistol());
    }

    // optional .CMsgPaintKit_Definition.Item revolver = 13;
    if (has_revolver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revolver());
    }

    // optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
    if (has_rocketlauncher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rocketlauncher());
    }

    // optional .CMsgPaintKit_Definition.Item scattergun = 15;
    if (has_scattergun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scattergun());
    }

    // optional .CMsgPaintKit_Definition.Item shotgun = 16;
    if (has_shotgun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shotgun());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .CMsgPaintKit_Definition.Item smg = 17;
    if (has_smg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smg());
    }

    // optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
    if (has_sniperrifle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sniperrifle());
    }

    // optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
    if (has_stickybomb_launcher()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stickybomb_launcher());
    }

    // optional .CMsgPaintKit_Definition.Item ubersaw = 20;
    if (has_ubersaw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ubersaw());
    }

    // optional .CMsgPaintKit_Definition.Item wrench = 21;
    if (has_wrench()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wrench());
    }

    // optional .CMsgPaintKit_Definition.Item amputator = 22;
    if (has_amputator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amputator());
    }

    // optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
    if (has_atom_launcher()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atom_launcher());
    }

    // optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
    if (has_back_scratcher()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->back_scratcher());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .CMsgPaintKit_Definition.Item battleaxe = 25;
    if (has_battleaxe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleaxe());
    }

    // optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
    if (has_bazaar_sniper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bazaar_sniper());
    }

    // optional .CMsgPaintKit_Definition.Item blackbox = 27;
    if (has_blackbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blackbox());
    }

    // optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
    if (has_claidheamohmor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->claidheamohmor());
    }

    // optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
    if (has_crusaders_crossbow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crusaders_crossbow());
    }

    // optional .CMsgPaintKit_Definition.Item degreaser = 30;
    if (has_degreaser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->degreaser());
    }

    // optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
    if (has_demo_cannon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->demo_cannon());
    }

    // optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
    if (has_demo_sultan_sword()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->demo_sultan_sword());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .CMsgPaintKit_Definition.Item detonator = 33;
    if (has_detonator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detonator());
    }

    // optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
    if (has_gatling_gun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gatling_gun());
    }

    // optional .CMsgPaintKit_Definition.Item holymackerel = 35;
    if (has_holymackerel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->holymackerel());
    }

    // optional .CMsgPaintKit_Definition.Item jag = 36;
    if (has_jag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jag());
    }

    // optional .CMsgPaintKit_Definition.Item lochnload = 37;
    if (has_lochnload()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lochnload());
    }

    // optional .CMsgPaintKit_Definition.Item powerjack = 38;
    if (has_powerjack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->powerjack());
    }

    // optional .CMsgPaintKit_Definition.Item quadball = 39;
    if (has_quadball()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quadball());
    }

    // optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
    if (has_reserve_shooter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reserve_shooter());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .CMsgPaintKit_Definition.Item riding_crop = 41;
    if (has_riding_crop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->riding_crop());
    }

    // optional .CMsgPaintKit_Definition.Item russian_riot = 42;
    if (has_russian_riot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->russian_riot());
    }

    // optional .CMsgPaintKit_Definition.Item scimitar = 43;
    if (has_scimitar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scimitar());
    }

    // optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
    if (has_scorch_shot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scorch_shot());
    }

    // optional .CMsgPaintKit_Definition.Item shortstop = 45;
    if (has_shortstop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shortstop());
    }

    // optional .CMsgPaintKit_Definition.Item soda_popper = 46;
    if (has_soda_popper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soda_popper());
    }

    // optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
    if (has_tele_shotgun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tele_shotgun());
    }

    // optional .CMsgPaintKit_Definition.Item tomislav = 48;
    if (has_tomislav()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tomislav());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .CMsgPaintKit_Definition.Item trenchgun = 49;
    if (has_trenchgun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trenchgun());
    }

    // optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
    if (has_winger_pistol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winger_pistol());
    }

  }
  // repeated .CMsgPaintKit_Definition.Item item = 5;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPaintKit_Definition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgPaintKit_Definition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgPaintKit_Definition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgPaintKit_Definition::MergeFrom(const CMsgPaintKit_Definition& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
    if (from.has_loc_desctoken()) {
      set_loc_desctoken(from.loc_desctoken());
    }
    if (from.has_operation_template()) {
      mutable_operation_template()->::CMsgProtoDefID::MergeFrom(from.operation_template());
    }
    if (from.has_has_team_textures()) {
      set_has_team_textures(from.has_team_textures());
    }
    if (from.has_paintkit_tool()) {
      mutable_paintkit_tool()->::CMsgPaintKit_Definition_Item::MergeFrom(from.paintkit_tool());
    }
    if (from.has_flamethrower()) {
      mutable_flamethrower()->::CMsgPaintKit_Definition_Item::MergeFrom(from.flamethrower());
    }
    if (from.has_grenadelauncher()) {
      mutable_grenadelauncher()->::CMsgPaintKit_Definition_Item::MergeFrom(from.grenadelauncher());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_knife()) {
      mutable_knife()->::CMsgPaintKit_Definition_Item::MergeFrom(from.knife());
    }
    if (from.has_medigun()) {
      mutable_medigun()->::CMsgPaintKit_Definition_Item::MergeFrom(from.medigun());
    }
    if (from.has_minigun()) {
      mutable_minigun()->::CMsgPaintKit_Definition_Item::MergeFrom(from.minigun());
    }
    if (from.has_pistol()) {
      mutable_pistol()->::CMsgPaintKit_Definition_Item::MergeFrom(from.pistol());
    }
    if (from.has_revolver()) {
      mutable_revolver()->::CMsgPaintKit_Definition_Item::MergeFrom(from.revolver());
    }
    if (from.has_rocketlauncher()) {
      mutable_rocketlauncher()->::CMsgPaintKit_Definition_Item::MergeFrom(from.rocketlauncher());
    }
    if (from.has_scattergun()) {
      mutable_scattergun()->::CMsgPaintKit_Definition_Item::MergeFrom(from.scattergun());
    }
    if (from.has_shotgun()) {
      mutable_shotgun()->::CMsgPaintKit_Definition_Item::MergeFrom(from.shotgun());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_smg()) {
      mutable_smg()->::CMsgPaintKit_Definition_Item::MergeFrom(from.smg());
    }
    if (from.has_sniperrifle()) {
      mutable_sniperrifle()->::CMsgPaintKit_Definition_Item::MergeFrom(from.sniperrifle());
    }
    if (from.has_stickybomb_launcher()) {
      mutable_stickybomb_launcher()->::CMsgPaintKit_Definition_Item::MergeFrom(from.stickybomb_launcher());
    }
    if (from.has_ubersaw()) {
      mutable_ubersaw()->::CMsgPaintKit_Definition_Item::MergeFrom(from.ubersaw());
    }
    if (from.has_wrench()) {
      mutable_wrench()->::CMsgPaintKit_Definition_Item::MergeFrom(from.wrench());
    }
    if (from.has_amputator()) {
      mutable_amputator()->::CMsgPaintKit_Definition_Item::MergeFrom(from.amputator());
    }
    if (from.has_atom_launcher()) {
      mutable_atom_launcher()->::CMsgPaintKit_Definition_Item::MergeFrom(from.atom_launcher());
    }
    if (from.has_back_scratcher()) {
      mutable_back_scratcher()->::CMsgPaintKit_Definition_Item::MergeFrom(from.back_scratcher());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_battleaxe()) {
      mutable_battleaxe()->::CMsgPaintKit_Definition_Item::MergeFrom(from.battleaxe());
    }
    if (from.has_bazaar_sniper()) {
      mutable_bazaar_sniper()->::CMsgPaintKit_Definition_Item::MergeFrom(from.bazaar_sniper());
    }
    if (from.has_blackbox()) {
      mutable_blackbox()->::CMsgPaintKit_Definition_Item::MergeFrom(from.blackbox());
    }
    if (from.has_claidheamohmor()) {
      mutable_claidheamohmor()->::CMsgPaintKit_Definition_Item::MergeFrom(from.claidheamohmor());
    }
    if (from.has_crusaders_crossbow()) {
      mutable_crusaders_crossbow()->::CMsgPaintKit_Definition_Item::MergeFrom(from.crusaders_crossbow());
    }
    if (from.has_degreaser()) {
      mutable_degreaser()->::CMsgPaintKit_Definition_Item::MergeFrom(from.degreaser());
    }
    if (from.has_demo_cannon()) {
      mutable_demo_cannon()->::CMsgPaintKit_Definition_Item::MergeFrom(from.demo_cannon());
    }
    if (from.has_demo_sultan_sword()) {
      mutable_demo_sultan_sword()->::CMsgPaintKit_Definition_Item::MergeFrom(from.demo_sultan_sword());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_detonator()) {
      mutable_detonator()->::CMsgPaintKit_Definition_Item::MergeFrom(from.detonator());
    }
    if (from.has_gatling_gun()) {
      mutable_gatling_gun()->::CMsgPaintKit_Definition_Item::MergeFrom(from.gatling_gun());
    }
    if (from.has_holymackerel()) {
      mutable_holymackerel()->::CMsgPaintKit_Definition_Item::MergeFrom(from.holymackerel());
    }
    if (from.has_jag()) {
      mutable_jag()->::CMsgPaintKit_Definition_Item::MergeFrom(from.jag());
    }
    if (from.has_lochnload()) {
      mutable_lochnload()->::CMsgPaintKit_Definition_Item::MergeFrom(from.lochnload());
    }
    if (from.has_powerjack()) {
      mutable_powerjack()->::CMsgPaintKit_Definition_Item::MergeFrom(from.powerjack());
    }
    if (from.has_quadball()) {
      mutable_quadball()->::CMsgPaintKit_Definition_Item::MergeFrom(from.quadball());
    }
    if (from.has_reserve_shooter()) {
      mutable_reserve_shooter()->::CMsgPaintKit_Definition_Item::MergeFrom(from.reserve_shooter());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_riding_crop()) {
      mutable_riding_crop()->::CMsgPaintKit_Definition_Item::MergeFrom(from.riding_crop());
    }
    if (from.has_russian_riot()) {
      mutable_russian_riot()->::CMsgPaintKit_Definition_Item::MergeFrom(from.russian_riot());
    }
    if (from.has_scimitar()) {
      mutable_scimitar()->::CMsgPaintKit_Definition_Item::MergeFrom(from.scimitar());
    }
    if (from.has_scorch_shot()) {
      mutable_scorch_shot()->::CMsgPaintKit_Definition_Item::MergeFrom(from.scorch_shot());
    }
    if (from.has_shortstop()) {
      mutable_shortstop()->::CMsgPaintKit_Definition_Item::MergeFrom(from.shortstop());
    }
    if (from.has_soda_popper()) {
      mutable_soda_popper()->::CMsgPaintKit_Definition_Item::MergeFrom(from.soda_popper());
    }
    if (from.has_tele_shotgun()) {
      mutable_tele_shotgun()->::CMsgPaintKit_Definition_Item::MergeFrom(from.tele_shotgun());
    }
    if (from.has_tomislav()) {
      mutable_tomislav()->::CMsgPaintKit_Definition_Item::MergeFrom(from.tomislav());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_trenchgun()) {
      mutable_trenchgun()->::CMsgPaintKit_Definition_Item::MergeFrom(from.trenchgun());
    }
    if (from.has_winger_pistol()) {
      mutable_winger_pistol()->::CMsgPaintKit_Definition_Item::MergeFrom(from.winger_pistol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgPaintKit_Definition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPaintKit_Definition::CopyFrom(const CMsgPaintKit_Definition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPaintKit_Definition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_operation_template()) {
    if (!this->operation_template().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  if (has_paintkit_tool()) {
    if (!this->paintkit_tool().IsInitialized()) return false;
  }
  if (has_flamethrower()) {
    if (!this->flamethrower().IsInitialized()) return false;
  }
  if (has_grenadelauncher()) {
    if (!this->grenadelauncher().IsInitialized()) return false;
  }
  if (has_knife()) {
    if (!this->knife().IsInitialized()) return false;
  }
  if (has_medigun()) {
    if (!this->medigun().IsInitialized()) return false;
  }
  if (has_minigun()) {
    if (!this->minigun().IsInitialized()) return false;
  }
  if (has_pistol()) {
    if (!this->pistol().IsInitialized()) return false;
  }
  if (has_revolver()) {
    if (!this->revolver().IsInitialized()) return false;
  }
  if (has_rocketlauncher()) {
    if (!this->rocketlauncher().IsInitialized()) return false;
  }
  if (has_scattergun()) {
    if (!this->scattergun().IsInitialized()) return false;
  }
  if (has_shotgun()) {
    if (!this->shotgun().IsInitialized()) return false;
  }
  if (has_smg()) {
    if (!this->smg().IsInitialized()) return false;
  }
  if (has_sniperrifle()) {
    if (!this->sniperrifle().IsInitialized()) return false;
  }
  if (has_stickybomb_launcher()) {
    if (!this->stickybomb_launcher().IsInitialized()) return false;
  }
  if (has_ubersaw()) {
    if (!this->ubersaw().IsInitialized()) return false;
  }
  if (has_wrench()) {
    if (!this->wrench().IsInitialized()) return false;
  }
  if (has_amputator()) {
    if (!this->amputator().IsInitialized()) return false;
  }
  if (has_atom_launcher()) {
    if (!this->atom_launcher().IsInitialized()) return false;
  }
  if (has_back_scratcher()) {
    if (!this->back_scratcher().IsInitialized()) return false;
  }
  if (has_battleaxe()) {
    if (!this->battleaxe().IsInitialized()) return false;
  }
  if (has_bazaar_sniper()) {
    if (!this->bazaar_sniper().IsInitialized()) return false;
  }
  if (has_blackbox()) {
    if (!this->blackbox().IsInitialized()) return false;
  }
  if (has_claidheamohmor()) {
    if (!this->claidheamohmor().IsInitialized()) return false;
  }
  if (has_crusaders_crossbow()) {
    if (!this->crusaders_crossbow().IsInitialized()) return false;
  }
  if (has_degreaser()) {
    if (!this->degreaser().IsInitialized()) return false;
  }
  if (has_demo_cannon()) {
    if (!this->demo_cannon().IsInitialized()) return false;
  }
  if (has_demo_sultan_sword()) {
    if (!this->demo_sultan_sword().IsInitialized()) return false;
  }
  if (has_detonator()) {
    if (!this->detonator().IsInitialized()) return false;
  }
  if (has_gatling_gun()) {
    if (!this->gatling_gun().IsInitialized()) return false;
  }
  if (has_holymackerel()) {
    if (!this->holymackerel().IsInitialized()) return false;
  }
  if (has_jag()) {
    if (!this->jag().IsInitialized()) return false;
  }
  if (has_lochnload()) {
    if (!this->lochnload().IsInitialized()) return false;
  }
  if (has_powerjack()) {
    if (!this->powerjack().IsInitialized()) return false;
  }
  if (has_quadball()) {
    if (!this->quadball().IsInitialized()) return false;
  }
  if (has_reserve_shooter()) {
    if (!this->reserve_shooter().IsInitialized()) return false;
  }
  if (has_riding_crop()) {
    if (!this->riding_crop().IsInitialized()) return false;
  }
  if (has_russian_riot()) {
    if (!this->russian_riot().IsInitialized()) return false;
  }
  if (has_scimitar()) {
    if (!this->scimitar().IsInitialized()) return false;
  }
  if (has_scorch_shot()) {
    if (!this->scorch_shot().IsInitialized()) return false;
  }
  if (has_shortstop()) {
    if (!this->shortstop().IsInitialized()) return false;
  }
  if (has_soda_popper()) {
    if (!this->soda_popper().IsInitialized()) return false;
  }
  if (has_tele_shotgun()) {
    if (!this->tele_shotgun().IsInitialized()) return false;
  }
  if (has_tomislav()) {
    if (!this->tomislav().IsInitialized()) return false;
  }
  if (has_trenchgun()) {
    if (!this->trenchgun().IsInitialized()) return false;
  }
  if (has_winger_pistol()) {
    if (!this->winger_pistol().IsInitialized()) return false;
  }
  return true;
}

void CMsgPaintKit_Definition::Swap(CMsgPaintKit_Definition* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(loc_desctoken_, other->loc_desctoken_);
    std::swap(operation_template_, other->operation_template_);
    std::swap(has_team_textures_, other->has_team_textures_);
    item_.Swap(&other->item_);
    std::swap(paintkit_tool_, other->paintkit_tool_);
    std::swap(flamethrower_, other->flamethrower_);
    std::swap(grenadelauncher_, other->grenadelauncher_);
    std::swap(knife_, other->knife_);
    std::swap(medigun_, other->medigun_);
    std::swap(minigun_, other->minigun_);
    std::swap(pistol_, other->pistol_);
    std::swap(revolver_, other->revolver_);
    std::swap(rocketlauncher_, other->rocketlauncher_);
    std::swap(scattergun_, other->scattergun_);
    std::swap(shotgun_, other->shotgun_);
    std::swap(smg_, other->smg_);
    std::swap(sniperrifle_, other->sniperrifle_);
    std::swap(stickybomb_launcher_, other->stickybomb_launcher_);
    std::swap(ubersaw_, other->ubersaw_);
    std::swap(wrench_, other->wrench_);
    std::swap(amputator_, other->amputator_);
    std::swap(atom_launcher_, other->atom_launcher_);
    std::swap(back_scratcher_, other->back_scratcher_);
    std::swap(battleaxe_, other->battleaxe_);
    std::swap(bazaar_sniper_, other->bazaar_sniper_);
    std::swap(blackbox_, other->blackbox_);
    std::swap(claidheamohmor_, other->claidheamohmor_);
    std::swap(crusaders_crossbow_, other->crusaders_crossbow_);
    std::swap(degreaser_, other->degreaser_);
    std::swap(demo_cannon_, other->demo_cannon_);
    std::swap(demo_sultan_sword_, other->demo_sultan_sword_);
    std::swap(detonator_, other->detonator_);
    std::swap(gatling_gun_, other->gatling_gun_);
    std::swap(holymackerel_, other->holymackerel_);
    std::swap(jag_, other->jag_);
    std::swap(lochnload_, other->lochnload_);
    std::swap(powerjack_, other->powerjack_);
    std::swap(quadball_, other->quadball_);
    std::swap(reserve_shooter_, other->reserve_shooter_);
    std::swap(riding_crop_, other->riding_crop_);
    std::swap(russian_riot_, other->russian_riot_);
    std::swap(scimitar_, other->scimitar_);
    std::swap(scorch_shot_, other->scorch_shot_);
    std::swap(shortstop_, other->shortstop_);
    std::swap(soda_popper_, other->soda_popper_);
    std::swap(tele_shotgun_, other->tele_shotgun_);
    std::swap(tomislav_, other->tomislav_);
    std::swap(trenchgun_, other->trenchgun_);
    std::swap(winger_pistol_, other->winger_pistol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgPaintKit_Definition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgPaintKit_Definition_descriptor_;
  metadata.reflection = CMsgPaintKit_Definition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestTheme_WeightedString::kStringFieldNumber;
const int CMsgQuestTheme_WeightedString::kWeightFieldNumber;
#endif  // !_MSC_VER

CMsgQuestTheme_WeightedString::CMsgQuestTheme_WeightedString()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestTheme.WeightedString)
}

void CMsgQuestTheme_WeightedString::InitAsDefaultInstance() {
}

CMsgQuestTheme_WeightedString::CMsgQuestTheme_WeightedString(const CMsgQuestTheme_WeightedString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestTheme.WeightedString)
}

void CMsgQuestTheme_WeightedString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestTheme_WeightedString::~CMsgQuestTheme_WeightedString() {
  // @@protoc_insertion_point(destructor:CMsgQuestTheme.WeightedString)
  SharedDtor();
}

void CMsgQuestTheme_WeightedString::SharedDtor() {
  if (string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_;
  }
  if (this != default_instance_) {
  }
}

void CMsgQuestTheme_WeightedString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestTheme_WeightedString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestTheme_WeightedString_descriptor_;
}

const CMsgQuestTheme_WeightedString& CMsgQuestTheme_WeightedString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestTheme_WeightedString* CMsgQuestTheme_WeightedString::default_instance_ = NULL;

CMsgQuestTheme_WeightedString* CMsgQuestTheme_WeightedString::New() const {
  return new CMsgQuestTheme_WeightedString;
}

void CMsgQuestTheme_WeightedString::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_string()) {
      if (string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        string_->clear();
      }
    }
    weight_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestTheme_WeightedString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestTheme.WeightedString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // optional uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestTheme.WeightedString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestTheme.WeightedString)
  return false;
#undef DO_
}

void CMsgQuestTheme_WeightedString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestTheme.WeightedString)
  // optional string string = 1;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string(), output);
  }

  // optional uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestTheme.WeightedString)
}

::google::protobuf::uint8* CMsgQuestTheme_WeightedString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestTheme.WeightedString)
  // optional string string = 1;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string(), target);
  }

  // optional uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestTheme.WeightedString)
  return target;
}

int CMsgQuestTheme_WeightedString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string string = 1;
    if (has_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
    }

    // optional uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestTheme_WeightedString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestTheme_WeightedString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestTheme_WeightedString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestTheme_WeightedString::MergeFrom(const CMsgQuestTheme_WeightedString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string()) {
      set_string(from.string());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestTheme_WeightedString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestTheme_WeightedString::CopyFrom(const CMsgQuestTheme_WeightedString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestTheme_WeightedString::IsInitialized() const {

  return true;
}

void CMsgQuestTheme_WeightedString::Swap(CMsgQuestTheme_WeightedString* other) {
  if (other != this) {
    std::swap(string_, other->string_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestTheme_WeightedString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestTheme_WeightedString_descriptor_;
  metadata.reflection = CMsgQuestTheme_WeightedString_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgQuestTheme_WeightedStringSet::kWeightedStringsFieldNumber;
#endif  // !_MSC_VER

CMsgQuestTheme_WeightedStringSet::CMsgQuestTheme_WeightedStringSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestTheme.WeightedStringSet)
}

void CMsgQuestTheme_WeightedStringSet::InitAsDefaultInstance() {
}

CMsgQuestTheme_WeightedStringSet::CMsgQuestTheme_WeightedStringSet(const CMsgQuestTheme_WeightedStringSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestTheme.WeightedStringSet)
}

void CMsgQuestTheme_WeightedStringSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestTheme_WeightedStringSet::~CMsgQuestTheme_WeightedStringSet() {
  // @@protoc_insertion_point(destructor:CMsgQuestTheme.WeightedStringSet)
  SharedDtor();
}

void CMsgQuestTheme_WeightedStringSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgQuestTheme_WeightedStringSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestTheme_WeightedStringSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestTheme_WeightedStringSet_descriptor_;
}

const CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme_WeightedStringSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme_WeightedStringSet::default_instance_ = NULL;

CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme_WeightedStringSet::New() const {
  return new CMsgQuestTheme_WeightedStringSet;
}

void CMsgQuestTheme_WeightedStringSet::Clear() {
  weighted_strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestTheme_WeightedStringSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestTheme.WeightedStringSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
      case 1: {
        if (tag == 10) {
         parse_weighted_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weighted_strings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_weighted_strings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestTheme.WeightedStringSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestTheme.WeightedStringSet)
  return false;
#undef DO_
}

void CMsgQuestTheme_WeightedStringSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestTheme.WeightedStringSet)
  // repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
  for (int i = 0; i < this->weighted_strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weighted_strings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestTheme.WeightedStringSet)
}

::google::protobuf::uint8* CMsgQuestTheme_WeightedStringSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestTheme.WeightedStringSet)
  // repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
  for (int i = 0; i < this->weighted_strings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weighted_strings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestTheme.WeightedStringSet)
  return target;
}

int CMsgQuestTheme_WeightedStringSet::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
  total_size += 1 * this->weighted_strings_size();
  for (int i = 0; i < this->weighted_strings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weighted_strings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestTheme_WeightedStringSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestTheme_WeightedStringSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestTheme_WeightedStringSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestTheme_WeightedStringSet::MergeFrom(const CMsgQuestTheme_WeightedStringSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  weighted_strings_.MergeFrom(from.weighted_strings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestTheme_WeightedStringSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestTheme_WeightedStringSet::CopyFrom(const CMsgQuestTheme_WeightedStringSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestTheme_WeightedStringSet::IsInitialized() const {

  return true;
}

void CMsgQuestTheme_WeightedStringSet::Swap(CMsgQuestTheme_WeightedStringSet* other) {
  if (other != this) {
    weighted_strings_.Swap(&other->weighted_strings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestTheme_WeightedStringSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestTheme_WeightedStringSet_descriptor_;
  metadata.reflection = CMsgQuestTheme_WeightedStringSet_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgQuestTheme::kHeaderFieldNumber;
const int CMsgQuestTheme::kNotificationResFieldNumber;
const int CMsgQuestTheme::kQuestItemResFieldNumber;
const int CMsgQuestTheme::kInGameTrackerResFieldNumber;
const int CMsgQuestTheme::kGiveSoundsFieldNumber;
const int CMsgQuestTheme::kCompleteSoundsFieldNumber;
const int CMsgQuestTheme::kFullyCompleteSoundsFieldNumber;
const int CMsgQuestTheme::kRewardSoundFieldNumber;
const int CMsgQuestTheme::kDiscardSoundFieldNumber;
const int CMsgQuestTheme::kRevealSoundFieldNumber;
#endif  // !_MSC_VER

CMsgQuestTheme::CMsgQuestTheme()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestTheme)
}

void CMsgQuestTheme::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
}

CMsgQuestTheme::CMsgQuestTheme(const CMsgQuestTheme& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestTheme)
}

void CMsgQuestTheme::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  notification_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quest_item_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  in_game_tracker_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reward_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  discard_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reveal_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestTheme::~CMsgQuestTheme() {
  // @@protoc_insertion_point(destructor:CMsgQuestTheme)
  SharedDtor();
}

void CMsgQuestTheme::SharedDtor() {
  if (notification_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notification_res_;
  }
  if (quest_item_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quest_item_res_;
  }
  if (in_game_tracker_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete in_game_tracker_res_;
  }
  if (reward_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_sound_;
  }
  if (discard_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discard_sound_;
  }
  if (reveal_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reveal_sound_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void CMsgQuestTheme::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestTheme::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestTheme_descriptor_;
}

const CMsgQuestTheme& CMsgQuestTheme::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestTheme* CMsgQuestTheme::default_instance_ = NULL;

CMsgQuestTheme* CMsgQuestTheme::New() const {
  return new CMsgQuestTheme;
}

void CMsgQuestTheme::Clear() {
  if (_has_bits_[0 / 32] & 143) {
    if (has_header()) {
      if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
    }
    if (has_notification_res()) {
      if (notification_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notification_res_->clear();
      }
    }
    if (has_quest_item_res()) {
      if (quest_item_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quest_item_res_->clear();
      }
    }
    if (has_in_game_tracker_res()) {
      if (in_game_tracker_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        in_game_tracker_res_->clear();
      }
    }
    if (has_reward_sound()) {
      if (reward_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_sound_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_discard_sound()) {
      if (discard_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        discard_sound_->clear();
      }
    }
    if (has_reveal_sound()) {
      if (reveal_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reveal_sound_->clear();
      }
    }
  }
  give_sounds_.Clear();
  complete_sounds_.Clear();
  fully_complete_sounds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestTheme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestTheme)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notification_res;
        break;
      }

      // optional string notification_res = 2;
      case 2: {
        if (tag == 18) {
         parse_notification_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notification_res().data(), this->notification_res().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notification_res");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quest_item_res;
        break;
      }

      // optional string quest_item_res = 3;
      case 3: {
        if (tag == 26) {
         parse_quest_item_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quest_item_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quest_item_res().data(), this->quest_item_res().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quest_item_res");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_in_game_tracker_res;
        break;
      }

      // optional string in_game_tracker_res = 4;
      case 4: {
        if (tag == 34) {
         parse_in_game_tracker_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in_game_tracker_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in_game_tracker_res().data(), this->in_game_tracker_res().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "in_game_tracker_res");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_give_sounds;
        break;
      }

      // repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
      case 5: {
        if (tag == 42) {
         parse_give_sounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_give_sounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_give_sounds;
        if (input->ExpectTag(50)) goto parse_complete_sounds;
        break;
      }

      // repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
      case 6: {
        if (tag == 50) {
         parse_complete_sounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_complete_sounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_complete_sounds;
        if (input->ExpectTag(58)) goto parse_fully_complete_sounds;
        break;
      }

      // repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
      case 7: {
        if (tag == 58) {
         parse_fully_complete_sounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fully_complete_sounds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fully_complete_sounds;
        if (input->ExpectTag(66)) goto parse_reward_sound;
        break;
      }

      // optional string reward_sound = 8;
      case 8: {
        if (tag == 66) {
         parse_reward_sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward_sound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward_sound().data(), this->reward_sound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward_sound");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_discard_sound;
        break;
      }

      // optional string discard_sound = 9;
      case 9: {
        if (tag == 74) {
         parse_discard_sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discard_sound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->discard_sound().data(), this->discard_sound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "discard_sound");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_reveal_sound;
        break;
      }

      // optional string reveal_sound = 10;
      case 10: {
        if (tag == 82) {
         parse_reveal_sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reveal_sound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reveal_sound().data(), this->reveal_sound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reveal_sound");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestTheme)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestTheme)
  return false;
#undef DO_
}

void CMsgQuestTheme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestTheme)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string notification_res = 2;
  if (has_notification_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_res().data(), this->notification_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notification_res");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notification_res(), output);
  }

  // optional string quest_item_res = 3;
  if (has_quest_item_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quest_item_res().data(), this->quest_item_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quest_item_res");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->quest_item_res(), output);
  }

  // optional string in_game_tracker_res = 4;
  if (has_in_game_tracker_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in_game_tracker_res().data(), this->in_game_tracker_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "in_game_tracker_res");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->in_game_tracker_res(), output);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
  for (int i = 0; i < this->give_sounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->give_sounds(i), output);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
  for (int i = 0; i < this->complete_sounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->complete_sounds(i), output);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
  for (int i = 0; i < this->fully_complete_sounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fully_complete_sounds(i), output);
  }

  // optional string reward_sound = 8;
  if (has_reward_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward_sound().data(), this->reward_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward_sound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->reward_sound(), output);
  }

  // optional string discard_sound = 9;
  if (has_discard_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->discard_sound().data(), this->discard_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "discard_sound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->discard_sound(), output);
  }

  // optional string reveal_sound = 10;
  if (has_reveal_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reveal_sound().data(), this->reveal_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reveal_sound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->reveal_sound(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestTheme)
}

::google::protobuf::uint8* CMsgQuestTheme::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestTheme)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string notification_res = 2;
  if (has_notification_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_res().data(), this->notification_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notification_res");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notification_res(), target);
  }

  // optional string quest_item_res = 3;
  if (has_quest_item_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quest_item_res().data(), this->quest_item_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quest_item_res");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->quest_item_res(), target);
  }

  // optional string in_game_tracker_res = 4;
  if (has_in_game_tracker_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in_game_tracker_res().data(), this->in_game_tracker_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "in_game_tracker_res");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->in_game_tracker_res(), target);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
  for (int i = 0; i < this->give_sounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->give_sounds(i), target);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
  for (int i = 0; i < this->complete_sounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->complete_sounds(i), target);
  }

  // repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
  for (int i = 0; i < this->fully_complete_sounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fully_complete_sounds(i), target);
  }

  // optional string reward_sound = 8;
  if (has_reward_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward_sound().data(), this->reward_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward_sound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->reward_sound(), target);
  }

  // optional string discard_sound = 9;
  if (has_discard_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->discard_sound().data(), this->discard_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "discard_sound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->discard_sound(), target);
  }

  // optional string reveal_sound = 10;
  if (has_reveal_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reveal_sound().data(), this->reveal_sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reveal_sound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->reveal_sound(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestTheme)
  return target;
}

int CMsgQuestTheme::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string notification_res = 2;
    if (has_notification_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_res());
    }

    // optional string quest_item_res = 3;
    if (has_quest_item_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quest_item_res());
    }

    // optional string in_game_tracker_res = 4;
    if (has_in_game_tracker_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->in_game_tracker_res());
    }

    // optional string reward_sound = 8;
    if (has_reward_sound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward_sound());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string discard_sound = 9;
    if (has_discard_sound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discard_sound());
    }

    // optional string reveal_sound = 10;
    if (has_reveal_sound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reveal_sound());
    }

  }
  // repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
  total_size += 1 * this->give_sounds_size();
  for (int i = 0; i < this->give_sounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->give_sounds(i));
  }

  // repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
  total_size += 1 * this->complete_sounds_size();
  for (int i = 0; i < this->complete_sounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->complete_sounds(i));
  }

  // repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
  total_size += 1 * this->fully_complete_sounds_size();
  for (int i = 0; i < this->fully_complete_sounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fully_complete_sounds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestTheme::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestTheme* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestTheme*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestTheme::MergeFrom(const CMsgQuestTheme& from) {
  GOOGLE_CHECK_NE(&from, this);
  give_sounds_.MergeFrom(from.give_sounds_);
  complete_sounds_.MergeFrom(from.complete_sounds_);
  fully_complete_sounds_.MergeFrom(from.fully_complete_sounds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
    if (from.has_notification_res()) {
      set_notification_res(from.notification_res());
    }
    if (from.has_quest_item_res()) {
      set_quest_item_res(from.quest_item_res());
    }
    if (from.has_in_game_tracker_res()) {
      set_in_game_tracker_res(from.in_game_tracker_res());
    }
    if (from.has_reward_sound()) {
      set_reward_sound(from.reward_sound());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_discard_sound()) {
      set_discard_sound(from.discard_sound());
    }
    if (from.has_reveal_sound()) {
      set_reveal_sound(from.reveal_sound());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestTheme::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestTheme::CopyFrom(const CMsgQuestTheme& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestTheme::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestTheme::Swap(CMsgQuestTheme* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(notification_res_, other->notification_res_);
    std::swap(quest_item_res_, other->quest_item_res_);
    std::swap(in_game_tracker_res_, other->in_game_tracker_res_);
    give_sounds_.Swap(&other->give_sounds_);
    complete_sounds_.Swap(&other->complete_sounds_);
    fully_complete_sounds_.Swap(&other->fully_complete_sounds_);
    std::swap(reward_sound_, other->reward_sound_);
    std::swap(discard_sound_, other->discard_sound_);
    std::swap(reveal_sound_, other->reveal_sound_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestTheme::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestTheme_descriptor_;
  metadata.reflection = CMsgQuestTheme_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestMapNodeCondition_NodeState::kBonusObjectivesRequiredFieldNumber;
const int CMsgQuestMapNodeCondition_NodeState::kTargetNodeDefidFieldNumber;
#endif  // !_MSC_VER

CMsgQuestMapNodeCondition_NodeState::CMsgQuestMapNodeCondition_NodeState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestMapNodeCondition_NodeState)
}

void CMsgQuestMapNodeCondition_NodeState::InitAsDefaultInstance() {
  target_node_defid_ = const_cast< ::CMsgProtoDefID*>(&::CMsgProtoDefID::default_instance());
}

CMsgQuestMapNodeCondition_NodeState::CMsgQuestMapNodeCondition_NodeState(const CMsgQuestMapNodeCondition_NodeState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapNodeCondition_NodeState)
}

void CMsgQuestMapNodeCondition_NodeState::SharedCtor() {
  _cached_size_ = 0;
  bonus_objectives_required_ = 0u;
  target_node_defid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestMapNodeCondition_NodeState::~CMsgQuestMapNodeCondition_NodeState() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapNodeCondition_NodeState)
  SharedDtor();
}

void CMsgQuestMapNodeCondition_NodeState::SharedDtor() {
  if (this != default_instance_) {
    delete target_node_defid_;
  }
}

void CMsgQuestMapNodeCondition_NodeState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestMapNodeCondition_NodeState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestMapNodeCondition_NodeState_descriptor_;
}

const CMsgQuestMapNodeCondition_NodeState& CMsgQuestMapNodeCondition_NodeState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestMapNodeCondition_NodeState* CMsgQuestMapNodeCondition_NodeState::default_instance_ = NULL;

CMsgQuestMapNodeCondition_NodeState* CMsgQuestMapNodeCondition_NodeState::New() const {
  return new CMsgQuestMapNodeCondition_NodeState;
}

void CMsgQuestMapNodeCondition_NodeState::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bonus_objectives_required_ = 0u;
    if (has_target_node_defid()) {
      if (target_node_defid_ != NULL) target_node_defid_->::CMsgProtoDefID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestMapNodeCondition_NodeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestMapNodeCondition_NodeState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bonus_objectives_required = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_objectives_required_)));
          set_has_bonus_objectives_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_node_defid;
        break;
      }

      // required .CMsgProtoDefID target_node_defid = 2;
      case 2: {
        if (tag == 18) {
         parse_target_node_defid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_node_defid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestMapNodeCondition_NodeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestMapNodeCondition_NodeState)
  return false;
#undef DO_
}

void CMsgQuestMapNodeCondition_NodeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestMapNodeCondition_NodeState)
  // optional uint32 bonus_objectives_required = 1 [default = 0];
  if (has_bonus_objectives_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bonus_objectives_required(), output);
  }

  // required .CMsgProtoDefID target_node_defid = 2;
  if (has_target_node_defid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_node_defid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestMapNodeCondition_NodeState)
}

::google::protobuf::uint8* CMsgQuestMapNodeCondition_NodeState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapNodeCondition_NodeState)
  // optional uint32 bonus_objectives_required = 1 [default = 0];
  if (has_bonus_objectives_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bonus_objectives_required(), target);
  }

  // required .CMsgProtoDefID target_node_defid = 2;
  if (has_target_node_defid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_node_defid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapNodeCondition_NodeState)
  return target;
}

int CMsgQuestMapNodeCondition_NodeState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bonus_objectives_required = 1 [default = 0];
    if (has_bonus_objectives_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_objectives_required());
    }

    // required .CMsgProtoDefID target_node_defid = 2;
    if (has_target_node_defid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_node_defid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestMapNodeCondition_NodeState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestMapNodeCondition_NodeState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestMapNodeCondition_NodeState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestMapNodeCondition_NodeState::MergeFrom(const CMsgQuestMapNodeCondition_NodeState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonus_objectives_required()) {
      set_bonus_objectives_required(from.bonus_objectives_required());
    }
    if (from.has_target_node_defid()) {
      mutable_target_node_defid()->::CMsgProtoDefID::MergeFrom(from.target_node_defid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestMapNodeCondition_NodeState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapNodeCondition_NodeState::CopyFrom(const CMsgQuestMapNodeCondition_NodeState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapNodeCondition_NodeState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_target_node_defid()) {
    if (!this->target_node_defid().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapNodeCondition_NodeState::Swap(CMsgQuestMapNodeCondition_NodeState* other) {
  if (other != this) {
    std::swap(bonus_objectives_required_, other->bonus_objectives_required_);
    std::swap(target_node_defid_, other->target_node_defid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestMapNodeCondition_NodeState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestMapNodeCondition_NodeState_descriptor_;
  metadata.reflection = CMsgQuestMapNodeCondition_NodeState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestMapNodeCondition_Logic::kOperationFieldNumber;
const int CMsgQuestMapNodeCondition_Logic::kSubConditionsFieldNumber;
#endif  // !_MSC_VER

CMsgQuestMapNodeCondition_Logic::CMsgQuestMapNodeCondition_Logic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestMapNodeCondition_Logic)
}

void CMsgQuestMapNodeCondition_Logic::InitAsDefaultInstance() {
}

CMsgQuestMapNodeCondition_Logic::CMsgQuestMapNodeCondition_Logic(const CMsgQuestMapNodeCondition_Logic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapNodeCondition_Logic)
}

void CMsgQuestMapNodeCondition_Logic::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgQuestMapNodeCondition_Logic::~CMsgQuestMapNodeCondition_Logic() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapNodeCondition_Logic)
  SharedDtor();
}

void CMsgQuestMapNodeCondition_Logic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgQuestMapNodeCondition_Logic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestMapNodeCondition_Logic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestMapNodeCondition_Logic_descriptor_;
}

const CMsgQuestMapNodeCondition_Logic& CMsgQuestMapNodeCondition_Logic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestMapNodeCondition_Logic* CMsgQuestMapNodeCondition_Logic::default_instance_ = NULL;

CMsgQuestMapNodeCondition_Logic* CMsgQuestMapNodeCondition_Logic::New() const {
  return new CMsgQuestMapNodeCondition_Logic;
}

void CMsgQuestMapNodeCondition_Logic::Clear() {
  operation_ = 0;
  sub_conditions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestMapNodeCondition_Logic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestMapNodeCondition_Logic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogicalOperation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogicalOperation_IsValid(value)) {
            set_operation(static_cast< ::LogicalOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub_conditions;
        break;
      }

      // repeated .CMsgQuestMapNodeCondition sub_conditions = 2;
      case 2: {
        if (tag == 18) {
         parse_sub_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sub_conditions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestMapNodeCondition_Logic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestMapNodeCondition_Logic)
  return false;
#undef DO_
}

void CMsgQuestMapNodeCondition_Logic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestMapNodeCondition_Logic)
  // required .LogicalOperation operation = 1;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated .CMsgQuestMapNodeCondition sub_conditions = 2;
  for (int i = 0; i < this->sub_conditions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sub_conditions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestMapNodeCondition_Logic)
}

::google::protobuf::uint8* CMsgQuestMapNodeCondition_Logic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapNodeCondition_Logic)
  // required .LogicalOperation operation = 1;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // repeated .CMsgQuestMapNodeCondition sub_conditions = 2;
  for (int i = 0; i < this->sub_conditions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sub_conditions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapNodeCondition_Logic)
  return target;
}

int CMsgQuestMapNodeCondition_Logic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogicalOperation operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

  }
  // repeated .CMsgQuestMapNodeCondition sub_conditions = 2;
  total_size += 1 * this->sub_conditions_size();
  for (int i = 0; i < this->sub_conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_conditions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestMapNodeCondition_Logic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestMapNodeCondition_Logic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestMapNodeCondition_Logic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestMapNodeCondition_Logic::MergeFrom(const CMsgQuestMapNodeCondition_Logic& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_conditions_.MergeFrom(from.sub_conditions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestMapNodeCondition_Logic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapNodeCondition_Logic::CopyFrom(const CMsgQuestMapNodeCondition_Logic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapNodeCondition_Logic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->sub_conditions())) return false;
  return true;
}

void CMsgQuestMapNodeCondition_Logic::Swap(CMsgQuestMapNodeCondition_Logic* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    sub_conditions_.Swap(&other->sub_conditions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestMapNodeCondition_Logic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestMapNodeCondition_Logic_descriptor_;
  metadata.reflection = CMsgQuestMapNodeCondition_Logic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgQuestMapNodeCondition::kNodeStateFieldNumber;
const int CMsgQuestMapNodeCondition::kLogicalFieldNumber;
#endif  // !_MSC_VER

CMsgQuestMapNodeCondition::CMsgQuestMapNodeCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQuestMapNodeCondition)
}

void CMsgQuestMapNodeCondition::InitAsDefaultInstance() {
  CMsgQuestMapNodeCondition_default_oneof_instance_->node_state_ = const_cast< ::CMsgQuestMapNodeCondition_NodeState*>(&::CMsgQuestMapNodeCondition_NodeState::default_instance());
  CMsgQuestMapNodeCondition_default_oneof_instance_->logical_ = const_cast< ::CMsgQuestMapNodeCondition_Logic*>(&::CMsgQuestMapNodeCondition_Logic::default_instance());
}

CMsgQuestMapNodeCondition::CMsgQuestMapNodeCondition(const CMsgQuestMapNodeCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgQuestMapNodeCondition)
}

void CMsgQuestMapNodeCondition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_operation();
}

CMsgQuestMapNodeCondition::~CMsgQuestMapNodeCondition() {
  // @@protoc_insertion_point(destructor:CMsgQuestMapNodeCondition)
  SharedDtor();
}

void CMsgQuestMapNodeCondition::SharedDtor() {
  if (has_operation()) {
    clear_operation();
  }
  if (this != default_instance_) {
  }
}

void CMsgQuestMapNodeCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuestMapNodeCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgQuestMapNodeCondition_descriptor_;
}

const CMsgQuestMapNodeCondition& CMsgQuestMapNodeCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgQuestMapNodeCondition* CMsgQuestMapNodeCondition::default_instance_ = NULL;

CMsgQuestMapNodeCondition* CMsgQuestMapNodeCondition::New() const {
  return new CMsgQuestMapNodeCondition;
}

void CMsgQuestMapNodeCondition::clear_operation() {
  switch(operation_case()) {
    case kNodeState: {
      delete operation_.node_state_;
      break;
    }
    case kLogical: {
      delete operation_.logical_;
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_NOT_SET;
}


void CMsgQuestMapNodeCondition::Clear() {
  clear_operation();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgQuestMapNodeCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQuestMapNodeCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgQuestMapNodeCondition_NodeState node_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logical;
        break;
      }

      // optional .CMsgQuestMapNodeCondition_Logic logical = 2;
      case 2: {
        if (tag == 18) {
         parse_logical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logical()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQuestMapNodeCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQuestMapNodeCondition)
  return false;
#undef DO_
}

void CMsgQuestMapNodeCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQuestMapNodeCondition)
  // optional .CMsgQuestMapNodeCondition_NodeState node_state = 1;
  if (has_node_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_state(), output);
  }

  // optional .CMsgQuestMapNodeCondition_Logic logical = 2;
  if (has_logical()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->logical(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQuestMapNodeCondition)
}

::google::protobuf::uint8* CMsgQuestMapNodeCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuestMapNodeCondition)
  // optional .CMsgQuestMapNodeCondition_NodeState node_state = 1;
  if (has_node_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_state(), target);
  }

  // optional .CMsgQuestMapNodeCondition_Logic logical = 2;
  if (has_logical()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->logical(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuestMapNodeCondition)
  return target;
}

int CMsgQuestMapNodeCondition::ByteSize() const {
  int total_size = 0;

  switch (operation_case()) {
    // optional .CMsgQuestMapNodeCondition_NodeState node_state = 1;
    case kNodeState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_state());
      break;
    }
    // optional .CMsgQuestMapNodeCondition_Logic logical = 2;
    case kLogical: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logical());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuestMapNodeCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgQuestMapNodeCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgQuestMapNodeCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgQuestMapNodeCondition::MergeFrom(const CMsgQuestMapNodeCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.operation_case()) {
    case kNodeState: {
      mutable_node_state()->::CMsgQuestMapNodeCondition_NodeState::MergeFrom(from.node_state());
      break;
    }
    case kLogical: {
      mutable_logical()->::CMsgQuestMapNodeCondition_Logic::MergeFrom(from.logical());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgQuestMapNodeCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuestMapNodeCondition::CopyFrom(const CMsgQuestMapNodeCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuestMapNodeCondition::IsInitialized() const {

  if (has_node_state()) {
    if (!this->node_state().IsInitialized()) return false;
  }
  if (has_logical()) {
    if (!this->logical().IsInitialized()) return false;
  }
  return true;
}

void CMsgQuestMapNodeCondition::Swap(CMsgQuestMapNodeCondition* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgQuestMapNodeCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgQuestMapNodeCondition_descriptor_;
  metadata.reflection = CMsgQuestMapNodeCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgHeaderOnly::kHeaderFieldNumber;
#endif  // !_MSC_VER

CMsgHeaderOnly::CMsgHeaderOnly()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgHeaderOnly)
}

void CMsgHeaderOnly::InitAsDefaultInstance() {
  header_ = const_cast< ::CMsgProtoDefHeader*>(&::CMsgProtoDefHeader::default_instance());
}

CMsgHeaderOnly::CMsgHeaderOnly(const CMsgHeaderOnly& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMsgHeaderOnly)
}

void CMsgHeaderOnly::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgHeaderOnly::~CMsgHeaderOnly() {
  // @@protoc_insertion_point(destructor:CMsgHeaderOnly)
  SharedDtor();
}

void CMsgHeaderOnly::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void CMsgHeaderOnly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHeaderOnly::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgHeaderOnly_descriptor_;
}

const CMsgHeaderOnly& CMsgHeaderOnly::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  return *default_instance_;
}

CMsgHeaderOnly* CMsgHeaderOnly::default_instance_ = NULL;

CMsgHeaderOnly* CMsgHeaderOnly::New() const {
  return new CMsgHeaderOnly;
}

void CMsgHeaderOnly::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgHeaderOnly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgHeaderOnly)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CMsgProtoDefHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgHeaderOnly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgHeaderOnly)
  return false;
#undef DO_
}

void CMsgHeaderOnly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgHeaderOnly)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgHeaderOnly)
}

::google::protobuf::uint8* CMsgHeaderOnly::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHeaderOnly)
  // required .CMsgProtoDefHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHeaderOnly)
  return target;
}

int CMsgHeaderOnly::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CMsgProtoDefHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHeaderOnly::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgHeaderOnly* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgHeaderOnly*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgHeaderOnly::MergeFrom(const CMsgHeaderOnly& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::CMsgProtoDefHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgHeaderOnly::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHeaderOnly::CopyFrom(const CMsgHeaderOnly& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeaderOnly::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void CMsgHeaderOnly::Swap(CMsgHeaderOnly* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgHeaderOnly::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgHeaderOnly_descriptor_;
  metadata.reflection = CMsgHeaderOnly_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  start_expanded(kStartExpandedFieldNumber, true);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::ProtoDefTypes, ::ProtoDefTypes_IsValid>, 14, false >
  valid_type(kValidTypeFieldNumber, static_cast< ::ProtoDefTypes >(0));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  editable(kEditableFieldNumber, true);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  localized(kLocalizedFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  do_not_inherit(kDoNotInheritFieldNumber, false);
const ::std::string display_name_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  display_name(kDisplayNameFieldNumber, display_name_default);
const ::std::string comment_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  comment(kCommentFieldNumber, comment_default);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  max_count(kMaxCountFieldNumber, 0u);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_add(kAllowAddFieldNumber, true);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_delete(kAllowDeleteFieldNumber, true);
const ::std::string panel_class_override_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  panel_class_override(kPanelClassOverrideFieldNumber, panel_class_override_default);
const ::std::string message_inherhitance_key_field_name_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  message_inherhitance_key_field_name(kMessageInherhitanceKeyFieldNameFieldNumber, message_inherhitance_key_field_name_default);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  inherit_reference_variables(kInheritReferenceVariablesFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  self_inherit_only(kSelfInheritOnlyFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::EVarFieldType, ::EVarFieldType_IsValid>, 14, false >
  var_field_type(kVarFieldTypeFieldNumber, static_cast< ::EVarFieldType >(1));
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  merging_key_field(kMergingKeyFieldFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
