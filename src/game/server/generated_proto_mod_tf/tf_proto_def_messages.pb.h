// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tf_proto_def_messages.proto

#ifndef PROTOBUF_tf_5fproto_5fdef_5fmessages_2eproto__INCLUDED
#define PROTOBUF_tf_5fproto_5fdef_5fmessages_2eproto__INCLUDED

// VALVE - Disable some warnings that this code generates, but we wish to leave on in our projects
#if _MSC_VER >= 1300
#pragma warning(push)
#pragma warning(disable : 4530)        // warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)        // warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)        // warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)        // warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)        // warning C4127: conditional expression is constant
#pragma warning(disable : 4100)        // warning C4100: 'op' : unreferenced formal parameter
#pragma warning(disable : 4512)        // warning C4512: assignment operator could not be generated
#endif // _MSC_VER
#if _GNUC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _GNUC
// VALVE

// VALVE - Disable some warnings that this code generates, but we wish to leave on in our projects
#if _MSC_VER >= 1300
#pragma warning(push)
#pragma warning(disable : 4530)        // warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)        // warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)        // warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)        // warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)        // warning C4127: conditional expression is constant
#pragma warning(disable : 4100)        // warning C4100: 'op' : unreferenced formal parameter
#pragma warning(disable : 4512)        // warning C4512: assignment operator could not be generated
#endif // _MSC_VER
#if _GNUC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _GNUC
// VALVE

// VALVE - Disable some warnings that this code generates, but we wish to leave on in our projects
#if _MSC_VER >= 1300
#pragma warning(push)
#pragma warning(disable : 4530)        // warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4244)        // warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)        // warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)        // warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)        // warning C4127: conditional expression is constant
#pragma warning(disable : 4100)        // warning C4100: 'op' : unreferenced formal parameter
#pragma warning(disable : 4512)        // warning C4512: assignment operator could not be generated
#endif // _MSC_VER
#if _GNUC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
#endif // _GNUC
// VALVE

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

class CMsgFieldID;
class CMsgFieldID_CMsgField;
class CMsgUniversalFieldID;
class CMsgVariableDefinition;
class CMsgProtoDefHeader;
class CMsgValidTypes;
class CMsgProtoDefID;
class CMsgQuestObjectiveDef;
class CMsgQuestDef;
class CMsgQuestDef_MMCriteria;
class CMsgQuestDef_ObjectiveInstance;
class CMsgQuestMapStoreItem;
class CMsgQuestMapRegionDef;
class CMsgQuestMapRegionDef_RegionLink;
class CMsgVarField;
class CMsgQuestMapStarType;
class CMsgQuestMapNodeDef;
class CMsgPaintKit_Variables;
class CMsgPaintKit_Operation_TextureStage;
class CMsgPaintKit_Operation_CombineStage;
class CMsgPaintKit_Operation_SelectStage;
class CMsgPaintKit_Operation_Sticker;
class CMsgPaintKit_Operation_StickerStage;
class CMsgPaintKit_OperationStage;
class CMsgPaintKit_OperationNode;
class CMsgPaintKit_Operation;
class CMsgPaintKit_ItemDefinition;
class CMsgPaintKit_ItemDefinition_Definition;
class CMsgPaintKit_Definition;
class CMsgPaintKit_Definition_Item;
class CMsgPaintKit_Definition_Item_ItemData;
class CMsgQuestTheme;
class CMsgQuestTheme_WeightedString;
class CMsgQuestTheme_WeightedStringSet;
class CMsgQuestMapNodeCondition_NodeState;
class CMsgQuestMapNodeCondition_Logic;
class CMsgQuestMapNodeCondition;
class CMsgHeaderOnly;

enum CMsgQuestObjectiveDef_ETF2GameModes {
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Escort = 0,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_CTF = 1,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_AttackDefense = 2,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Koth = 3,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_CP = 4,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_EscortRace = 5,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_EventMix = 6,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_SD = 7,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Quickplay = 8,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Event247 = 9,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Arena = 10,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_RobotDestruction = 11,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Powerup = 12,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Featured = 13,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Passtime = 14,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Community_Update = 15,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Misc = 16,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Competitive_6v6 = 17,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Other = 18,
  CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Halloween = 19
};
bool CMsgQuestObjectiveDef_ETF2GameModes_IsValid(int value);
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MIN = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Escort;
const CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MAX = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Halloween;
const int CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_ARRAYSIZE = CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgQuestObjectiveDef_ETF2GameModes_descriptor();
inline const ::std::string& CMsgQuestObjectiveDef_ETF2GameModes_Name(CMsgQuestObjectiveDef_ETF2GameModes value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgQuestObjectiveDef_ETF2GameModes_descriptor(), value);
}
inline bool CMsgQuestObjectiveDef_ETF2GameModes_Parse(
    const ::std::string& name, CMsgQuestObjectiveDef_ETF2GameModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgQuestObjectiveDef_ETF2GameModes>(
    CMsgQuestObjectiveDef_ETF2GameModes_descriptor(), name, value);
}
enum CMsgQuestObjectiveDef_ETF2Conditions {
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AIMING = 0,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ZOOMED = 1,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISING = 2,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISED = 3,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED = 4,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE = 5,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TELEPORTED = 6,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TAUNTING = 7,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_WEARINGOFF = 8,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_BLINK = 9,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SELECTED_TO_TELEPORT = 10,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED = 11,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TMPDAMAGEBONUS = 12,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FEIGN_DEATH = 13,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PHASE = 14,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STUNNED = 15,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_OFFENSEBUFF = 16,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SHIELD_CHARGE = 17,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEMO_BUFF = 18,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ENERGY_BUFF = 19,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RADIUSHEAL = 20,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALTH_BUFF = 21,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BURNING = 22,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALTH_OVERHEALED = 23,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_URINE = 24,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLEEDING = 25,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF = 26,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MAD_MILK = 27,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEGAHEAL = 28,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_REGENONDAMAGEBUFF = 29,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MARKEDFORDEATH = 30,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_NOHEALINGDAMAGEBUFF = 31,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SPEED_BOOST = 32,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_PUMPKIN = 33,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_USER_BUFF = 34,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_DEMO_CHARGE = 35,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SODAPOPPER_HYPE = 36,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_FIRST_BLOOD = 37,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_BONUS_TIME = 38,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_CTF_CAPTURE = 39,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_ON_KILL = 40,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CANNOT_SWITCH_FROM_MELEE = 41,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK = 42,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_REPROGRAMMED = 43,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_RAGE_BUFF = 44,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF_HIGH = 45,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SNIPERCHARGE_RAGE_BUFF = 46,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISE_WEARINGOFF = 47,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MARKEDFORDEATH_SILENT = 48,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISED_AS_DISPENSER = 49,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SAPPED = 50,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED = 51,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_USER_BUFF = 52,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_BOMB_HEAD = 53,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_THRILLER = 54,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RADIUSHEAL_ON_DAMAGE = 55,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_CARD_EFFECT = 56,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_CARD_EFFECT = 57,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_BULLET_RESIST = 58,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_BLAST_RESIST = 59,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_FIRE_RESIST = 60,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_BULLET_RESIST = 61,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_BLAST_RESIST = 62,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_FIRE_RESIST = 63,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_USER_BUFF = 64,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_DEBUFF = 65,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_USER_BUFF_FADING = 66,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BULLET_IMMUNE = 67,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLAST_IMMUNE = 68,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FIRE_IMMUNE = 69,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PREVENT_DEATH = 70,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MVM_BOT_STUN_RADIOWAVE = 71,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_SPEED_BOOST = 72,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_QUICK_HEAL = 73,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_GIANT = 74,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_TINY = 75,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_IN_HELL = 76,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_GHOST_MODE = 77,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MINICRITBOOSTED_ON_KILL = 78,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_OBSCURED_SMOKE = 79,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PARACHUTE_ACTIVE = 80,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLASTJUMPING = 81,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART = 82,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART_DASH = 83,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BALLOON_HEAD = 84,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MELEE_ONLY = 85,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SWIMMING_CURSE = 86,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FREEZE_INPUT = 87,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART_CAGE = 88,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DONOTUSE_0 = 89,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_STRENGTH = 90,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_HASTE = 91,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_REGEN = 92,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_RESIST = 93,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_VAMPIRE = 94,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_REFLECT = 95,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_PRECISION = 96,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_AGILITY = 97,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK = 98,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_SAFEFALL = 99,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_LATCHED = 100,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_BLEEDING = 101,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AFTERBURN_IMMUNE = 102,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_KNOCKOUT = 103,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_IMBALANCE = 104,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_RUNE_TEMP = 105,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PASSTIME_INTERCEPTION = 106,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SWIMMING_NO_EFFECTS = 107,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PURGATORY = 108,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_KING = 109,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_PLAGUE = 110,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_SUPERNOVA = 111,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PLAGUE = 112,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_KING_BUFFED = 113,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TEAM_GLOWS = 114,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_KNOCKED_INTO_AIR = 115,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_COMPETITIVE_WINNER = 116,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_COMPETITIVE_LOSER = 117,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALING_DEBUFF = 118,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PASSTIME_PENALTY_DEBUFF = 119,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PARACHUTE_DEPLOYED = 120,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_NO_COMBAT_SPEED_BOOST = 121,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TRANQ_SPY_BOOST = 122,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TRANQ_MARKED = 123,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ROCKETPACK = 126,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ROCKETPACK_PASSENGER = 127,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_PHASE = 128,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CLIP_OVERLOAD = 129,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SPY_CLASS_STEAL = 130,
  CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GAS = 131
};
bool CMsgQuestObjectiveDef_ETF2Conditions_IsValid(int value);
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MIN = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AIMING;
const CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MAX = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GAS;
const int CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_ARRAYSIZE = CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Conditions_descriptor();
inline const ::std::string& CMsgQuestObjectiveDef_ETF2Conditions_Name(CMsgQuestObjectiveDef_ETF2Conditions value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgQuestObjectiveDef_ETF2Conditions_descriptor(), value);
}
inline bool CMsgQuestObjectiveDef_ETF2Conditions_Parse(
    const ::std::string& name, CMsgQuestObjectiveDef_ETF2Conditions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgQuestObjectiveDef_ETF2Conditions>(
    CMsgQuestObjectiveDef_ETF2Conditions_descriptor(), name, value);
}
enum CMsgQuestObjectiveDef_ETF2Team {
  CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_RED = 2,
  CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_BLUE = 3
};
bool CMsgQuestObjectiveDef_ETF2Team_IsValid(int value);
const CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MIN = CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_RED;
const CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MAX = CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_BLUE;
const int CMsgQuestObjectiveDef_ETF2Team_ETF2Team_ARRAYSIZE = CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgQuestObjectiveDef_ETF2Team_descriptor();
inline const ::std::string& CMsgQuestObjectiveDef_ETF2Team_Name(CMsgQuestObjectiveDef_ETF2Team value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgQuestObjectiveDef_ETF2Team_descriptor(), value);
}
inline bool CMsgQuestObjectiveDef_ETF2Team_Parse(
    const ::std::string& name, CMsgQuestObjectiveDef_ETF2Team* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgQuestObjectiveDef_ETF2Team>(
    CMsgQuestObjectiveDef_ETF2Team_descriptor(), name, value);
}
enum LogicalOperation {
  AND = 0,
  OR = 1,
  NOT = 2
};
bool LogicalOperation_IsValid(int value);
const LogicalOperation LogicalOperation_MIN = AND;
const LogicalOperation LogicalOperation_MAX = NOT;
const int LogicalOperation_ARRAYSIZE = LogicalOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogicalOperation_descriptor();
inline const ::std::string& LogicalOperation_Name(LogicalOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogicalOperation_descriptor(), value);
}
inline bool LogicalOperation_Parse(
    const ::std::string& name, LogicalOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogicalOperation>(
    LogicalOperation_descriptor(), name, value);
}
enum EValueDefinitionSource {
  REFERENCE_DEFINES = 0,
  PARENT_DEFINES = 1,
  THIS_DEFINES = 2,
  VARIABLE_DEFINES = 3,
  NOT_DEFINED = 4
};
bool EValueDefinitionSource_IsValid(int value);
const EValueDefinitionSource EValueDefinitionSource_MIN = REFERENCE_DEFINES;
const EValueDefinitionSource EValueDefinitionSource_MAX = NOT_DEFINED;
const int EValueDefinitionSource_ARRAYSIZE = EValueDefinitionSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* EValueDefinitionSource_descriptor();
inline const ::std::string& EValueDefinitionSource_Name(EValueDefinitionSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    EValueDefinitionSource_descriptor(), value);
}
inline bool EValueDefinitionSource_Parse(
    const ::std::string& name, EValueDefinitionSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EValueDefinitionSource>(
    EValueDefinitionSource_descriptor(), name, value);
}
enum ProtoDefTypes {
  DEF_TYPE_QUEST_MAP_NODE = 0,
  DEF_TYPE_QUEST_THEME = 2,
  DEF_TYPE_QUEST_MAP_REGION = 3,
  DEF_TYPE_QUEST = 4,
  DEF_TYPE_QUEST_OBJECTIVE = 5,
  DEF_TYPE_PAINTKIT_VARIABLES = 6,
  DEF_TYPE_PAINTKIT_OPERATION = 7,
  DEF_TYPE_PAINTKIT_ITEM_DEFINITION = 8,
  DEF_TYPE_PAINTKIT_DEFINITION = 9,
  DEF_TYPE_HEADER_ONLY = 10,
  DEF_TYPE_QUEST_MAP_STORE_ITEM = 11,
  DEF_TYPE_QUEST_MAP_STAR_TYPE = 12
};
bool ProtoDefTypes_IsValid(int value);
const ProtoDefTypes ProtoDefTypes_MIN = DEF_TYPE_QUEST_MAP_NODE;
const ProtoDefTypes ProtoDefTypes_MAX = DEF_TYPE_QUEST_MAP_STAR_TYPE;
const int ProtoDefTypes_ARRAYSIZE = ProtoDefTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDefTypes_descriptor();
inline const ::std::string& ProtoDefTypes_Name(ProtoDefTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDefTypes_descriptor(), value);
}
inline bool ProtoDefTypes_Parse(
    const ::std::string& name, ProtoDefTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDefTypes>(
    ProtoDefTypes_descriptor(), name, value);
}
enum EQuestPoints {
  QUEST_POINTS_NOVICE = 0,
  QUEST_POINTS_ADVANCED = 1,
  QUEST_POINTS_EXPERT = 2
};
bool EQuestPoints_IsValid(int value);
const EQuestPoints EQuestPoints_MIN = QUEST_POINTS_NOVICE;
const EQuestPoints EQuestPoints_MAX = QUEST_POINTS_EXPERT;
const int EQuestPoints_ARRAYSIZE = EQuestPoints_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuestPoints_descriptor();
inline const ::std::string& EQuestPoints_Name(EQuestPoints value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuestPoints_descriptor(), value);
}
inline bool EQuestPoints_Parse(
    const ::std::string& name, EQuestPoints* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuestPoints>(
    EQuestPoints_descriptor(), name, value);
}
enum EVarFieldType {
  VAR_TYPE_INVALID = 1,
  VAR_TYPE_FLOAT = 2,
  VAR_TYPE_DOUBLE = 3,
  VAR_TYPE_UINT32 = 4,
  VAR_TYPE_UINT64 = 5,
  VAR_TYPE_SINT32 = 6,
  VAR_TYPE_SINT64 = 7,
  VAR_TYPE_BOOL = 8,
  VAR_TYPE_STRING = 9
};
bool EVarFieldType_IsValid(int value);
const EVarFieldType EVarFieldType_MIN = VAR_TYPE_INVALID;
const EVarFieldType EVarFieldType_MAX = VAR_TYPE_STRING;
const int EVarFieldType_ARRAYSIZE = EVarFieldType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EVarFieldType_descriptor();
inline const ::std::string& EVarFieldType_Name(EVarFieldType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EVarFieldType_descriptor(), value);
}
inline bool EVarFieldType_Parse(
    const ::std::string& name, EVarFieldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EVarFieldType>(
    EVarFieldType_descriptor(), name, value);
}
enum ENodeCashReward {
  CASH_REWARD_NONE = 1,
  CASH_REWARD_SMALL = 2,
  CASH_REWARD_MEDIUM = 3,
  CASH_REWARD_LARGE = 4
};
bool ENodeCashReward_IsValid(int value);
const ENodeCashReward ENodeCashReward_MIN = CASH_REWARD_NONE;
const ENodeCashReward ENodeCashReward_MAX = CASH_REWARD_LARGE;
const int ENodeCashReward_ARRAYSIZE = ENodeCashReward_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENodeCashReward_descriptor();
inline const ::std::string& ENodeCashReward_Name(ENodeCashReward value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENodeCashReward_descriptor(), value);
}
inline bool ENodeCashReward_Parse(
    const ::std::string& name, ENodeCashReward* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENodeCashReward>(
    ENodeCashReward_descriptor(), name, value);
}
// ===================================================================

class CMsgFieldID_CMsgField : public ::google::protobuf::Message {
 public:
  CMsgFieldID_CMsgField();
  virtual ~CMsgFieldID_CMsgField();

  CMsgFieldID_CMsgField(const CMsgFieldID_CMsgField& from);

  inline CMsgFieldID_CMsgField& operator=(const CMsgFieldID_CMsgField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFieldID_CMsgField& default_instance();

  void Swap(CMsgFieldID_CMsgField* other);

  // implements Message ----------------------------------------------

  CMsgFieldID_CMsgField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFieldID_CMsgField& from);
  void MergeFrom(const CMsgFieldID_CMsgField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 field_number = 1;
  inline bool has_field_number() const;
  inline void clear_field_number();
  static const int kFieldNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 field_number() const;
  inline void set_field_number(::google::protobuf::uint32 value);

  // optional uint32 repeated_index = 2;
  inline bool has_repeated_index() const;
  inline void clear_repeated_index();
  static const int kRepeatedIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 repeated_index() const;
  inline void set_repeated_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgFieldID.CMsgField)
 private:
  inline void set_has_field_number();
  inline void clear_has_field_number();
  inline void set_has_repeated_index();
  inline void clear_has_repeated_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 field_number_;
  ::google::protobuf::uint32 repeated_index_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgFieldID_CMsgField* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFieldID : public ::google::protobuf::Message {
 public:
  CMsgFieldID();
  virtual ~CMsgFieldID();

  CMsgFieldID(const CMsgFieldID& from);

  inline CMsgFieldID& operator=(const CMsgFieldID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFieldID& default_instance();

  void Swap(CMsgFieldID* other);

  // implements Message ----------------------------------------------

  CMsgFieldID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFieldID& from);
  void MergeFrom(const CMsgFieldID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgFieldID_CMsgField CMsgField;

  // accessors -------------------------------------------------------

  // repeated .CMsgFieldID.CMsgField field = 1;
  inline int field_size() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::CMsgFieldID_CMsgField& field(int index) const;
  inline ::CMsgFieldID_CMsgField* mutable_field(int index);
  inline ::CMsgFieldID_CMsgField* add_field();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgFieldID_CMsgField >&
      field() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgFieldID_CMsgField >*
      mutable_field();

  // @@protoc_insertion_point(class_scope:CMsgFieldID)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgFieldID_CMsgField > field_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgFieldID* default_instance_;
};
// -------------------------------------------------------------------

class CMsgUniversalFieldID : public ::google::protobuf::Message {
 public:
  CMsgUniversalFieldID();
  virtual ~CMsgUniversalFieldID();

  CMsgUniversalFieldID(const CMsgUniversalFieldID& from);

  inline CMsgUniversalFieldID& operator=(const CMsgUniversalFieldID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgUniversalFieldID& default_instance();

  void Swap(CMsgUniversalFieldID* other);

  // implements Message ----------------------------------------------

  CMsgUniversalFieldID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgUniversalFieldID& from);
  void MergeFrom(const CMsgUniversalFieldID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .EValueDefinitionSource source_type = 1;
  inline bool has_source_type() const;
  inline void clear_source_type();
  static const int kSourceTypeFieldNumber = 1;
  inline ::EValueDefinitionSource source_type() const;
  inline void set_source_type(::EValueDefinitionSource value);

  // optional .CMsgProtoDefID defining_obj_id = 2;
  inline bool has_defining_obj_id() const;
  inline void clear_defining_obj_id();
  static const int kDefiningObjIdFieldNumber = 2;
  inline const ::CMsgProtoDefID& defining_obj_id() const;
  inline ::CMsgProtoDefID* mutable_defining_obj_id();
  inline ::CMsgProtoDefID* release_defining_obj_id();
  inline void set_allocated_defining_obj_id(::CMsgProtoDefID* defining_obj_id);

  // optional .CMsgFieldID field_id = 3;
  inline bool has_field_id() const;
  inline void clear_field_id();
  static const int kFieldIdFieldNumber = 3;
  inline const ::CMsgFieldID& field_id() const;
  inline ::CMsgFieldID* mutable_field_id();
  inline ::CMsgFieldID* release_field_id();
  inline void set_allocated_field_id(::CMsgFieldID* field_id);

  // @@protoc_insertion_point(class_scope:CMsgUniversalFieldID)
 private:
  inline void set_has_source_type();
  inline void clear_has_source_type();
  inline void set_has_defining_obj_id();
  inline void clear_has_defining_obj_id();
  inline void set_has_field_id();
  inline void clear_has_field_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefID* defining_obj_id_;
  ::CMsgFieldID* field_id_;
  int source_type_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgUniversalFieldID* default_instance_;
};
// -------------------------------------------------------------------

class CMsgVariableDefinition : public ::google::protobuf::Message {
 public:
  CMsgVariableDefinition();
  virtual ~CMsgVariableDefinition();

  CMsgVariableDefinition(const CMsgVariableDefinition& from);

  inline CMsgVariableDefinition& operator=(const CMsgVariableDefinition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgVariableDefinition& default_instance();

  void Swap(CMsgVariableDefinition* other);

  // implements Message ----------------------------------------------

  CMsgVariableDefinition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgVariableDefinition& from);
  void MergeFrom(const CMsgVariableDefinition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool inherit = 2 [default = true];
  inline bool has_inherit() const;
  inline void clear_inherit();
  static const int kInheritFieldNumber = 2;
  inline bool inherit() const;
  inline void set_inherit(bool value);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:CMsgVariableDefinition)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_inherit();
  inline void clear_has_inherit();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* value_;
  bool inherit_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgVariableDefinition* default_instance_;
};
// -------------------------------------------------------------------

class CMsgProtoDefHeader : public ::google::protobuf::Message {
 public:
  CMsgProtoDefHeader();
  virtual ~CMsgProtoDefHeader();

  CMsgProtoDefHeader(const CMsgProtoDefHeader& from);

  inline CMsgProtoDefHeader& operator=(const CMsgProtoDefHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgProtoDefHeader& default_instance();

  void Swap(CMsgProtoDefHeader* other);

  // implements Message ----------------------------------------------

  CMsgProtoDefHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgProtoDefHeader& from);
  void MergeFrom(const CMsgProtoDefHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 defindex = 1;
  inline bool has_defindex() const;
  inline void clear_defindex();
  static const int kDefindexFieldNumber = 1;
  inline ::google::protobuf::uint32 defindex() const;
  inline void set_defindex(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .CMsgProtoDefID prefabs = 3;
  inline int prefabs_size() const;
  inline void clear_prefabs();
  static const int kPrefabsFieldNumber = 3;
  inline const ::CMsgProtoDefID& prefabs(int index) const;
  inline ::CMsgProtoDefID* mutable_prefabs(int index);
  inline ::CMsgProtoDefID* add_prefabs();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID >&
      prefabs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID >*
      mutable_prefabs();

  // repeated string tags = 4;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 4;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional bool prefab_only = 5 [default = false];
  inline bool has_prefab_only() const;
  inline void clear_prefab_only();
  static const int kPrefabOnlyFieldNumber = 5;
  inline bool prefab_only() const;
  inline void set_prefab_only(bool value);

  // repeated .CMsgVariableDefinition variables = 6;
  inline int variables_size() const;
  inline void clear_variables();
  static const int kVariablesFieldNumber = 6;
  inline const ::CMsgVariableDefinition& variables(int index) const;
  inline ::CMsgVariableDefinition* mutable_variables(int index);
  inline ::CMsgVariableDefinition* add_variables();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgVariableDefinition >&
      variables() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgVariableDefinition >*
      mutable_variables();

  // @@protoc_insertion_point(class_scope:CMsgProtoDefHeader)
 private:
  inline void set_has_defindex();
  inline void clear_has_defindex();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_prefab_only();
  inline void clear_has_prefab_only();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID > prefabs_;
  ::google::protobuf::uint32 defindex_;
  bool prefab_only_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::CMsgVariableDefinition > variables_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgProtoDefHeader* default_instance_;
};
// -------------------------------------------------------------------

class CMsgValidTypes : public ::google::protobuf::Message {
 public:
  CMsgValidTypes();
  virtual ~CMsgValidTypes();

  CMsgValidTypes(const CMsgValidTypes& from);

  inline CMsgValidTypes& operator=(const CMsgValidTypes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgValidTypes& default_instance();

  void Swap(CMsgValidTypes* other);

  // implements Message ----------------------------------------------

  CMsgValidTypes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgValidTypes& from);
  void MergeFrom(const CMsgValidTypes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoDefTypes types = 1;
  inline int types_size() const;
  inline void clear_types();
  static const int kTypesFieldNumber = 1;
  inline ::ProtoDefTypes types(int index) const;
  inline void set_types(int index, ::ProtoDefTypes value);
  inline void add_types(::ProtoDefTypes value);
  inline const ::google::protobuf::RepeatedField<int>& types() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_types();

  // @@protoc_insertion_point(class_scope:CMsgValidTypes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> types_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgValidTypes* default_instance_;
};
// -------------------------------------------------------------------

class CMsgProtoDefID : public ::google::protobuf::Message {
 public:
  CMsgProtoDefID();
  virtual ~CMsgProtoDefID();

  CMsgProtoDefID(const CMsgProtoDefID& from);

  inline CMsgProtoDefID& operator=(const CMsgProtoDefID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgProtoDefID& default_instance();

  enum InstanceCase {
    kInstanceDefTypeQuestMapNode = 3,
    kInstanceDefTypeQuestTheme = 5,
    kInstanceDefTypeQuestMapRegion = 6,
    kInstanceDefTypeQuest = 7,
    kInstanceDefTypeQuestObjective = 8,
    kInstanceDefTypePaintkitVariables = 9,
    kInstanceDefTypePaintkitOperation = 10,
    kInstanceDefTypePaintkitItemDefinition = 11,
    kInstanceDefTypePaintkitDefinition = 12,
    kInstanceDefTypeHeaderOnly = 13,
    INSTANCE_NOT_SET = 0,
  };

  void Swap(CMsgProtoDefID* other);

  // implements Message ----------------------------------------------

  CMsgProtoDefID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgProtoDefID& from);
  void MergeFrom(const CMsgProtoDefID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 defindex = 1;
  inline bool has_defindex() const;
  inline void clear_defindex();
  static const int kDefindexFieldNumber = 1;
  inline ::google::protobuf::uint32 defindex() const;
  inline void set_defindex(::google::protobuf::uint32 value);

  // optional .ProtoDefTypes type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::ProtoDefTypes type() const;
  inline void set_type(::ProtoDefTypes value);

  // optional .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
  inline bool has_instance_def_type_quest_map_node() const;
  inline void clear_instance_def_type_quest_map_node();
  static const int kInstanceDefTypeQuestMapNodeFieldNumber = 3;
  inline const ::CMsgQuestMapNodeDef& instance_def_type_quest_map_node() const;
  inline ::CMsgQuestMapNodeDef* mutable_instance_def_type_quest_map_node();
  inline ::CMsgQuestMapNodeDef* release_instance_def_type_quest_map_node();
  inline void set_allocated_instance_def_type_quest_map_node(::CMsgQuestMapNodeDef* instance_def_type_quest_map_node);

  // optional .CMsgQuestTheme instance_def_type_quest_theme = 5;
  inline bool has_instance_def_type_quest_theme() const;
  inline void clear_instance_def_type_quest_theme();
  static const int kInstanceDefTypeQuestThemeFieldNumber = 5;
  inline const ::CMsgQuestTheme& instance_def_type_quest_theme() const;
  inline ::CMsgQuestTheme* mutable_instance_def_type_quest_theme();
  inline ::CMsgQuestTheme* release_instance_def_type_quest_theme();
  inline void set_allocated_instance_def_type_quest_theme(::CMsgQuestTheme* instance_def_type_quest_theme);

  // optional .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
  inline bool has_instance_def_type_quest_map_region() const;
  inline void clear_instance_def_type_quest_map_region();
  static const int kInstanceDefTypeQuestMapRegionFieldNumber = 6;
  inline const ::CMsgQuestMapRegionDef& instance_def_type_quest_map_region() const;
  inline ::CMsgQuestMapRegionDef* mutable_instance_def_type_quest_map_region();
  inline ::CMsgQuestMapRegionDef* release_instance_def_type_quest_map_region();
  inline void set_allocated_instance_def_type_quest_map_region(::CMsgQuestMapRegionDef* instance_def_type_quest_map_region);

  // optional .CMsgQuestDef instance_def_type_quest = 7;
  inline bool has_instance_def_type_quest() const;
  inline void clear_instance_def_type_quest();
  static const int kInstanceDefTypeQuestFieldNumber = 7;
  inline const ::CMsgQuestDef& instance_def_type_quest() const;
  inline ::CMsgQuestDef* mutable_instance_def_type_quest();
  inline ::CMsgQuestDef* release_instance_def_type_quest();
  inline void set_allocated_instance_def_type_quest(::CMsgQuestDef* instance_def_type_quest);

  // optional .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
  inline bool has_instance_def_type_quest_objective() const;
  inline void clear_instance_def_type_quest_objective();
  static const int kInstanceDefTypeQuestObjectiveFieldNumber = 8;
  inline const ::CMsgQuestObjectiveDef& instance_def_type_quest_objective() const;
  inline ::CMsgQuestObjectiveDef* mutable_instance_def_type_quest_objective();
  inline ::CMsgQuestObjectiveDef* release_instance_def_type_quest_objective();
  inline void set_allocated_instance_def_type_quest_objective(::CMsgQuestObjectiveDef* instance_def_type_quest_objective);

  // optional .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
  inline bool has_instance_def_type_paintkit_variables() const;
  inline void clear_instance_def_type_paintkit_variables();
  static const int kInstanceDefTypePaintkitVariablesFieldNumber = 9;
  inline const ::CMsgPaintKit_Variables& instance_def_type_paintkit_variables() const;
  inline ::CMsgPaintKit_Variables* mutable_instance_def_type_paintkit_variables();
  inline ::CMsgPaintKit_Variables* release_instance_def_type_paintkit_variables();
  inline void set_allocated_instance_def_type_paintkit_variables(::CMsgPaintKit_Variables* instance_def_type_paintkit_variables);

  // optional .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
  inline bool has_instance_def_type_paintkit_operation() const;
  inline void clear_instance_def_type_paintkit_operation();
  static const int kInstanceDefTypePaintkitOperationFieldNumber = 10;
  inline const ::CMsgPaintKit_Operation& instance_def_type_paintkit_operation() const;
  inline ::CMsgPaintKit_Operation* mutable_instance_def_type_paintkit_operation();
  inline ::CMsgPaintKit_Operation* release_instance_def_type_paintkit_operation();
  inline void set_allocated_instance_def_type_paintkit_operation(::CMsgPaintKit_Operation* instance_def_type_paintkit_operation);

  // optional .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
  inline bool has_instance_def_type_paintkit_item_definition() const;
  inline void clear_instance_def_type_paintkit_item_definition();
  static const int kInstanceDefTypePaintkitItemDefinitionFieldNumber = 11;
  inline const ::CMsgPaintKit_ItemDefinition& instance_def_type_paintkit_item_definition() const;
  inline ::CMsgPaintKit_ItemDefinition* mutable_instance_def_type_paintkit_item_definition();
  inline ::CMsgPaintKit_ItemDefinition* release_instance_def_type_paintkit_item_definition();
  inline void set_allocated_instance_def_type_paintkit_item_definition(::CMsgPaintKit_ItemDefinition* instance_def_type_paintkit_item_definition);

  // optional .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
  inline bool has_instance_def_type_paintkit_definition() const;
  inline void clear_instance_def_type_paintkit_definition();
  static const int kInstanceDefTypePaintkitDefinitionFieldNumber = 12;
  inline const ::CMsgPaintKit_Definition& instance_def_type_paintkit_definition() const;
  inline ::CMsgPaintKit_Definition* mutable_instance_def_type_paintkit_definition();
  inline ::CMsgPaintKit_Definition* release_instance_def_type_paintkit_definition();
  inline void set_allocated_instance_def_type_paintkit_definition(::CMsgPaintKit_Definition* instance_def_type_paintkit_definition);

  // optional .CMsgHeaderOnly instance_def_type_header_only = 13;
  inline bool has_instance_def_type_header_only() const;
  inline void clear_instance_def_type_header_only();
  static const int kInstanceDefTypeHeaderOnlyFieldNumber = 13;
  inline const ::CMsgHeaderOnly& instance_def_type_header_only() const;
  inline ::CMsgHeaderOnly* mutable_instance_def_type_header_only();
  inline ::CMsgHeaderOnly* release_instance_def_type_header_only();
  inline void set_allocated_instance_def_type_header_only(::CMsgHeaderOnly* instance_def_type_header_only);

  inline InstanceCase instance_case() const;
  // @@protoc_insertion_point(class_scope:CMsgProtoDefID)
 private:
  inline void set_has_defindex();
  inline void clear_has_defindex();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_instance_def_type_quest_map_node();
  inline void set_has_instance_def_type_quest_theme();
  inline void set_has_instance_def_type_quest_map_region();
  inline void set_has_instance_def_type_quest();
  inline void set_has_instance_def_type_quest_objective();
  inline void set_has_instance_def_type_paintkit_variables();
  inline void set_has_instance_def_type_paintkit_operation();
  inline void set_has_instance_def_type_paintkit_item_definition();
  inline void set_has_instance_def_type_paintkit_definition();
  inline void set_has_instance_def_type_header_only();

  inline bool has_instance();
  void clear_instance();
  inline void clear_has_instance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 defindex_;
  int type_;
  union InstanceUnion {
    ::CMsgQuestMapNodeDef* instance_def_type_quest_map_node_;
    ::CMsgQuestTheme* instance_def_type_quest_theme_;
    ::CMsgQuestMapRegionDef* instance_def_type_quest_map_region_;
    ::CMsgQuestDef* instance_def_type_quest_;
    ::CMsgQuestObjectiveDef* instance_def_type_quest_objective_;
    ::CMsgPaintKit_Variables* instance_def_type_paintkit_variables_;
    ::CMsgPaintKit_Operation* instance_def_type_paintkit_operation_;
    ::CMsgPaintKit_ItemDefinition* instance_def_type_paintkit_item_definition_;
    ::CMsgPaintKit_Definition* instance_def_type_paintkit_definition_;
    ::CMsgHeaderOnly* instance_def_type_header_only_;
  } instance_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgProtoDefID* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestObjectiveDef : public ::google::protobuf::Message {
 public:
  CMsgQuestObjectiveDef();
  virtual ~CMsgQuestObjectiveDef();

  CMsgQuestObjectiveDef(const CMsgQuestObjectiveDef& from);

  inline CMsgQuestObjectiveDef& operator=(const CMsgQuestObjectiveDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestObjectiveDef& default_instance();

  void Swap(CMsgQuestObjectiveDef* other);

  // implements Message ----------------------------------------------

  CMsgQuestObjectiveDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestObjectiveDef& from);
  void MergeFrom(const CMsgQuestObjectiveDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgQuestObjectiveDef_ETF2GameModes ETF2GameModes;
  static const ETF2GameModes kGameCategory_Escort = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Escort;
  static const ETF2GameModes kGameCategory_CTF = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_CTF;
  static const ETF2GameModes kGameCategory_AttackDefense = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_AttackDefense;
  static const ETF2GameModes kGameCategory_Koth = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Koth;
  static const ETF2GameModes kGameCategory_CP = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_CP;
  static const ETF2GameModes kGameCategory_EscortRace = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_EscortRace;
  static const ETF2GameModes kGameCategory_EventMix = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_EventMix;
  static const ETF2GameModes kGameCategory_SD = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_SD;
  static const ETF2GameModes kGameCategory_Quickplay = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Quickplay;
  static const ETF2GameModes kGameCategory_Event247 = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Event247;
  static const ETF2GameModes kGameCategory_Arena = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Arena;
  static const ETF2GameModes kGameCategory_RobotDestruction = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_RobotDestruction;
  static const ETF2GameModes kGameCategory_Powerup = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Powerup;
  static const ETF2GameModes kGameCategory_Featured = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Featured;
  static const ETF2GameModes kGameCategory_Passtime = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Passtime;
  static const ETF2GameModes kGameCategory_Community_Update = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Community_Update;
  static const ETF2GameModes kGameCategory_Misc = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Misc;
  static const ETF2GameModes kGameCategory_Competitive_6v6 = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Competitive_6v6;
  static const ETF2GameModes kGameCategory_Other = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Other;
  static const ETF2GameModes kGameCategory_Halloween = CMsgQuestObjectiveDef_ETF2GameModes_kGameCategory_Halloween;
  static inline bool ETF2GameModes_IsValid(int value) {
    return CMsgQuestObjectiveDef_ETF2GameModes_IsValid(value);
  }
  static const ETF2GameModes ETF2GameModes_MIN =
    CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MIN;
  static const ETF2GameModes ETF2GameModes_MAX =
    CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_MAX;
  static const int ETF2GameModes_ARRAYSIZE =
    CMsgQuestObjectiveDef_ETF2GameModes_ETF2GameModes_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ETF2GameModes_descriptor() {
    return CMsgQuestObjectiveDef_ETF2GameModes_descriptor();
  }
  static inline const ::std::string& ETF2GameModes_Name(ETF2GameModes value) {
    return CMsgQuestObjectiveDef_ETF2GameModes_Name(value);
  }
  static inline bool ETF2GameModes_Parse(const ::std::string& name,
      ETF2GameModes* value) {
    return CMsgQuestObjectiveDef_ETF2GameModes_Parse(name, value);
  }

  typedef CMsgQuestObjectiveDef_ETF2Conditions ETF2Conditions;
  static const ETF2Conditions TF_COND_AIMING = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AIMING;
  static const ETF2Conditions TF_COND_ZOOMED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ZOOMED;
  static const ETF2Conditions TF_COND_DISGUISING = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISING;
  static const ETF2Conditions TF_COND_DISGUISED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISED;
  static const ETF2Conditions TF_COND_STEALTHED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED;
  static const ETF2Conditions TF_COND_INVULNERABLE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE;
  static const ETF2Conditions TF_COND_TELEPORTED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TELEPORTED;
  static const ETF2Conditions TF_COND_TAUNTING = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TAUNTING;
  static const ETF2Conditions TF_COND_INVULNERABLE_WEARINGOFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_WEARINGOFF;
  static const ETF2Conditions TF_COND_STEALTHED_BLINK = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_BLINK;
  static const ETF2Conditions TF_COND_SELECTED_TO_TELEPORT = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SELECTED_TO_TELEPORT;
  static const ETF2Conditions TF_COND_CRITBOOSTED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED;
  static const ETF2Conditions TF_COND_TMPDAMAGEBONUS = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TMPDAMAGEBONUS;
  static const ETF2Conditions TF_COND_FEIGN_DEATH = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FEIGN_DEATH;
  static const ETF2Conditions TF_COND_PHASE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PHASE;
  static const ETF2Conditions TF_COND_STUNNED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STUNNED;
  static const ETF2Conditions TF_COND_OFFENSEBUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_OFFENSEBUFF;
  static const ETF2Conditions TF_COND_SHIELD_CHARGE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SHIELD_CHARGE;
  static const ETF2Conditions TF_COND_DEMO_BUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEMO_BUFF;
  static const ETF2Conditions TF_COND_ENERGY_BUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ENERGY_BUFF;
  static const ETF2Conditions TF_COND_RADIUSHEAL = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RADIUSHEAL;
  static const ETF2Conditions TF_COND_HEALTH_BUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALTH_BUFF;
  static const ETF2Conditions TF_COND_BURNING = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BURNING;
  static const ETF2Conditions TF_COND_HEALTH_OVERHEALED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALTH_OVERHEALED;
  static const ETF2Conditions TF_COND_URINE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_URINE;
  static const ETF2Conditions TF_COND_BLEEDING = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLEEDING;
  static const ETF2Conditions TF_COND_DEFENSEBUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF;
  static const ETF2Conditions TF_COND_MAD_MILK = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MAD_MILK;
  static const ETF2Conditions TF_COND_MEGAHEAL = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEGAHEAL;
  static const ETF2Conditions TF_COND_REGENONDAMAGEBUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_REGENONDAMAGEBUFF;
  static const ETF2Conditions TF_COND_MARKEDFORDEATH = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MARKEDFORDEATH;
  static const ETF2Conditions TF_COND_NOHEALINGDAMAGEBUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_NOHEALINGDAMAGEBUFF;
  static const ETF2Conditions TF_COND_SPEED_BOOST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SPEED_BOOST;
  static const ETF2Conditions TF_COND_CRITBOOSTED_PUMPKIN = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_PUMPKIN;
  static const ETF2Conditions TF_COND_CRITBOOSTED_USER_BUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_USER_BUFF;
  static const ETF2Conditions TF_COND_CRITBOOSTED_DEMO_CHARGE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_DEMO_CHARGE;
  static const ETF2Conditions TF_COND_SODAPOPPER_HYPE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SODAPOPPER_HYPE;
  static const ETF2Conditions TF_COND_CRITBOOSTED_FIRST_BLOOD = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_FIRST_BLOOD;
  static const ETF2Conditions TF_COND_CRITBOOSTED_BONUS_TIME = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_BONUS_TIME;
  static const ETF2Conditions TF_COND_CRITBOOSTED_CTF_CAPTURE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_CTF_CAPTURE;
  static const ETF2Conditions TF_COND_CRITBOOSTED_ON_KILL = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_ON_KILL;
  static const ETF2Conditions TF_COND_CANNOT_SWITCH_FROM_MELEE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CANNOT_SWITCH_FROM_MELEE;
  static const ETF2Conditions TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK;
  static const ETF2Conditions TF_COND_REPROGRAMMED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_REPROGRAMMED;
  static const ETF2Conditions TF_COND_CRITBOOSTED_RAGE_BUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_RAGE_BUFF;
  static const ETF2Conditions TF_COND_DEFENSEBUFF_HIGH = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DEFENSEBUFF_HIGH;
  static const ETF2Conditions TF_COND_SNIPERCHARGE_RAGE_BUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SNIPERCHARGE_RAGE_BUFF;
  static const ETF2Conditions TF_COND_DISGUISE_WEARINGOFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISE_WEARINGOFF;
  static const ETF2Conditions TF_COND_MARKEDFORDEATH_SILENT = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MARKEDFORDEATH_SILENT;
  static const ETF2Conditions TF_COND_DISGUISED_AS_DISPENSER = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DISGUISED_AS_DISPENSER;
  static const ETF2Conditions TF_COND_SAPPED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SAPPED;
  static const ETF2Conditions TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED;
  static const ETF2Conditions TF_COND_INVULNERABLE_USER_BUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_USER_BUFF;
  static const ETF2Conditions TF_COND_HALLOWEEN_BOMB_HEAD = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_BOMB_HEAD;
  static const ETF2Conditions TF_COND_HALLOWEEN_THRILLER = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_THRILLER;
  static const ETF2Conditions TF_COND_RADIUSHEAL_ON_DAMAGE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RADIUSHEAL_ON_DAMAGE;
  static const ETF2Conditions TF_COND_CRITBOOSTED_CARD_EFFECT = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_CARD_EFFECT;
  static const ETF2Conditions TF_COND_INVULNERABLE_CARD_EFFECT = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_INVULNERABLE_CARD_EFFECT;
  static const ETF2Conditions TF_COND_MEDIGUN_UBER_BULLET_RESIST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_BULLET_RESIST;
  static const ETF2Conditions TF_COND_MEDIGUN_UBER_BLAST_RESIST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_BLAST_RESIST;
  static const ETF2Conditions TF_COND_MEDIGUN_UBER_FIRE_RESIST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_UBER_FIRE_RESIST;
  static const ETF2Conditions TF_COND_MEDIGUN_SMALL_BULLET_RESIST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_BULLET_RESIST;
  static const ETF2Conditions TF_COND_MEDIGUN_SMALL_BLAST_RESIST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_BLAST_RESIST;
  static const ETF2Conditions TF_COND_MEDIGUN_SMALL_FIRE_RESIST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_SMALL_FIRE_RESIST;
  static const ETF2Conditions TF_COND_STEALTHED_USER_BUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_USER_BUFF;
  static const ETF2Conditions TF_COND_MEDIGUN_DEBUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MEDIGUN_DEBUFF;
  static const ETF2Conditions TF_COND_STEALTHED_USER_BUFF_FADING = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_USER_BUFF_FADING;
  static const ETF2Conditions TF_COND_BULLET_IMMUNE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BULLET_IMMUNE;
  static const ETF2Conditions TF_COND_BLAST_IMMUNE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLAST_IMMUNE;
  static const ETF2Conditions TF_COND_FIRE_IMMUNE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FIRE_IMMUNE;
  static const ETF2Conditions TF_COND_PREVENT_DEATH = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PREVENT_DEATH;
  static const ETF2Conditions TF_COND_MVM_BOT_STUN_RADIOWAVE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MVM_BOT_STUN_RADIOWAVE;
  static const ETF2Conditions TF_COND_HALLOWEEN_SPEED_BOOST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_SPEED_BOOST;
  static const ETF2Conditions TF_COND_HALLOWEEN_QUICK_HEAL = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_QUICK_HEAL;
  static const ETF2Conditions TF_COND_HALLOWEEN_GIANT = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_GIANT;
  static const ETF2Conditions TF_COND_HALLOWEEN_TINY = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_TINY;
  static const ETF2Conditions TF_COND_HALLOWEEN_IN_HELL = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_IN_HELL;
  static const ETF2Conditions TF_COND_HALLOWEEN_GHOST_MODE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_GHOST_MODE;
  static const ETF2Conditions TF_COND_MINICRITBOOSTED_ON_KILL = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MINICRITBOOSTED_ON_KILL;
  static const ETF2Conditions TF_COND_OBSCURED_SMOKE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_OBSCURED_SMOKE;
  static const ETF2Conditions TF_COND_PARACHUTE_ACTIVE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PARACHUTE_ACTIVE;
  static const ETF2Conditions TF_COND_BLASTJUMPING = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BLASTJUMPING;
  static const ETF2Conditions TF_COND_HALLOWEEN_KART = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART;
  static const ETF2Conditions TF_COND_HALLOWEEN_KART_DASH = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART_DASH;
  static const ETF2Conditions TF_COND_BALLOON_HEAD = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_BALLOON_HEAD;
  static const ETF2Conditions TF_COND_MELEE_ONLY = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_MELEE_ONLY;
  static const ETF2Conditions TF_COND_SWIMMING_CURSE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SWIMMING_CURSE;
  static const ETF2Conditions TF_COND_FREEZE_INPUT = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_FREEZE_INPUT;
  static const ETF2Conditions TF_COND_HALLOWEEN_KART_CAGE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HALLOWEEN_KART_CAGE;
  static const ETF2Conditions TF_COND_DONOTUSE_0 = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_DONOTUSE_0;
  static const ETF2Conditions TF_COND_RUNE_STRENGTH = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_STRENGTH;
  static const ETF2Conditions TF_COND_RUNE_HASTE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_HASTE;
  static const ETF2Conditions TF_COND_RUNE_REGEN = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_REGEN;
  static const ETF2Conditions TF_COND_RUNE_RESIST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_RESIST;
  static const ETF2Conditions TF_COND_RUNE_VAMPIRE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_VAMPIRE;
  static const ETF2Conditions TF_COND_RUNE_REFLECT = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_REFLECT;
  static const ETF2Conditions TF_COND_RUNE_PRECISION = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_PRECISION;
  static const ETF2Conditions TF_COND_RUNE_AGILITY = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_AGILITY;
  static const ETF2Conditions TF_COND_GRAPPLINGHOOK = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK;
  static const ETF2Conditions TF_COND_GRAPPLINGHOOK_SAFEFALL = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_SAFEFALL;
  static const ETF2Conditions TF_COND_GRAPPLINGHOOK_LATCHED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_LATCHED;
  static const ETF2Conditions TF_COND_GRAPPLINGHOOK_BLEEDING = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GRAPPLINGHOOK_BLEEDING;
  static const ETF2Conditions TF_COND_AFTERBURN_IMMUNE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_AFTERBURN_IMMUNE;
  static const ETF2Conditions TF_COND_RUNE_KNOCKOUT = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_KNOCKOUT;
  static const ETF2Conditions TF_COND_RUNE_IMBALANCE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_IMBALANCE;
  static const ETF2Conditions TF_COND_CRITBOOSTED_RUNE_TEMP = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CRITBOOSTED_RUNE_TEMP;
  static const ETF2Conditions TF_COND_PASSTIME_INTERCEPTION = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PASSTIME_INTERCEPTION;
  static const ETF2Conditions TF_COND_SWIMMING_NO_EFFECTS = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SWIMMING_NO_EFFECTS;
  static const ETF2Conditions TF_COND_PURGATORY = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PURGATORY;
  static const ETF2Conditions TF_COND_RUNE_KING = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_KING;
  static const ETF2Conditions TF_COND_RUNE_PLAGUE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_PLAGUE;
  static const ETF2Conditions TF_COND_RUNE_SUPERNOVA = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_RUNE_SUPERNOVA;
  static const ETF2Conditions TF_COND_PLAGUE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PLAGUE;
  static const ETF2Conditions TF_COND_KING_BUFFED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_KING_BUFFED;
  static const ETF2Conditions TF_COND_TEAM_GLOWS = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TEAM_GLOWS;
  static const ETF2Conditions TF_COND_KNOCKED_INTO_AIR = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_KNOCKED_INTO_AIR;
  static const ETF2Conditions TF_COND_COMPETITIVE_WINNER = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_COMPETITIVE_WINNER;
  static const ETF2Conditions TF_COND_COMPETITIVE_LOSER = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_COMPETITIVE_LOSER;
  static const ETF2Conditions TF_COND_HEALING_DEBUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_HEALING_DEBUFF;
  static const ETF2Conditions TF_COND_PASSTIME_PENALTY_DEBUFF = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PASSTIME_PENALTY_DEBUFF;
  static const ETF2Conditions TF_COND_PARACHUTE_DEPLOYED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_PARACHUTE_DEPLOYED;
  static const ETF2Conditions TF_COND_NO_COMBAT_SPEED_BOOST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_NO_COMBAT_SPEED_BOOST;
  static const ETF2Conditions TF_COND_TRANQ_SPY_BOOST = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TRANQ_SPY_BOOST;
  static const ETF2Conditions TF_COND_TRANQ_MARKED = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_TRANQ_MARKED;
  static const ETF2Conditions TF_COND_ROCKETPACK = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ROCKETPACK;
  static const ETF2Conditions TF_COND_ROCKETPACK_PASSENGER = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_ROCKETPACK_PASSENGER;
  static const ETF2Conditions TF_COND_STEALTHED_PHASE = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_STEALTHED_PHASE;
  static const ETF2Conditions TF_COND_CLIP_OVERLOAD = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_CLIP_OVERLOAD;
  static const ETF2Conditions TF_COND_SPY_CLASS_STEAL = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_SPY_CLASS_STEAL;
  static const ETF2Conditions TF_COND_GAS = CMsgQuestObjectiveDef_ETF2Conditions_TF_COND_GAS;
  static inline bool ETF2Conditions_IsValid(int value) {
    return CMsgQuestObjectiveDef_ETF2Conditions_IsValid(value);
  }
  static const ETF2Conditions ETF2Conditions_MIN =
    CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MIN;
  static const ETF2Conditions ETF2Conditions_MAX =
    CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_MAX;
  static const int ETF2Conditions_ARRAYSIZE =
    CMsgQuestObjectiveDef_ETF2Conditions_ETF2Conditions_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ETF2Conditions_descriptor() {
    return CMsgQuestObjectiveDef_ETF2Conditions_descriptor();
  }
  static inline const ::std::string& ETF2Conditions_Name(ETF2Conditions value) {
    return CMsgQuestObjectiveDef_ETF2Conditions_Name(value);
  }
  static inline bool ETF2Conditions_Parse(const ::std::string& name,
      ETF2Conditions* value) {
    return CMsgQuestObjectiveDef_ETF2Conditions_Parse(name, value);
  }

  typedef CMsgQuestObjectiveDef_ETF2Team ETF2Team;
  static const ETF2Team TF_TEAM_RED = CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_RED;
  static const ETF2Team TF_TEAM_BLUE = CMsgQuestObjectiveDef_ETF2Team_TF_TEAM_BLUE;
  static inline bool ETF2Team_IsValid(int value) {
    return CMsgQuestObjectiveDef_ETF2Team_IsValid(value);
  }
  static const ETF2Team ETF2Team_MIN =
    CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MIN;
  static const ETF2Team ETF2Team_MAX =
    CMsgQuestObjectiveDef_ETF2Team_ETF2Team_MAX;
  static const int ETF2Team_ARRAYSIZE =
    CMsgQuestObjectiveDef_ETF2Team_ETF2Team_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ETF2Team_descriptor() {
    return CMsgQuestObjectiveDef_ETF2Team_descriptor();
  }
  static inline const ::std::string& ETF2Team_Name(ETF2Team value) {
    return CMsgQuestObjectiveDef_ETF2Team_Name(value);
  }
  static inline bool ETF2Team_Parse(const ::std::string& name,
      ETF2Team* value) {
    return CMsgQuestObjectiveDef_ETF2Team_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // optional string loc_desctoken = 2;
  inline bool has_loc_desctoken() const;
  inline void clear_loc_desctoken();
  static const int kLocDesctokenFieldNumber = 2;
  inline const ::std::string& loc_desctoken() const;
  inline void set_loc_desctoken(const ::std::string& value);
  inline void set_loc_desctoken(const char* value);
  inline void set_loc_desctoken(const char* value, size_t size);
  inline ::std::string* mutable_loc_desctoken();
  inline ::std::string* release_loc_desctoken();
  inline void set_allocated_loc_desctoken(::std::string* loc_desctoken);

  // optional uint32 points = 3;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 3;
  inline ::google::protobuf::uint32 points() const;
  inline void set_points(::google::protobuf::uint32 value);

  // optional uint32 conditions_defindex = 5;
  inline bool has_conditions_defindex() const;
  inline void clear_conditions_defindex();
  static const int kConditionsDefindexFieldNumber = 5;
  inline ::google::protobuf::uint32 conditions_defindex() const;
  inline void set_conditions_defindex(::google::protobuf::uint32 value);

  // repeated string map = 8;
  inline int map_size() const;
  inline void clear_map();
  static const int kMapFieldNumber = 8;
  inline const ::std::string& map(int index) const;
  inline ::std::string* mutable_map(int index);
  inline void set_map(int index, const ::std::string& value);
  inline void set_map(int index, const char* value);
  inline void set_map(int index, const char* value, size_t size);
  inline ::std::string* add_map();
  inline void add_map(const ::std::string& value);
  inline void add_map(const char* value);
  inline void add_map(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& map() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_map();

  // repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9;
  inline int game_mode_size() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 9;
  inline ::CMsgQuestObjectiveDef_ETF2GameModes game_mode(int index) const;
  inline void set_game_mode(int index, ::CMsgQuestObjectiveDef_ETF2GameModes value);
  inline void add_game_mode(::CMsgQuestObjectiveDef_ETF2GameModes value);
  inline const ::google::protobuf::RepeatedField<int>& game_mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_game_mode();

  // optional .CMsgQuestObjectiveDef.ETF2Team team = 10;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 10;
  inline ::CMsgQuestObjectiveDef_ETF2Team team() const;
  inline void set_team(::CMsgQuestObjectiveDef_ETF2Team value);

  // repeated .CMsgVarField condition_vars = 11;
  inline int condition_vars_size() const;
  inline void clear_condition_vars();
  static const int kConditionVarsFieldNumber = 11;
  inline const ::CMsgVarField& condition_vars(int index) const;
  inline ::CMsgVarField* mutable_condition_vars(int index);
  inline ::CMsgVarField* add_condition_vars();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
      condition_vars() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
      mutable_condition_vars();

  // repeated .CMsgVarField classes_vars = 12;
  inline int classes_vars_size() const;
  inline void clear_classes_vars();
  static const int kClassesVarsFieldNumber = 12;
  inline const ::CMsgVarField& classes_vars(int index) const;
  inline ::CMsgVarField* mutable_classes_vars(int index);
  inline ::CMsgVarField* add_classes_vars();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
      classes_vars() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
      mutable_classes_vars();

  // repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13;
  inline int conditions_size() const;
  inline void clear_conditions();
  static const int kConditionsFieldNumber = 13;
  inline ::CMsgQuestObjectiveDef_ETF2Conditions conditions(int index) const;
  inline void set_conditions(int index, ::CMsgQuestObjectiveDef_ETF2Conditions value);
  inline void add_conditions(::CMsgQuestObjectiveDef_ETF2Conditions value);
  inline const ::google::protobuf::RepeatedField<int>& conditions() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_conditions();

  // optional .LogicalOperation condition_logic = 14;
  inline bool has_condition_logic() const;
  inline void clear_condition_logic();
  static const int kConditionLogicFieldNumber = 14;
  inline ::LogicalOperation condition_logic() const;
  inline void set_condition_logic(::LogicalOperation value);

  // repeated string item_name = 15;
  inline int item_name_size() const;
  inline void clear_item_name();
  static const int kItemNameFieldNumber = 15;
  inline const ::std::string& item_name(int index) const;
  inline ::std::string* mutable_item_name(int index);
  inline void set_item_name(int index, const ::std::string& value);
  inline void set_item_name(int index, const char* value);
  inline void set_item_name(int index, const char* value, size_t size);
  inline ::std::string* add_item_name();
  inline void add_item_name(const ::std::string& value);
  inline void add_item_name(const char* value);
  inline void add_item_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& item_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_item_name();

  // optional .LogicalOperation item_logic = 16;
  inline bool has_item_logic() const;
  inline void clear_item_logic();
  static const int kItemLogicFieldNumber = 16;
  inline ::LogicalOperation item_logic() const;
  inline void set_item_logic(::LogicalOperation value);

  // optional uint32 jump_state = 17;
  inline bool has_jump_state() const;
  inline void clear_jump_state();
  static const int kJumpStateFieldNumber = 17;
  inline ::google::protobuf::uint32 jump_state() const;
  inline void set_jump_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgQuestObjectiveDef)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_loc_desctoken();
  inline void clear_has_loc_desctoken();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_conditions_defindex();
  inline void clear_has_conditions_defindex();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_condition_logic();
  inline void clear_has_condition_logic();
  inline void set_has_item_logic();
  inline void clear_has_item_logic();
  inline void set_has_jump_state();
  inline void clear_has_jump_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  ::std::string* loc_desctoken_;
  ::google::protobuf::uint32 points_;
  ::google::protobuf::uint32 conditions_defindex_;
  ::google::protobuf::RepeatedPtrField< ::std::string> map_;
  ::google::protobuf::RepeatedField<int> game_mode_;
  ::google::protobuf::RepeatedPtrField< ::CMsgVarField > condition_vars_;
  ::google::protobuf::RepeatedPtrField< ::CMsgVarField > classes_vars_;
  int team_;
  int condition_logic_;
  ::google::protobuf::RepeatedField<int> conditions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> item_name_;
  int item_logic_;
  ::google::protobuf::uint32 jump_state_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestObjectiveDef* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestDef_MMCriteria : public ::google::protobuf::Message {
 public:
  CMsgQuestDef_MMCriteria();
  virtual ~CMsgQuestDef_MMCriteria();

  CMsgQuestDef_MMCriteria(const CMsgQuestDef_MMCriteria& from);

  inline CMsgQuestDef_MMCriteria& operator=(const CMsgQuestDef_MMCriteria& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestDef_MMCriteria& default_instance();

  void Swap(CMsgQuestDef_MMCriteria* other);

  // implements Message ----------------------------------------------

  CMsgQuestDef_MMCriteria* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestDef_MMCriteria& from);
  void MergeFrom(const CMsgQuestDef_MMCriteria& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string group_name = 1;
  inline bool has_group_name() const;
  inline void clear_group_name();
  static const int kGroupNameFieldNumber = 1;
  inline const ::std::string& group_name() const;
  inline void set_group_name(const ::std::string& value);
  inline void set_group_name(const char* value);
  inline void set_group_name(const char* value, size_t size);
  inline ::std::string* mutable_group_name();
  inline ::std::string* release_group_name();
  inline void set_allocated_group_name(::std::string* group_name);

  // optional string category_name = 2;
  inline bool has_category_name() const;
  inline void clear_category_name();
  static const int kCategoryNameFieldNumber = 2;
  inline const ::std::string& category_name() const;
  inline void set_category_name(const ::std::string& value);
  inline void set_category_name(const char* value);
  inline void set_category_name(const char* value, size_t size);
  inline ::std::string* mutable_category_name();
  inline ::std::string* release_category_name();
  inline void set_allocated_category_name(::std::string* category_name);

  // optional string map_name = 3;
  inline bool has_map_name() const;
  inline void clear_map_name();
  static const int kMapNameFieldNumber = 3;
  inline const ::std::string& map_name() const;
  inline void set_map_name(const ::std::string& value);
  inline void set_map_name(const char* value);
  inline void set_map_name(const char* value, size_t size);
  inline ::std::string* mutable_map_name();
  inline ::std::string* release_map_name();
  inline void set_allocated_map_name(::std::string* map_name);

  // @@protoc_insertion_point(class_scope:CMsgQuestDef.MMCriteria)
 private:
  inline void set_has_group_name();
  inline void clear_has_group_name();
  inline void set_has_category_name();
  inline void clear_has_category_name();
  inline void set_has_map_name();
  inline void clear_has_map_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* group_name_;
  ::std::string* category_name_;
  ::std::string* map_name_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestDef_MMCriteria* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestDef_ObjectiveInstance : public ::google::protobuf::Message {
 public:
  CMsgQuestDef_ObjectiveInstance();
  virtual ~CMsgQuestDef_ObjectiveInstance();

  CMsgQuestDef_ObjectiveInstance(const CMsgQuestDef_ObjectiveInstance& from);

  inline CMsgQuestDef_ObjectiveInstance& operator=(const CMsgQuestDef_ObjectiveInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestDef_ObjectiveInstance& default_instance();

  void Swap(CMsgQuestDef_ObjectiveInstance* other);

  // implements Message ----------------------------------------------

  CMsgQuestDef_ObjectiveInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestDef_ObjectiveInstance& from);
  void MergeFrom(const CMsgQuestDef_ObjectiveInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgProtoDefID objective = 1;
  inline bool has_objective() const;
  inline void clear_objective();
  static const int kObjectiveFieldNumber = 1;
  inline const ::CMsgProtoDefID& objective() const;
  inline ::CMsgProtoDefID* mutable_objective();
  inline ::CMsgProtoDefID* release_objective();
  inline void set_allocated_objective(::CMsgProtoDefID* objective);

  // optional .EQuestPoints point_type = 2;
  inline bool has_point_type() const;
  inline void clear_point_type();
  static const int kPointTypeFieldNumber = 2;
  inline ::EQuestPoints point_type() const;
  inline void set_point_type(::EQuestPoints value);

  // optional uint32 point_value = 3;
  inline bool has_point_value() const;
  inline void clear_point_value();
  static const int kPointValueFieldNumber = 3;
  inline ::google::protobuf::uint32 point_value() const;
  inline void set_point_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgQuestDef.ObjectiveInstance)
 private:
  inline void set_has_objective();
  inline void clear_has_objective();
  inline void set_has_point_type();
  inline void clear_has_point_type();
  inline void set_has_point_value();
  inline void clear_has_point_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefID* objective_;
  int point_type_;
  ::google::protobuf::uint32 point_value_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestDef_ObjectiveInstance* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestDef : public ::google::protobuf::Message {
 public:
  CMsgQuestDef();
  virtual ~CMsgQuestDef();

  CMsgQuestDef(const CMsgQuestDef& from);

  inline CMsgQuestDef& operator=(const CMsgQuestDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestDef& default_instance();

  void Swap(CMsgQuestDef* other);

  // implements Message ----------------------------------------------

  CMsgQuestDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestDef& from);
  void MergeFrom(const CMsgQuestDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgQuestDef_MMCriteria MMCriteria;
  typedef CMsgQuestDef_ObjectiveInstance ObjectiveInstance;

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // optional uint32 max_points_0 = 2;
  inline bool has_max_points_0() const;
  inline void clear_max_points_0();
  static const int kMaxPoints0FieldNumber = 2;
  inline ::google::protobuf::uint32 max_points_0() const;
  inline void set_max_points_0(::google::protobuf::uint32 value);

  // optional uint32 max_points_1 = 3;
  inline bool has_max_points_1() const;
  inline void clear_max_points_1();
  static const int kMaxPoints1FieldNumber = 3;
  inline ::google::protobuf::uint32 max_points_1() const;
  inline void set_max_points_1(::google::protobuf::uint32 value);

  // optional uint32 max_points_2 = 4;
  inline bool has_max_points_2() const;
  inline void clear_max_points_2();
  static const int kMaxPoints2FieldNumber = 4;
  inline ::google::protobuf::uint32 max_points_2() const;
  inline void set_max_points_2(::google::protobuf::uint32 value);

  // optional string name_loctoken = 5;
  inline bool has_name_loctoken() const;
  inline void clear_name_loctoken();
  static const int kNameLoctokenFieldNumber = 5;
  inline const ::std::string& name_loctoken() const;
  inline void set_name_loctoken(const ::std::string& value);
  inline void set_name_loctoken(const char* value);
  inline void set_name_loctoken(const char* value, size_t size);
  inline ::std::string* mutable_name_loctoken();
  inline ::std::string* release_name_loctoken();
  inline void set_allocated_name_loctoken(::std::string* name_loctoken);

  // optional string operation = 7;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 7;
  inline const ::std::string& operation() const;
  inline void set_operation(const ::std::string& value);
  inline void set_operation(const char* value);
  inline void set_operation(const char* value, size_t size);
  inline ::std::string* mutable_operation();
  inline ::std::string* release_operation();
  inline void set_allocated_operation(::std::string* operation);

  // optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
  inline bool has_mm_criteria() const;
  inline void clear_mm_criteria();
  static const int kMmCriteriaFieldNumber = 8;
  inline const ::CMsgQuestDef_MMCriteria& mm_criteria() const;
  inline ::CMsgQuestDef_MMCriteria* mutable_mm_criteria();
  inline ::CMsgQuestDef_MMCriteria* release_mm_criteria();
  inline void set_allocated_mm_criteria(::CMsgQuestDef_MMCriteria* mm_criteria);

  // optional string node_image = 12;
  inline bool has_node_image() const;
  inline void clear_node_image();
  static const int kNodeImageFieldNumber = 12;
  inline const ::std::string& node_image() const;
  inline void set_node_image(const ::std::string& value);
  inline void set_node_image(const char* value);
  inline void set_node_image(const char* value, size_t size);
  inline ::std::string* mutable_node_image();
  inline ::std::string* release_node_image();
  inline void set_allocated_node_image(::std::string* node_image);

  // optional string icon_image = 13;
  inline bool has_icon_image() const;
  inline void clear_icon_image();
  static const int kIconImageFieldNumber = 13;
  inline const ::std::string& icon_image() const;
  inline void set_icon_image(const ::std::string& value);
  inline void set_icon_image(const char* value);
  inline void set_icon_image(const char* value, size_t size);
  inline ::std::string* mutable_icon_image();
  inline ::std::string* release_icon_image();
  inline void set_allocated_icon_image(::std::string* icon_image);

  // optional .CMsgProtoDefID theme = 14;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 14;
  inline const ::CMsgProtoDefID& theme() const;
  inline ::CMsgProtoDefID* mutable_theme();
  inline ::CMsgProtoDefID* release_theme();
  inline void set_allocated_theme(::CMsgProtoDefID* theme);

  // repeated string loaner_names = 15;
  inline int loaner_names_size() const;
  inline void clear_loaner_names();
  static const int kLoanerNamesFieldNumber = 15;
  inline const ::std::string& loaner_names(int index) const;
  inline ::std::string* mutable_loaner_names(int index);
  inline void set_loaner_names(int index, const ::std::string& value);
  inline void set_loaner_names(int index, const char* value);
  inline void set_loaner_names(int index, const char* value, size_t size);
  inline ::std::string* add_loaner_names();
  inline void add_loaner_names(const ::std::string& value);
  inline void add_loaner_names(const char* value);
  inline void add_loaner_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& loaner_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_loaner_names();

  // repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
  inline int objectives_size() const;
  inline void clear_objectives();
  static const int kObjectivesFieldNumber = 16;
  inline const ::CMsgQuestDef_ObjectiveInstance& objectives(int index) const;
  inline ::CMsgQuestDef_ObjectiveInstance* mutable_objectives(int index);
  inline ::CMsgQuestDef_ObjectiveInstance* add_objectives();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance >&
      objectives() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance >*
      mutable_objectives();

  // repeated string map = 17;
  inline int map_size() const;
  inline void clear_map();
  static const int kMapFieldNumber = 17;
  inline const ::std::string& map(int index) const;
  inline ::std::string* mutable_map(int index);
  inline void set_map(int index, const ::std::string& value);
  inline void set_map(int index, const char* value);
  inline void set_map(int index, const char* value, size_t size);
  inline ::std::string* add_map();
  inline void add_map(const ::std::string& value);
  inline void add_map(const char* value);
  inline void add_map(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& map() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_map();

  // @@protoc_insertion_point(class_scope:CMsgQuestDef)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_max_points_0();
  inline void clear_has_max_points_0();
  inline void set_has_max_points_1();
  inline void clear_has_max_points_1();
  inline void set_has_max_points_2();
  inline void clear_has_max_points_2();
  inline void set_has_name_loctoken();
  inline void clear_has_name_loctoken();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_mm_criteria();
  inline void clear_has_mm_criteria();
  inline void set_has_node_image();
  inline void clear_has_node_image();
  inline void set_has_icon_image();
  inline void clear_has_icon_image();
  inline void set_has_theme();
  inline void clear_has_theme();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  ::google::protobuf::uint32 max_points_0_;
  ::google::protobuf::uint32 max_points_1_;
  ::std::string* name_loctoken_;
  ::std::string* operation_;
  ::CMsgQuestDef_MMCriteria* mm_criteria_;
  ::std::string* node_image_;
  ::std::string* icon_image_;
  ::CMsgProtoDefID* theme_;
  ::google::protobuf::RepeatedPtrField< ::std::string> loaner_names_;
  ::google::protobuf::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance > objectives_;
  ::google::protobuf::RepeatedPtrField< ::std::string> map_;
  ::google::protobuf::uint32 max_points_2_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestDef* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestMapStoreItem : public ::google::protobuf::Message {
 public:
  CMsgQuestMapStoreItem();
  virtual ~CMsgQuestMapStoreItem();

  CMsgQuestMapStoreItem(const CMsgQuestMapStoreItem& from);

  inline CMsgQuestMapStoreItem& operator=(const CMsgQuestMapStoreItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestMapStoreItem& default_instance();

  void Swap(CMsgQuestMapStoreItem* other);

  // implements Message ----------------------------------------------

  CMsgQuestMapStoreItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestMapStoreItem& from);
  void MergeFrom(const CMsgQuestMapStoreItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // optional string item_name = 2;
  inline bool has_item_name() const;
  inline void clear_item_name();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& item_name() const;
  inline void set_item_name(const ::std::string& value);
  inline void set_item_name(const char* value);
  inline void set_item_name(const char* value, size_t size);
  inline ::std::string* mutable_item_name();
  inline ::std::string* release_item_name();
  inline void set_allocated_item_name(::std::string* item_name);

  // optional string reward_lootlist_name = 6;
  inline bool has_reward_lootlist_name() const;
  inline void clear_reward_lootlist_name();
  static const int kRewardLootlistNameFieldNumber = 6;
  inline const ::std::string& reward_lootlist_name() const;
  inline void set_reward_lootlist_name(const ::std::string& value);
  inline void set_reward_lootlist_name(const char* value);
  inline void set_reward_lootlist_name(const char* value, size_t size);
  inline ::std::string* mutable_reward_lootlist_name();
  inline ::std::string* release_reward_lootlist_name();
  inline void set_allocated_reward_lootlist_name(::std::string* reward_lootlist_name);

  // optional .CMsgVarField price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline const ::CMsgVarField& price() const;
  inline ::CMsgVarField* mutable_price();
  inline ::CMsgVarField* release_price();
  inline void set_allocated_price(::CMsgVarField* price);

  // optional uint32 purchase_limit = 4;
  inline bool has_purchase_limit() const;
  inline void clear_purchase_limit();
  static const int kPurchaseLimitFieldNumber = 4;
  inline ::google::protobuf::uint32 purchase_limit() const;
  inline void set_purchase_limit(::google::protobuf::uint32 value);

  // optional uint32 sort_group = 5;
  inline bool has_sort_group() const;
  inline void clear_sort_group();
  static const int kSortGroupFieldNumber = 5;
  inline ::google::protobuf::uint32 sort_group() const;
  inline void set_sort_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgQuestMapStoreItem)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_item_name();
  inline void clear_has_item_name();
  inline void set_has_reward_lootlist_name();
  inline void clear_has_reward_lootlist_name();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_purchase_limit();
  inline void clear_has_purchase_limit();
  inline void set_has_sort_group();
  inline void clear_has_sort_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  ::std::string* item_name_;
  ::std::string* reward_lootlist_name_;
  ::CMsgVarField* price_;
  ::google::protobuf::uint32 purchase_limit_;
  ::google::protobuf::uint32 sort_group_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestMapStoreItem* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestMapRegionDef_RegionLink : public ::google::protobuf::Message {
 public:
  CMsgQuestMapRegionDef_RegionLink();
  virtual ~CMsgQuestMapRegionDef_RegionLink();

  CMsgQuestMapRegionDef_RegionLink(const CMsgQuestMapRegionDef_RegionLink& from);

  inline CMsgQuestMapRegionDef_RegionLink& operator=(const CMsgQuestMapRegionDef_RegionLink& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestMapRegionDef_RegionLink& default_instance();

  void Swap(CMsgQuestMapRegionDef_RegionLink* other);

  // implements Message ----------------------------------------------

  CMsgQuestMapRegionDef_RegionLink* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestMapRegionDef_RegionLink& from);
  void MergeFrom(const CMsgQuestMapRegionDef_RegionLink& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefID target_region_defid = 1;
  inline bool has_target_region_defid() const;
  inline void clear_target_region_defid();
  static const int kTargetRegionDefidFieldNumber = 1;
  inline const ::CMsgProtoDefID& target_region_defid() const;
  inline ::CMsgProtoDefID* mutable_target_region_defid();
  inline ::CMsgProtoDefID* release_target_region_defid();
  inline void set_allocated_target_region_defid(::CMsgProtoDefID* target_region_defid);

  // optional uint32 xpos = 2;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 2;
  inline ::google::protobuf::uint32 xpos() const;
  inline void set_xpos(::google::protobuf::uint32 value);

  // optional uint32 ypos = 3;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 3;
  inline ::google::protobuf::uint32 ypos() const;
  inline void set_ypos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgQuestMapRegionDef.RegionLink)
 private:
  inline void set_has_target_region_defid();
  inline void clear_has_target_region_defid();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefID* target_region_defid_;
  ::google::protobuf::uint32 xpos_;
  ::google::protobuf::uint32 ypos_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestMapRegionDef_RegionLink* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestMapRegionDef : public ::google::protobuf::Message {
 public:
  CMsgQuestMapRegionDef();
  virtual ~CMsgQuestMapRegionDef();

  CMsgQuestMapRegionDef(const CMsgQuestMapRegionDef& from);

  inline CMsgQuestMapRegionDef& operator=(const CMsgQuestMapRegionDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestMapRegionDef& default_instance();

  void Swap(CMsgQuestMapRegionDef* other);

  // implements Message ----------------------------------------------

  CMsgQuestMapRegionDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestMapRegionDef& from);
  void MergeFrom(const CMsgQuestMapRegionDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgQuestMapRegionDef_RegionLink RegionLink;

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string resfile = 3;
  inline bool has_resfile() const;
  inline void clear_resfile();
  static const int kResfileFieldNumber = 3;
  inline const ::std::string& resfile() const;
  inline void set_resfile(const ::std::string& value);
  inline void set_resfile(const char* value);
  inline void set_resfile(const char* value, size_t size);
  inline ::std::string* mutable_resfile();
  inline ::std::string* release_resfile();
  inline void set_allocated_resfile(::std::string* resfile);

  // repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 4;
  inline const ::CMsgQuestMapRegionDef_RegionLink& links(int index) const;
  inline ::CMsgQuestMapRegionDef_RegionLink* mutable_links(int index);
  inline ::CMsgQuestMapRegionDef_RegionLink* add_links();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink >&
      links() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink >*
      mutable_links();

  // optional .CMsgProtoDefID return_link = 5;
  inline bool has_return_link() const;
  inline void clear_return_link();
  static const int kReturnLinkFieldNumber = 5;
  inline const ::CMsgProtoDefID& return_link() const;
  inline ::CMsgProtoDefID* mutable_return_link();
  inline ::CMsgProtoDefID* release_return_link();
  inline void set_allocated_return_link(::CMsgProtoDefID* return_link);

  // optional float radio_freq = 6;
  inline bool has_radio_freq() const;
  inline void clear_radio_freq();
  static const int kRadioFreqFieldNumber = 6;
  inline float radio_freq() const;
  inline void set_radio_freq(float value);

  // optional float zoom_scale = 7;
  inline bool has_zoom_scale() const;
  inline void clear_zoom_scale();
  static const int kZoomScaleFieldNumber = 7;
  inline float zoom_scale() const;
  inline void set_zoom_scale(float value);

  // optional .CMsgProtoDefID star_type = 8;
  inline bool has_star_type() const;
  inline void clear_star_type();
  static const int kStarTypeFieldNumber = 8;
  inline const ::CMsgProtoDefID& star_type() const;
  inline ::CMsgProtoDefID* mutable_star_type();
  inline ::CMsgProtoDefID* release_star_type();
  inline void set_allocated_star_type(::CMsgProtoDefID* star_type);

  // @@protoc_insertion_point(class_scope:CMsgQuestMapRegionDef)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_resfile();
  inline void clear_has_resfile();
  inline void set_has_return_link();
  inline void clear_has_return_link();
  inline void set_has_radio_freq();
  inline void clear_has_radio_freq();
  inline void set_has_zoom_scale();
  inline void clear_has_zoom_scale();
  inline void set_has_star_type();
  inline void clear_has_star_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  ::std::string* name_;
  ::std::string* resfile_;
  ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink > links_;
  ::CMsgProtoDefID* return_link_;
  float radio_freq_;
  float zoom_scale_;
  ::CMsgProtoDefID* star_type_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestMapRegionDef* default_instance_;
};
// -------------------------------------------------------------------

class CMsgVarField : public ::google::protobuf::Message {
 public:
  CMsgVarField();
  virtual ~CMsgVarField();

  CMsgVarField(const CMsgVarField& from);

  inline CMsgVarField& operator=(const CMsgVarField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgVarField& default_instance();

  enum ValueCase {
    kFloat = 2,
    kDouble = 3,
    kUint32 = 4,
    kUint64 = 5,
    kSint32 = 6,
    kSint64 = 7,
    kBool = 8,
    kString = 9,
    VALUE_NOT_SET = 0,
  };

  void Swap(CMsgVarField* other);

  // implements Message ----------------------------------------------

  CMsgVarField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgVarField& from);
  void MergeFrom(const CMsgVarField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string variable = 1;
  inline bool has_variable() const;
  inline void clear_variable();
  static const int kVariableFieldNumber = 1;
  inline const ::std::string& variable() const;
  inline void set_variable(const ::std::string& value);
  inline void set_variable(const char* value);
  inline void set_variable(const char* value, size_t size);
  inline ::std::string* mutable_variable();
  inline ::std::string* release_variable();
  inline void set_allocated_variable(::std::string* variable);

  // optional float float = 2;
  inline bool has_float_() const;
  inline void clear_float_();
  static const int kFloatFieldNumber = 2;
  inline float float_() const;
  inline void set_float_(float value);

  // optional double double = 3;
  inline bool has_double_() const;
  inline void clear_double_();
  static const int kDoubleFieldNumber = 3;
  inline double double_() const;
  inline void set_double_(double value);

  // optional uint32 uint32 = 4;
  inline bool has_uint32() const;
  inline void clear_uint32();
  static const int kUint32FieldNumber = 4;
  inline ::google::protobuf::uint32 uint32() const;
  inline void set_uint32(::google::protobuf::uint32 value);

  // optional uint64 uint64 = 5;
  inline bool has_uint64() const;
  inline void clear_uint64();
  static const int kUint64FieldNumber = 5;
  inline ::google::protobuf::uint64 uint64() const;
  inline void set_uint64(::google::protobuf::uint64 value);

  // optional sint32 sint32 = 6;
  inline bool has_sint32() const;
  inline void clear_sint32();
  static const int kSint32FieldNumber = 6;
  inline ::google::protobuf::int32 sint32() const;
  inline void set_sint32(::google::protobuf::int32 value);

  // optional sint64 sint64 = 7;
  inline bool has_sint64() const;
  inline void clear_sint64();
  static const int kSint64FieldNumber = 7;
  inline ::google::protobuf::int64 sint64() const;
  inline void set_sint64(::google::protobuf::int64 value);

  // optional bool bool = 8;
  inline bool has_bool_() const;
  inline void clear_bool_();
  static const int kBoolFieldNumber = 8;
  inline bool bool_() const;
  inline void set_bool_(bool value);

  // optional string string = 9;
  inline bool has_string() const;
  inline void clear_string();
  static const int kStringFieldNumber = 9;
  inline const ::std::string& string() const;
  inline void set_string(const ::std::string& value);
  inline void set_string(const char* value);
  inline void set_string(const char* value, size_t size);
  inline ::std::string* mutable_string();
  inline ::std::string* release_string();
  inline void set_allocated_string(::std::string* string);

  inline ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:CMsgVarField)
 private:
  inline void set_has_variable();
  inline void clear_has_variable();
  inline void set_has_float_();
  inline void set_has_double_();
  inline void set_has_uint32();
  inline void set_has_uint64();
  inline void set_has_sint32();
  inline void set_has_sint64();
  inline void set_has_bool_();
  inline void set_has_string();

  inline bool has_value();
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* variable_;
  union ValueUnion {
    float float__;
    double double__;
    ::google::protobuf::uint32 uint32_;
    ::google::protobuf::uint64 uint64_;
    ::google::protobuf::int32 sint32_;
    ::google::protobuf::int64 sint64_;
    bool bool__;
    ::std::string* string_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgVarField* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestMapStarType : public ::google::protobuf::Message {
 public:
  CMsgQuestMapStarType();
  virtual ~CMsgQuestMapStarType();

  CMsgQuestMapStarType(const CMsgQuestMapStarType& from);

  inline CMsgQuestMapStarType& operator=(const CMsgQuestMapStarType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestMapStarType& default_instance();

  void Swap(CMsgQuestMapStarType* other);

  // implements Message ----------------------------------------------

  CMsgQuestMapStarType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestMapStarType& from);
  void MergeFrom(const CMsgQuestMapStarType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:CMsgQuestMapStarType)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestMapStarType* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestMapNodeDef : public ::google::protobuf::Message {
 public:
  CMsgQuestMapNodeDef();
  virtual ~CMsgQuestMapNodeDef();

  CMsgQuestMapNodeDef(const CMsgQuestMapNodeDef& from);

  inline CMsgQuestMapNodeDef& operator=(const CMsgQuestMapNodeDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestMapNodeDef& default_instance();

  void Swap(CMsgQuestMapNodeDef* other);

  // implements Message ----------------------------------------------

  CMsgQuestMapNodeDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestMapNodeDef& from);
  void MergeFrom(const CMsgQuestMapNodeDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // optional string name_loctoken = 4;
  inline bool has_name_loctoken() const;
  inline void clear_name_loctoken();
  static const int kNameLoctokenFieldNumber = 4;
  inline const ::std::string& name_loctoken() const;
  inline void set_name_loctoken(const ::std::string& value);
  inline void set_name_loctoken(const char* value);
  inline void set_name_loctoken(const char* value, size_t size);
  inline ::std::string* mutable_name_loctoken();
  inline ::std::string* release_name_loctoken();
  inline void set_allocated_name_loctoken(::std::string* name_loctoken);

  // optional float x_pos = 6;
  inline bool has_x_pos() const;
  inline void clear_x_pos();
  static const int kXPosFieldNumber = 6;
  inline float x_pos() const;
  inline void set_x_pos(float value);

  // optional float y_pos = 7;
  inline bool has_y_pos() const;
  inline void clear_y_pos();
  static const int kYPosFieldNumber = 7;
  inline float y_pos() const;
  inline void set_y_pos(float value);

  // optional .CMsgQuestMapNodeCondition condition = 9;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 9;
  inline const ::CMsgQuestMapNodeCondition& condition() const;
  inline ::CMsgQuestMapNodeCondition* mutable_condition();
  inline ::CMsgQuestMapNodeCondition* release_condition();
  inline void set_allocated_condition(::CMsgQuestMapNodeCondition* condition);

  // optional .CMsgProtoDefID owning_region = 10;
  inline bool has_owning_region() const;
  inline void clear_owning_region();
  static const int kOwningRegionFieldNumber = 10;
  inline const ::CMsgProtoDefID& owning_region() const;
  inline ::CMsgProtoDefID* mutable_owning_region();
  inline ::CMsgProtoDefID* release_owning_region();
  inline void set_allocated_owning_region(::CMsgProtoDefID* owning_region);

  // repeated .CMsgProtoDefID quest_options = 11;
  inline int quest_options_size() const;
  inline void clear_quest_options();
  static const int kQuestOptionsFieldNumber = 11;
  inline const ::CMsgProtoDefID& quest_options(int index) const;
  inline ::CMsgProtoDefID* mutable_quest_options(int index);
  inline ::CMsgProtoDefID* add_quest_options();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID >&
      quest_options() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID >*
      mutable_quest_options();

  // optional string associated_operation = 16;
  inline bool has_associated_operation() const;
  inline void clear_associated_operation();
  static const int kAssociatedOperationFieldNumber = 16;
  inline const ::std::string& associated_operation() const;
  inline void set_associated_operation(const ::std::string& value);
  inline void set_associated_operation(const char* value);
  inline void set_associated_operation(const char* value, size_t size);
  inline ::std::string* mutable_associated_operation();
  inline ::std::string* release_associated_operation();
  inline void set_allocated_associated_operation(::std::string* associated_operation);

  // optional string reward_item_name = 18;
  inline bool has_reward_item_name() const;
  inline void clear_reward_item_name();
  static const int kRewardItemNameFieldNumber = 18;
  inline const ::std::string& reward_item_name() const;
  inline void set_reward_item_name(const ::std::string& value);
  inline void set_reward_item_name(const char* value);
  inline void set_reward_item_name(const char* value, size_t size);
  inline ::std::string* mutable_reward_item_name();
  inline ::std::string* release_reward_item_name();
  inline void set_allocated_reward_item_name(::std::string* reward_item_name);

  // optional string reward_lootlist_name = 22;
  inline bool has_reward_lootlist_name() const;
  inline void clear_reward_lootlist_name();
  static const int kRewardLootlistNameFieldNumber = 22;
  inline const ::std::string& reward_lootlist_name() const;
  inline void set_reward_lootlist_name(const ::std::string& value);
  inline void set_reward_lootlist_name(const char* value);
  inline void set_reward_lootlist_name(const char* value, size_t size);
  inline ::std::string* mutable_reward_lootlist_name();
  inline ::std::string* release_reward_lootlist_name();
  inline void set_allocated_reward_lootlist_name(::std::string* reward_lootlist_name);

  // optional .ENodeCashReward cash_reward = 19;
  inline bool has_cash_reward() const;
  inline void clear_cash_reward();
  static const int kCashRewardFieldNumber = 19;
  inline ::ENodeCashReward cash_reward() const;
  inline void set_cash_reward(::ENodeCashReward value);

  // optional .CMsgProtoDefID star_type = 20;
  inline bool has_star_type() const;
  inline void clear_star_type();
  static const int kStarTypeFieldNumber = 20;
  inline const ::CMsgProtoDefID& star_type() const;
  inline ::CMsgProtoDefID* mutable_star_type();
  inline ::CMsgProtoDefID* release_star_type();
  inline void set_allocated_star_type(::CMsgProtoDefID* star_type);

  // optional uint32 stars_to_unlock = 21 [default = 1];
  inline bool has_stars_to_unlock() const;
  inline void clear_stars_to_unlock();
  static const int kStarsToUnlockFieldNumber = 21;
  inline ::google::protobuf::uint32 stars_to_unlock() const;
  inline void set_stars_to_unlock(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgQuestMapNodeDef)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_name_loctoken();
  inline void clear_has_name_loctoken();
  inline void set_has_x_pos();
  inline void clear_has_x_pos();
  inline void set_has_y_pos();
  inline void clear_has_y_pos();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_owning_region();
  inline void clear_has_owning_region();
  inline void set_has_associated_operation();
  inline void clear_has_associated_operation();
  inline void set_has_reward_item_name();
  inline void clear_has_reward_item_name();
  inline void set_has_reward_lootlist_name();
  inline void clear_has_reward_lootlist_name();
  inline void set_has_cash_reward();
  inline void clear_has_cash_reward();
  inline void set_has_star_type();
  inline void clear_has_star_type();
  inline void set_has_stars_to_unlock();
  inline void clear_has_stars_to_unlock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  ::std::string* name_loctoken_;
  float x_pos_;
  float y_pos_;
  ::CMsgQuestMapNodeCondition* condition_;
  ::CMsgProtoDefID* owning_region_;
  ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID > quest_options_;
  ::std::string* associated_operation_;
  ::std::string* reward_item_name_;
  ::std::string* reward_lootlist_name_;
  ::CMsgProtoDefID* star_type_;
  int cash_reward_;
  ::google::protobuf::uint32 stars_to_unlock_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestMapNodeDef* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Variables : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Variables();
  virtual ~CMsgPaintKit_Variables();

  CMsgPaintKit_Variables(const CMsgPaintKit_Variables& from);

  inline CMsgPaintKit_Variables& operator=(const CMsgPaintKit_Variables& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Variables& default_instance();

  void Swap(CMsgPaintKit_Variables* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Variables* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Variables& from);
  void MergeFrom(const CMsgPaintKit_Variables& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Variables)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Variables* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Operation_TextureStage : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Operation_TextureStage();
  virtual ~CMsgPaintKit_Operation_TextureStage();

  CMsgPaintKit_Operation_TextureStage(const CMsgPaintKit_Operation_TextureStage& from);

  inline CMsgPaintKit_Operation_TextureStage& operator=(const CMsgPaintKit_Operation_TextureStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Operation_TextureStage& default_instance();

  void Swap(CMsgPaintKit_Operation_TextureStage* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Operation_TextureStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Operation_TextureStage& from);
  void MergeFrom(const CMsgPaintKit_Operation_TextureStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVarField texture = 1;
  inline bool has_texture() const;
  inline void clear_texture();
  static const int kTextureFieldNumber = 1;
  inline const ::CMsgVarField& texture() const;
  inline ::CMsgVarField* mutable_texture();
  inline ::CMsgVarField* release_texture();
  inline void set_allocated_texture(::CMsgVarField* texture);

  // optional .CMsgVarField texture_red = 2;
  inline bool has_texture_red() const;
  inline void clear_texture_red();
  static const int kTextureRedFieldNumber = 2;
  inline const ::CMsgVarField& texture_red() const;
  inline ::CMsgVarField* mutable_texture_red();
  inline ::CMsgVarField* release_texture_red();
  inline void set_allocated_texture_red(::CMsgVarField* texture_red);

  // optional .CMsgVarField texture_blue = 3;
  inline bool has_texture_blue() const;
  inline void clear_texture_blue();
  static const int kTextureBlueFieldNumber = 3;
  inline const ::CMsgVarField& texture_blue() const;
  inline ::CMsgVarField* mutable_texture_blue();
  inline ::CMsgVarField* release_texture_blue();
  inline void set_allocated_texture_blue(::CMsgVarField* texture_blue);

  // optional .CMsgVarField adjust_black = 4;
  inline bool has_adjust_black() const;
  inline void clear_adjust_black();
  static const int kAdjustBlackFieldNumber = 4;
  inline const ::CMsgVarField& adjust_black() const;
  inline ::CMsgVarField* mutable_adjust_black();
  inline ::CMsgVarField* release_adjust_black();
  inline void set_allocated_adjust_black(::CMsgVarField* adjust_black);

  // optional .CMsgVarField adjust_offset = 5;
  inline bool has_adjust_offset() const;
  inline void clear_adjust_offset();
  static const int kAdjustOffsetFieldNumber = 5;
  inline const ::CMsgVarField& adjust_offset() const;
  inline ::CMsgVarField* mutable_adjust_offset();
  inline ::CMsgVarField* release_adjust_offset();
  inline void set_allocated_adjust_offset(::CMsgVarField* adjust_offset);

  // optional .CMsgVarField adjust_gamma = 6;
  inline bool has_adjust_gamma() const;
  inline void clear_adjust_gamma();
  static const int kAdjustGammaFieldNumber = 6;
  inline const ::CMsgVarField& adjust_gamma() const;
  inline ::CMsgVarField* mutable_adjust_gamma();
  inline ::CMsgVarField* release_adjust_gamma();
  inline void set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma);

  // optional .CMsgVarField rotation = 7;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 7;
  inline const ::CMsgVarField& rotation() const;
  inline ::CMsgVarField* mutable_rotation();
  inline ::CMsgVarField* release_rotation();
  inline void set_allocated_rotation(::CMsgVarField* rotation);

  // optional .CMsgVarField translate_u = 8;
  inline bool has_translate_u() const;
  inline void clear_translate_u();
  static const int kTranslateUFieldNumber = 8;
  inline const ::CMsgVarField& translate_u() const;
  inline ::CMsgVarField* mutable_translate_u();
  inline ::CMsgVarField* release_translate_u();
  inline void set_allocated_translate_u(::CMsgVarField* translate_u);

  // optional .CMsgVarField translate_v = 9;
  inline bool has_translate_v() const;
  inline void clear_translate_v();
  static const int kTranslateVFieldNumber = 9;
  inline const ::CMsgVarField& translate_v() const;
  inline ::CMsgVarField* mutable_translate_v();
  inline ::CMsgVarField* release_translate_v();
  inline void set_allocated_translate_v(::CMsgVarField* translate_v);

  // optional .CMsgVarField scale_uv = 10;
  inline bool has_scale_uv() const;
  inline void clear_scale_uv();
  static const int kScaleUvFieldNumber = 10;
  inline const ::CMsgVarField& scale_uv() const;
  inline ::CMsgVarField* mutable_scale_uv();
  inline ::CMsgVarField* release_scale_uv();
  inline void set_allocated_scale_uv(::CMsgVarField* scale_uv);

  // optional .CMsgVarField flip_u = 11;
  inline bool has_flip_u() const;
  inline void clear_flip_u();
  static const int kFlipUFieldNumber = 11;
  inline const ::CMsgVarField& flip_u() const;
  inline ::CMsgVarField* mutable_flip_u();
  inline ::CMsgVarField* release_flip_u();
  inline void set_allocated_flip_u(::CMsgVarField* flip_u);

  // optional .CMsgVarField flip_v = 12;
  inline bool has_flip_v() const;
  inline void clear_flip_v();
  static const int kFlipVFieldNumber = 12;
  inline const ::CMsgVarField& flip_v() const;
  inline ::CMsgVarField* mutable_flip_v();
  inline ::CMsgVarField* release_flip_v();
  inline void set_allocated_flip_v(::CMsgVarField* flip_v);

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_TextureStage)
 private:
  inline void set_has_texture();
  inline void clear_has_texture();
  inline void set_has_texture_red();
  inline void clear_has_texture_red();
  inline void set_has_texture_blue();
  inline void clear_has_texture_blue();
  inline void set_has_adjust_black();
  inline void clear_has_adjust_black();
  inline void set_has_adjust_offset();
  inline void clear_has_adjust_offset();
  inline void set_has_adjust_gamma();
  inline void clear_has_adjust_gamma();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_translate_u();
  inline void clear_has_translate_u();
  inline void set_has_translate_v();
  inline void clear_has_translate_v();
  inline void set_has_scale_uv();
  inline void clear_has_scale_uv();
  inline void set_has_flip_u();
  inline void clear_has_flip_u();
  inline void set_has_flip_v();
  inline void clear_has_flip_v();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVarField* texture_;
  ::CMsgVarField* texture_red_;
  ::CMsgVarField* texture_blue_;
  ::CMsgVarField* adjust_black_;
  ::CMsgVarField* adjust_offset_;
  ::CMsgVarField* adjust_gamma_;
  ::CMsgVarField* rotation_;
  ::CMsgVarField* translate_u_;
  ::CMsgVarField* translate_v_;
  ::CMsgVarField* scale_uv_;
  ::CMsgVarField* flip_u_;
  ::CMsgVarField* flip_v_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Operation_TextureStage* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Operation_CombineStage : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Operation_CombineStage();
  virtual ~CMsgPaintKit_Operation_CombineStage();

  CMsgPaintKit_Operation_CombineStage(const CMsgPaintKit_Operation_CombineStage& from);

  inline CMsgPaintKit_Operation_CombineStage& operator=(const CMsgPaintKit_Operation_CombineStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Operation_CombineStage& default_instance();

  void Swap(CMsgPaintKit_Operation_CombineStage* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Operation_CombineStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Operation_CombineStage& from);
  void MergeFrom(const CMsgPaintKit_Operation_CombineStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVarField adjust_black = 1;
  inline bool has_adjust_black() const;
  inline void clear_adjust_black();
  static const int kAdjustBlackFieldNumber = 1;
  inline const ::CMsgVarField& adjust_black() const;
  inline ::CMsgVarField* mutable_adjust_black();
  inline ::CMsgVarField* release_adjust_black();
  inline void set_allocated_adjust_black(::CMsgVarField* adjust_black);

  // optional .CMsgVarField adjust_offset = 2;
  inline bool has_adjust_offset() const;
  inline void clear_adjust_offset();
  static const int kAdjustOffsetFieldNumber = 2;
  inline const ::CMsgVarField& adjust_offset() const;
  inline ::CMsgVarField* mutable_adjust_offset();
  inline ::CMsgVarField* release_adjust_offset();
  inline void set_allocated_adjust_offset(::CMsgVarField* adjust_offset);

  // optional .CMsgVarField adjust_gamma = 3;
  inline bool has_adjust_gamma() const;
  inline void clear_adjust_gamma();
  static const int kAdjustGammaFieldNumber = 3;
  inline const ::CMsgVarField& adjust_gamma() const;
  inline ::CMsgVarField* mutable_adjust_gamma();
  inline ::CMsgVarField* release_adjust_gamma();
  inline void set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma);

  // optional .CMsgVarField rotation = 4;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 4;
  inline const ::CMsgVarField& rotation() const;
  inline ::CMsgVarField* mutable_rotation();
  inline ::CMsgVarField* release_rotation();
  inline void set_allocated_rotation(::CMsgVarField* rotation);

  // optional .CMsgVarField translate_u = 5;
  inline bool has_translate_u() const;
  inline void clear_translate_u();
  static const int kTranslateUFieldNumber = 5;
  inline const ::CMsgVarField& translate_u() const;
  inline ::CMsgVarField* mutable_translate_u();
  inline ::CMsgVarField* release_translate_u();
  inline void set_allocated_translate_u(::CMsgVarField* translate_u);

  // optional .CMsgVarField translate_v = 6;
  inline bool has_translate_v() const;
  inline void clear_translate_v();
  static const int kTranslateVFieldNumber = 6;
  inline const ::CMsgVarField& translate_v() const;
  inline ::CMsgVarField* mutable_translate_v();
  inline ::CMsgVarField* release_translate_v();
  inline void set_allocated_translate_v(::CMsgVarField* translate_v);

  // optional .CMsgVarField scale_uv = 7;
  inline bool has_scale_uv() const;
  inline void clear_scale_uv();
  static const int kScaleUvFieldNumber = 7;
  inline const ::CMsgVarField& scale_uv() const;
  inline ::CMsgVarField* mutable_scale_uv();
  inline ::CMsgVarField* release_scale_uv();
  inline void set_allocated_scale_uv(::CMsgVarField* scale_uv);

  // optional .CMsgVarField flip_u = 8;
  inline bool has_flip_u() const;
  inline void clear_flip_u();
  static const int kFlipUFieldNumber = 8;
  inline const ::CMsgVarField& flip_u() const;
  inline ::CMsgVarField* mutable_flip_u();
  inline ::CMsgVarField* release_flip_u();
  inline void set_allocated_flip_u(::CMsgVarField* flip_u);

  // optional .CMsgVarField flip_v = 9;
  inline bool has_flip_v() const;
  inline void clear_flip_v();
  static const int kFlipVFieldNumber = 9;
  inline const ::CMsgVarField& flip_v() const;
  inline ::CMsgVarField* mutable_flip_v();
  inline ::CMsgVarField* release_flip_v();
  inline void set_allocated_flip_v(::CMsgVarField* flip_v);

  // repeated .CMsgPaintKit_OperationNode operation_node = 11;
  inline int operation_node_size() const;
  inline void clear_operation_node();
  static const int kOperationNodeFieldNumber = 11;
  inline const ::CMsgPaintKit_OperationNode& operation_node(int index) const;
  inline ::CMsgPaintKit_OperationNode* mutable_operation_node(int index);
  inline ::CMsgPaintKit_OperationNode* add_operation_node();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
      operation_node() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
      mutable_operation_node();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_CombineStage)
 private:
  inline void set_has_adjust_black();
  inline void clear_has_adjust_black();
  inline void set_has_adjust_offset();
  inline void clear_has_adjust_offset();
  inline void set_has_adjust_gamma();
  inline void clear_has_adjust_gamma();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_translate_u();
  inline void clear_has_translate_u();
  inline void set_has_translate_v();
  inline void clear_has_translate_v();
  inline void set_has_scale_uv();
  inline void clear_has_scale_uv();
  inline void set_has_flip_u();
  inline void clear_has_flip_u();
  inline void set_has_flip_v();
  inline void clear_has_flip_v();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVarField* adjust_black_;
  ::CMsgVarField* adjust_offset_;
  ::CMsgVarField* adjust_gamma_;
  ::CMsgVarField* rotation_;
  ::CMsgVarField* translate_u_;
  ::CMsgVarField* translate_v_;
  ::CMsgVarField* scale_uv_;
  ::CMsgVarField* flip_u_;
  ::CMsgVarField* flip_v_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode > operation_node_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Operation_CombineStage* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Operation_SelectStage : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Operation_SelectStage();
  virtual ~CMsgPaintKit_Operation_SelectStage();

  CMsgPaintKit_Operation_SelectStage(const CMsgPaintKit_Operation_SelectStage& from);

  inline CMsgPaintKit_Operation_SelectStage& operator=(const CMsgPaintKit_Operation_SelectStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Operation_SelectStage& default_instance();

  void Swap(CMsgPaintKit_Operation_SelectStage* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Operation_SelectStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Operation_SelectStage& from);
  void MergeFrom(const CMsgPaintKit_Operation_SelectStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVarField groups = 1;
  inline bool has_groups() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 1;
  inline const ::CMsgVarField& groups() const;
  inline ::CMsgVarField* mutable_groups();
  inline ::CMsgVarField* release_groups();
  inline void set_allocated_groups(::CMsgVarField* groups);

  // repeated .CMsgVarField select = 2;
  inline int select_size() const;
  inline void clear_select();
  static const int kSelectFieldNumber = 2;
  inline const ::CMsgVarField& select(int index) const;
  inline ::CMsgVarField* mutable_select(int index);
  inline ::CMsgVarField* add_select();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
      select() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
      mutable_select();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_SelectStage)
 private:
  inline void set_has_groups();
  inline void clear_has_groups();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVarField* groups_;
  ::google::protobuf::RepeatedPtrField< ::CMsgVarField > select_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Operation_SelectStage* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Operation_Sticker : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Operation_Sticker();
  virtual ~CMsgPaintKit_Operation_Sticker();

  CMsgPaintKit_Operation_Sticker(const CMsgPaintKit_Operation_Sticker& from);

  inline CMsgPaintKit_Operation_Sticker& operator=(const CMsgPaintKit_Operation_Sticker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Operation_Sticker& default_instance();

  void Swap(CMsgPaintKit_Operation_Sticker* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Operation_Sticker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Operation_Sticker& from);
  void MergeFrom(const CMsgPaintKit_Operation_Sticker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgVarField base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::CMsgVarField& base() const;
  inline ::CMsgVarField* mutable_base();
  inline ::CMsgVarField* release_base();
  inline void set_allocated_base(::CMsgVarField* base);

  // optional .CMsgVarField weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline const ::CMsgVarField& weight() const;
  inline ::CMsgVarField* mutable_weight();
  inline ::CMsgVarField* release_weight();
  inline void set_allocated_weight(::CMsgVarField* weight);

  // optional .CMsgVarField spec = 3;
  inline bool has_spec() const;
  inline void clear_spec();
  static const int kSpecFieldNumber = 3;
  inline const ::CMsgVarField& spec() const;
  inline ::CMsgVarField* mutable_spec();
  inline ::CMsgVarField* release_spec();
  inline void set_allocated_spec(::CMsgVarField* spec);

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_Sticker)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_spec();
  inline void clear_has_spec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgVarField* base_;
  ::CMsgVarField* weight_;
  ::CMsgVarField* spec_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Operation_Sticker* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Operation_StickerStage : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Operation_StickerStage();
  virtual ~CMsgPaintKit_Operation_StickerStage();

  CMsgPaintKit_Operation_StickerStage(const CMsgPaintKit_Operation_StickerStage& from);

  inline CMsgPaintKit_Operation_StickerStage& operator=(const CMsgPaintKit_Operation_StickerStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Operation_StickerStage& default_instance();

  void Swap(CMsgPaintKit_Operation_StickerStage* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Operation_StickerStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Operation_StickerStage& from);
  void MergeFrom(const CMsgPaintKit_Operation_StickerStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
  inline int sticker_size() const;
  inline void clear_sticker();
  static const int kStickerFieldNumber = 1;
  inline const ::CMsgPaintKit_Operation_Sticker& sticker(int index) const;
  inline ::CMsgPaintKit_Operation_Sticker* mutable_sticker(int index);
  inline ::CMsgPaintKit_Operation_Sticker* add_sticker();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker >&
      sticker() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker >*
      mutable_sticker();

  // optional .CMsgVarField dest_tl = 2;
  inline bool has_dest_tl() const;
  inline void clear_dest_tl();
  static const int kDestTlFieldNumber = 2;
  inline const ::CMsgVarField& dest_tl() const;
  inline ::CMsgVarField* mutable_dest_tl();
  inline ::CMsgVarField* release_dest_tl();
  inline void set_allocated_dest_tl(::CMsgVarField* dest_tl);

  // optional .CMsgVarField dest_tr = 3;
  inline bool has_dest_tr() const;
  inline void clear_dest_tr();
  static const int kDestTrFieldNumber = 3;
  inline const ::CMsgVarField& dest_tr() const;
  inline ::CMsgVarField* mutable_dest_tr();
  inline ::CMsgVarField* release_dest_tr();
  inline void set_allocated_dest_tr(::CMsgVarField* dest_tr);

  // optional .CMsgVarField dest_bl = 4;
  inline bool has_dest_bl() const;
  inline void clear_dest_bl();
  static const int kDestBlFieldNumber = 4;
  inline const ::CMsgVarField& dest_bl() const;
  inline ::CMsgVarField* mutable_dest_bl();
  inline ::CMsgVarField* release_dest_bl();
  inline void set_allocated_dest_bl(::CMsgVarField* dest_bl);

  // optional .CMsgVarField adjust_black = 5;
  inline bool has_adjust_black() const;
  inline void clear_adjust_black();
  static const int kAdjustBlackFieldNumber = 5;
  inline const ::CMsgVarField& adjust_black() const;
  inline ::CMsgVarField* mutable_adjust_black();
  inline ::CMsgVarField* release_adjust_black();
  inline void set_allocated_adjust_black(::CMsgVarField* adjust_black);

  // optional .CMsgVarField adjust_offset = 6;
  inline bool has_adjust_offset() const;
  inline void clear_adjust_offset();
  static const int kAdjustOffsetFieldNumber = 6;
  inline const ::CMsgVarField& adjust_offset() const;
  inline ::CMsgVarField* mutable_adjust_offset();
  inline ::CMsgVarField* release_adjust_offset();
  inline void set_allocated_adjust_offset(::CMsgVarField* adjust_offset);

  // optional .CMsgVarField adjust_gamma = 7;
  inline bool has_adjust_gamma() const;
  inline void clear_adjust_gamma();
  static const int kAdjustGammaFieldNumber = 7;
  inline const ::CMsgVarField& adjust_gamma() const;
  inline ::CMsgVarField* mutable_adjust_gamma();
  inline ::CMsgVarField* release_adjust_gamma();
  inline void set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma);

  // repeated .CMsgPaintKit_OperationNode operation_node = 9;
  inline int operation_node_size() const;
  inline void clear_operation_node();
  static const int kOperationNodeFieldNumber = 9;
  inline const ::CMsgPaintKit_OperationNode& operation_node(int index) const;
  inline ::CMsgPaintKit_OperationNode* mutable_operation_node(int index);
  inline ::CMsgPaintKit_OperationNode* add_operation_node();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
      operation_node() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
      mutable_operation_node();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation_StickerStage)
 private:
  inline void set_has_dest_tl();
  inline void clear_has_dest_tl();
  inline void set_has_dest_tr();
  inline void clear_has_dest_tr();
  inline void set_has_dest_bl();
  inline void clear_has_dest_bl();
  inline void set_has_adjust_black();
  inline void clear_has_adjust_black();
  inline void set_has_adjust_offset();
  inline void clear_has_adjust_offset();
  inline void set_has_adjust_gamma();
  inline void clear_has_adjust_gamma();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker > sticker_;
  ::CMsgVarField* dest_tl_;
  ::CMsgVarField* dest_tr_;
  ::CMsgVarField* dest_bl_;
  ::CMsgVarField* adjust_black_;
  ::CMsgVarField* adjust_offset_;
  ::CMsgVarField* adjust_gamma_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode > operation_node_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Operation_StickerStage* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_OperationStage : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_OperationStage();
  virtual ~CMsgPaintKit_OperationStage();

  CMsgPaintKit_OperationStage(const CMsgPaintKit_OperationStage& from);

  inline CMsgPaintKit_OperationStage& operator=(const CMsgPaintKit_OperationStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_OperationStage& default_instance();

  enum StageCase {
    kTextureLookup = 1,
    kCombineAdd = 2,
    kCombineLerp = 3,
    kCombineMultiply = 4,
    kSelect = 5,
    kApplySticker = 6,
    STAGE_NOT_SET = 0,
  };

  void Swap(CMsgPaintKit_OperationStage* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_OperationStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_OperationStage& from);
  void MergeFrom(const CMsgPaintKit_OperationStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
  inline bool has_texture_lookup() const;
  inline void clear_texture_lookup();
  static const int kTextureLookupFieldNumber = 1;
  inline const ::CMsgPaintKit_Operation_TextureStage& texture_lookup() const;
  inline ::CMsgPaintKit_Operation_TextureStage* mutable_texture_lookup();
  inline ::CMsgPaintKit_Operation_TextureStage* release_texture_lookup();
  inline void set_allocated_texture_lookup(::CMsgPaintKit_Operation_TextureStage* texture_lookup);

  // optional .CMsgPaintKit_Operation_CombineStage combine_add = 2;
  inline bool has_combine_add() const;
  inline void clear_combine_add();
  static const int kCombineAddFieldNumber = 2;
  inline const ::CMsgPaintKit_Operation_CombineStage& combine_add() const;
  inline ::CMsgPaintKit_Operation_CombineStage* mutable_combine_add();
  inline ::CMsgPaintKit_Operation_CombineStage* release_combine_add();
  inline void set_allocated_combine_add(::CMsgPaintKit_Operation_CombineStage* combine_add);

  // optional .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
  inline bool has_combine_lerp() const;
  inline void clear_combine_lerp();
  static const int kCombineLerpFieldNumber = 3;
  inline const ::CMsgPaintKit_Operation_CombineStage& combine_lerp() const;
  inline ::CMsgPaintKit_Operation_CombineStage* mutable_combine_lerp();
  inline ::CMsgPaintKit_Operation_CombineStage* release_combine_lerp();
  inline void set_allocated_combine_lerp(::CMsgPaintKit_Operation_CombineStage* combine_lerp);

  // optional .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
  inline bool has_combine_multiply() const;
  inline void clear_combine_multiply();
  static const int kCombineMultiplyFieldNumber = 4;
  inline const ::CMsgPaintKit_Operation_CombineStage& combine_multiply() const;
  inline ::CMsgPaintKit_Operation_CombineStage* mutable_combine_multiply();
  inline ::CMsgPaintKit_Operation_CombineStage* release_combine_multiply();
  inline void set_allocated_combine_multiply(::CMsgPaintKit_Operation_CombineStage* combine_multiply);

  // optional .CMsgPaintKit_Operation_SelectStage select = 5;
  inline bool has_select() const;
  inline void clear_select();
  static const int kSelectFieldNumber = 5;
  inline const ::CMsgPaintKit_Operation_SelectStage& select() const;
  inline ::CMsgPaintKit_Operation_SelectStage* mutable_select();
  inline ::CMsgPaintKit_Operation_SelectStage* release_select();
  inline void set_allocated_select(::CMsgPaintKit_Operation_SelectStage* select);

  // optional .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
  inline bool has_apply_sticker() const;
  inline void clear_apply_sticker();
  static const int kApplyStickerFieldNumber = 6;
  inline const ::CMsgPaintKit_Operation_StickerStage& apply_sticker() const;
  inline ::CMsgPaintKit_Operation_StickerStage* mutable_apply_sticker();
  inline ::CMsgPaintKit_Operation_StickerStage* release_apply_sticker();
  inline void set_allocated_apply_sticker(::CMsgPaintKit_Operation_StickerStage* apply_sticker);

  inline StageCase stage_case() const;
  // @@protoc_insertion_point(class_scope:CMsgPaintKit_OperationStage)
 private:
  inline void set_has_texture_lookup();
  inline void set_has_combine_add();
  inline void set_has_combine_lerp();
  inline void set_has_combine_multiply();
  inline void set_has_select();
  inline void set_has_apply_sticker();

  inline bool has_stage();
  void clear_stage();
  inline void clear_has_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union StageUnion {
    ::CMsgPaintKit_Operation_TextureStage* texture_lookup_;
    ::CMsgPaintKit_Operation_CombineStage* combine_add_;
    ::CMsgPaintKit_Operation_CombineStage* combine_lerp_;
    ::CMsgPaintKit_Operation_CombineStage* combine_multiply_;
    ::CMsgPaintKit_Operation_SelectStage* select_;
    ::CMsgPaintKit_Operation_StickerStage* apply_sticker_;
  } stage_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_OperationStage* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_OperationNode : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_OperationNode();
  virtual ~CMsgPaintKit_OperationNode();

  CMsgPaintKit_OperationNode(const CMsgPaintKit_OperationNode& from);

  inline CMsgPaintKit_OperationNode& operator=(const CMsgPaintKit_OperationNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_OperationNode& default_instance();

  enum NodeCase {
    kStage = 1,
    kOperationTemplate = 2,
    NODE_NOT_SET = 0,
  };

  void Swap(CMsgPaintKit_OperationNode* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_OperationNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_OperationNode& from);
  void MergeFrom(const CMsgPaintKit_OperationNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgPaintKit_OperationStage stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline const ::CMsgPaintKit_OperationStage& stage() const;
  inline ::CMsgPaintKit_OperationStage* mutable_stage();
  inline ::CMsgPaintKit_OperationStage* release_stage();
  inline void set_allocated_stage(::CMsgPaintKit_OperationStage* stage);

  // optional .CMsgProtoDefID operation_template = 2;
  inline bool has_operation_template() const;
  inline void clear_operation_template();
  static const int kOperationTemplateFieldNumber = 2;
  inline const ::CMsgProtoDefID& operation_template() const;
  inline ::CMsgProtoDefID* mutable_operation_template();
  inline ::CMsgProtoDefID* release_operation_template();
  inline void set_allocated_operation_template(::CMsgProtoDefID* operation_template);

  inline NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:CMsgPaintKit_OperationNode)
 private:
  inline void set_has_stage();
  inline void set_has_operation_template();

  inline bool has_node();
  void clear_node();
  inline void clear_has_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union NodeUnion {
    ::CMsgPaintKit_OperationStage* stage_;
    ::CMsgProtoDefID* operation_template_;
  } node_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_OperationNode* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Operation : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Operation();
  virtual ~CMsgPaintKit_Operation();

  CMsgPaintKit_Operation(const CMsgPaintKit_Operation& from);

  inline CMsgPaintKit_Operation& operator=(const CMsgPaintKit_Operation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Operation& default_instance();

  void Swap(CMsgPaintKit_Operation* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Operation& from);
  void MergeFrom(const CMsgPaintKit_Operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // repeated .CMsgPaintKit_OperationNode operation_node = 2;
  inline int operation_node_size() const;
  inline void clear_operation_node();
  static const int kOperationNodeFieldNumber = 2;
  inline const ::CMsgPaintKit_OperationNode& operation_node(int index) const;
  inline ::CMsgPaintKit_OperationNode* mutable_operation_node(int index);
  inline ::CMsgPaintKit_OperationNode* add_operation_node();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
      operation_node() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
      mutable_operation_node();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Operation)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode > operation_node_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Operation* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_ItemDefinition_Definition : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_ItemDefinition_Definition();
  virtual ~CMsgPaintKit_ItemDefinition_Definition();

  CMsgPaintKit_ItemDefinition_Definition(const CMsgPaintKit_ItemDefinition_Definition& from);

  inline CMsgPaintKit_ItemDefinition_Definition& operator=(const CMsgPaintKit_ItemDefinition_Definition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_ItemDefinition_Definition& default_instance();

  void Swap(CMsgPaintKit_ItemDefinition_Definition* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_ItemDefinition_Definition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_ItemDefinition_Definition& from);
  void MergeFrom(const CMsgPaintKit_ItemDefinition_Definition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgProtoDefID operation_template = 1;
  inline bool has_operation_template() const;
  inline void clear_operation_template();
  static const int kOperationTemplateFieldNumber = 1;
  inline const ::CMsgProtoDefID& operation_template() const;
  inline ::CMsgProtoDefID* mutable_operation_template();
  inline ::CMsgProtoDefID* release_operation_template();
  inline void set_allocated_operation_template(::CMsgProtoDefID* operation_template);

  // repeated .CMsgVarField variable = 2;
  inline int variable_size() const;
  inline void clear_variable();
  static const int kVariableFieldNumber = 2;
  inline const ::CMsgVarField& variable(int index) const;
  inline ::CMsgVarField* mutable_variable(int index);
  inline ::CMsgVarField* add_variable();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
      variable() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
      mutable_variable();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_ItemDefinition.Definition)
 private:
  inline void set_has_operation_template();
  inline void clear_has_operation_template();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefID* operation_template_;
  ::google::protobuf::RepeatedPtrField< ::CMsgVarField > variable_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_ItemDefinition_Definition* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_ItemDefinition : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_ItemDefinition();
  virtual ~CMsgPaintKit_ItemDefinition();

  CMsgPaintKit_ItemDefinition(const CMsgPaintKit_ItemDefinition& from);

  inline CMsgPaintKit_ItemDefinition& operator=(const CMsgPaintKit_ItemDefinition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_ItemDefinition& default_instance();

  void Swap(CMsgPaintKit_ItemDefinition* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_ItemDefinition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_ItemDefinition& from);
  void MergeFrom(const CMsgPaintKit_ItemDefinition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgPaintKit_ItemDefinition_Definition Definition;

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // required uint32 item_definition_index = 2;
  inline bool has_item_definition_index() const;
  inline void clear_item_definition_index();
  static const int kItemDefinitionIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 item_definition_index() const;
  inline void set_item_definition_index(::google::protobuf::uint32 value);

  // optional .CMsgProtoDefID variable_template = 3;
  inline bool has_variable_template() const;
  inline void clear_variable_template();
  static const int kVariableTemplateFieldNumber = 3;
  inline const ::CMsgProtoDefID& variable_template() const;
  inline ::CMsgProtoDefID* mutable_variable_template();
  inline ::CMsgProtoDefID* release_variable_template();
  inline void set_allocated_variable_template(::CMsgProtoDefID* variable_template);

  // repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4;
  inline int definition_size() const;
  inline void clear_definition();
  static const int kDefinitionFieldNumber = 4;
  inline const ::CMsgPaintKit_ItemDefinition_Definition& definition(int index) const;
  inline ::CMsgPaintKit_ItemDefinition_Definition* mutable_definition(int index);
  inline ::CMsgPaintKit_ItemDefinition_Definition* add_definition();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition >&
      definition() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition >*
      mutable_definition();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_ItemDefinition)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_item_definition_index();
  inline void clear_has_item_definition_index();
  inline void set_has_variable_template();
  inline void clear_has_variable_template();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  ::CMsgProtoDefID* variable_template_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition > definition_;
  ::google::protobuf::uint32 item_definition_index_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_ItemDefinition* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Definition_Item_ItemData : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Definition_Item_ItemData();
  virtual ~CMsgPaintKit_Definition_Item_ItemData();

  CMsgPaintKit_Definition_Item_ItemData(const CMsgPaintKit_Definition_Item_ItemData& from);

  inline CMsgPaintKit_Definition_Item_ItemData& operator=(const CMsgPaintKit_Definition_Item_ItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Definition_Item_ItemData& default_instance();

  void Swap(CMsgPaintKit_Definition_Item_ItemData* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Definition_Item_ItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Definition_Item_ItemData& from);
  void MergeFrom(const CMsgPaintKit_Definition_Item_ItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool can_apply_paintkit = 2 [default = true];
  inline bool has_can_apply_paintkit() const;
  inline void clear_can_apply_paintkit();
  static const int kCanApplyPaintkitFieldNumber = 2;
  inline bool can_apply_paintkit() const;
  inline void set_can_apply_paintkit(bool value);

  // optional string material_override = 3;
  inline bool has_material_override() const;
  inline void clear_material_override();
  static const int kMaterialOverrideFieldNumber = 3;
  inline const ::std::string& material_override() const;
  inline void set_material_override(const ::std::string& value);
  inline void set_material_override(const char* value);
  inline void set_material_override(const char* value, size_t size);
  inline ::std::string* mutable_material_override();
  inline ::std::string* release_material_override();
  inline void set_allocated_material_override(::std::string* material_override);

  // repeated .CMsgVarField variable = 4;
  inline int variable_size() const;
  inline void clear_variable();
  static const int kVariableFieldNumber = 4;
  inline const ::CMsgVarField& variable(int index) const;
  inline ::CMsgVarField* mutable_variable(int index);
  inline ::CMsgVarField* add_variable();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
      variable() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
      mutable_variable();

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Definition.Item.ItemData)
 private:
  inline void set_has_can_apply_paintkit();
  inline void clear_has_can_apply_paintkit();
  inline void set_has_material_override();
  inline void clear_has_material_override();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* material_override_;
  ::google::protobuf::RepeatedPtrField< ::CMsgVarField > variable_;
  bool can_apply_paintkit_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Definition_Item_ItemData* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Definition_Item : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Definition_Item();
  virtual ~CMsgPaintKit_Definition_Item();

  CMsgPaintKit_Definition_Item(const CMsgPaintKit_Definition_Item& from);

  inline CMsgPaintKit_Definition_Item& operator=(const CMsgPaintKit_Definition_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Definition_Item& default_instance();

  void Swap(CMsgPaintKit_Definition_Item* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Definition_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Definition_Item& from);
  void MergeFrom(const CMsgPaintKit_Definition_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgPaintKit_Definition_Item_ItemData ItemData;

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefID item_definition_template = 1;
  inline bool has_item_definition_template() const;
  inline void clear_item_definition_template();
  static const int kItemDefinitionTemplateFieldNumber = 1;
  inline const ::CMsgProtoDefID& item_definition_template() const;
  inline ::CMsgProtoDefID* mutable_item_definition_template();
  inline ::CMsgProtoDefID* release_item_definition_template();
  inline void set_allocated_item_definition_template(::CMsgProtoDefID* item_definition_template);

  // optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::CMsgPaintKit_Definition_Item_ItemData& data() const;
  inline ::CMsgPaintKit_Definition_Item_ItemData* mutable_data();
  inline ::CMsgPaintKit_Definition_Item_ItemData* release_data();
  inline void set_allocated_data(::CMsgPaintKit_Definition_Item_ItemData* data);

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Definition.Item)
 private:
  inline void set_has_item_definition_template();
  inline void clear_has_item_definition_template();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefID* item_definition_template_;
  ::CMsgPaintKit_Definition_Item_ItemData* data_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Definition_Item* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaintKit_Definition : public ::google::protobuf::Message {
 public:
  CMsgPaintKit_Definition();
  virtual ~CMsgPaintKit_Definition();

  CMsgPaintKit_Definition(const CMsgPaintKit_Definition& from);

  inline CMsgPaintKit_Definition& operator=(const CMsgPaintKit_Definition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaintKit_Definition& default_instance();

  void Swap(CMsgPaintKit_Definition* other);

  // implements Message ----------------------------------------------

  CMsgPaintKit_Definition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaintKit_Definition& from);
  void MergeFrom(const CMsgPaintKit_Definition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgPaintKit_Definition_Item Item;

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // optional string loc_desctoken = 2;
  inline bool has_loc_desctoken() const;
  inline void clear_loc_desctoken();
  static const int kLocDesctokenFieldNumber = 2;
  inline const ::std::string& loc_desctoken() const;
  inline void set_loc_desctoken(const ::std::string& value);
  inline void set_loc_desctoken(const char* value);
  inline void set_loc_desctoken(const char* value, size_t size);
  inline ::std::string* mutable_loc_desctoken();
  inline ::std::string* release_loc_desctoken();
  inline void set_allocated_loc_desctoken(::std::string* loc_desctoken);

  // optional .CMsgProtoDefID operation_template = 3;
  inline bool has_operation_template() const;
  inline void clear_operation_template();
  static const int kOperationTemplateFieldNumber = 3;
  inline const ::CMsgProtoDefID& operation_template() const;
  inline ::CMsgProtoDefID* mutable_operation_template();
  inline ::CMsgProtoDefID* release_operation_template();
  inline void set_allocated_operation_template(::CMsgProtoDefID* operation_template);

  // optional bool has_team_textures = 4;
  inline bool has_has_team_textures() const;
  inline void clear_has_team_textures();
  static const int kHasTeamTexturesFieldNumber = 4;
  inline bool has_team_textures() const;
  inline void set_has_team_textures(bool value);

  // repeated .CMsgPaintKit_Definition.Item item = 5;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 5;
  inline const ::CMsgPaintKit_Definition_Item& item(int index) const;
  inline ::CMsgPaintKit_Definition_Item* mutable_item(int index);
  inline ::CMsgPaintKit_Definition_Item* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Definition_Item >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Definition_Item >*
      mutable_item();

  // optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
  inline bool has_paintkit_tool() const;
  inline void clear_paintkit_tool();
  static const int kPaintkitToolFieldNumber = 6;
  inline const ::CMsgPaintKit_Definition_Item& paintkit_tool() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_paintkit_tool();
  inline ::CMsgPaintKit_Definition_Item* release_paintkit_tool();
  inline void set_allocated_paintkit_tool(::CMsgPaintKit_Definition_Item* paintkit_tool);

  // optional .CMsgPaintKit_Definition.Item flamethrower = 7;
  inline bool has_flamethrower() const;
  inline void clear_flamethrower();
  static const int kFlamethrowerFieldNumber = 7;
  inline const ::CMsgPaintKit_Definition_Item& flamethrower() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_flamethrower();
  inline ::CMsgPaintKit_Definition_Item* release_flamethrower();
  inline void set_allocated_flamethrower(::CMsgPaintKit_Definition_Item* flamethrower);

  // optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
  inline bool has_grenadelauncher() const;
  inline void clear_grenadelauncher();
  static const int kGrenadelauncherFieldNumber = 8;
  inline const ::CMsgPaintKit_Definition_Item& grenadelauncher() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_grenadelauncher();
  inline ::CMsgPaintKit_Definition_Item* release_grenadelauncher();
  inline void set_allocated_grenadelauncher(::CMsgPaintKit_Definition_Item* grenadelauncher);

  // optional .CMsgPaintKit_Definition.Item knife = 9;
  inline bool has_knife() const;
  inline void clear_knife();
  static const int kKnifeFieldNumber = 9;
  inline const ::CMsgPaintKit_Definition_Item& knife() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_knife();
  inline ::CMsgPaintKit_Definition_Item* release_knife();
  inline void set_allocated_knife(::CMsgPaintKit_Definition_Item* knife);

  // optional .CMsgPaintKit_Definition.Item medigun = 10;
  inline bool has_medigun() const;
  inline void clear_medigun();
  static const int kMedigunFieldNumber = 10;
  inline const ::CMsgPaintKit_Definition_Item& medigun() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_medigun();
  inline ::CMsgPaintKit_Definition_Item* release_medigun();
  inline void set_allocated_medigun(::CMsgPaintKit_Definition_Item* medigun);

  // optional .CMsgPaintKit_Definition.Item minigun = 11;
  inline bool has_minigun() const;
  inline void clear_minigun();
  static const int kMinigunFieldNumber = 11;
  inline const ::CMsgPaintKit_Definition_Item& minigun() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_minigun();
  inline ::CMsgPaintKit_Definition_Item* release_minigun();
  inline void set_allocated_minigun(::CMsgPaintKit_Definition_Item* minigun);

  // optional .CMsgPaintKit_Definition.Item pistol = 12;
  inline bool has_pistol() const;
  inline void clear_pistol();
  static const int kPistolFieldNumber = 12;
  inline const ::CMsgPaintKit_Definition_Item& pistol() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_pistol();
  inline ::CMsgPaintKit_Definition_Item* release_pistol();
  inline void set_allocated_pistol(::CMsgPaintKit_Definition_Item* pistol);

  // optional .CMsgPaintKit_Definition.Item revolver = 13;
  inline bool has_revolver() const;
  inline void clear_revolver();
  static const int kRevolverFieldNumber = 13;
  inline const ::CMsgPaintKit_Definition_Item& revolver() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_revolver();
  inline ::CMsgPaintKit_Definition_Item* release_revolver();
  inline void set_allocated_revolver(::CMsgPaintKit_Definition_Item* revolver);

  // optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
  inline bool has_rocketlauncher() const;
  inline void clear_rocketlauncher();
  static const int kRocketlauncherFieldNumber = 14;
  inline const ::CMsgPaintKit_Definition_Item& rocketlauncher() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_rocketlauncher();
  inline ::CMsgPaintKit_Definition_Item* release_rocketlauncher();
  inline void set_allocated_rocketlauncher(::CMsgPaintKit_Definition_Item* rocketlauncher);

  // optional .CMsgPaintKit_Definition.Item scattergun = 15;
  inline bool has_scattergun() const;
  inline void clear_scattergun();
  static const int kScattergunFieldNumber = 15;
  inline const ::CMsgPaintKit_Definition_Item& scattergun() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_scattergun();
  inline ::CMsgPaintKit_Definition_Item* release_scattergun();
  inline void set_allocated_scattergun(::CMsgPaintKit_Definition_Item* scattergun);

  // optional .CMsgPaintKit_Definition.Item shotgun = 16;
  inline bool has_shotgun() const;
  inline void clear_shotgun();
  static const int kShotgunFieldNumber = 16;
  inline const ::CMsgPaintKit_Definition_Item& shotgun() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_shotgun();
  inline ::CMsgPaintKit_Definition_Item* release_shotgun();
  inline void set_allocated_shotgun(::CMsgPaintKit_Definition_Item* shotgun);

  // optional .CMsgPaintKit_Definition.Item smg = 17;
  inline bool has_smg() const;
  inline void clear_smg();
  static const int kSmgFieldNumber = 17;
  inline const ::CMsgPaintKit_Definition_Item& smg() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_smg();
  inline ::CMsgPaintKit_Definition_Item* release_smg();
  inline void set_allocated_smg(::CMsgPaintKit_Definition_Item* smg);

  // optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
  inline bool has_sniperrifle() const;
  inline void clear_sniperrifle();
  static const int kSniperrifleFieldNumber = 18;
  inline const ::CMsgPaintKit_Definition_Item& sniperrifle() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_sniperrifle();
  inline ::CMsgPaintKit_Definition_Item* release_sniperrifle();
  inline void set_allocated_sniperrifle(::CMsgPaintKit_Definition_Item* sniperrifle);

  // optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
  inline bool has_stickybomb_launcher() const;
  inline void clear_stickybomb_launcher();
  static const int kStickybombLauncherFieldNumber = 19;
  inline const ::CMsgPaintKit_Definition_Item& stickybomb_launcher() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_stickybomb_launcher();
  inline ::CMsgPaintKit_Definition_Item* release_stickybomb_launcher();
  inline void set_allocated_stickybomb_launcher(::CMsgPaintKit_Definition_Item* stickybomb_launcher);

  // optional .CMsgPaintKit_Definition.Item ubersaw = 20;
  inline bool has_ubersaw() const;
  inline void clear_ubersaw();
  static const int kUbersawFieldNumber = 20;
  inline const ::CMsgPaintKit_Definition_Item& ubersaw() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_ubersaw();
  inline ::CMsgPaintKit_Definition_Item* release_ubersaw();
  inline void set_allocated_ubersaw(::CMsgPaintKit_Definition_Item* ubersaw);

  // optional .CMsgPaintKit_Definition.Item wrench = 21;
  inline bool has_wrench() const;
  inline void clear_wrench();
  static const int kWrenchFieldNumber = 21;
  inline const ::CMsgPaintKit_Definition_Item& wrench() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_wrench();
  inline ::CMsgPaintKit_Definition_Item* release_wrench();
  inline void set_allocated_wrench(::CMsgPaintKit_Definition_Item* wrench);

  // optional .CMsgPaintKit_Definition.Item amputator = 22;
  inline bool has_amputator() const;
  inline void clear_amputator();
  static const int kAmputatorFieldNumber = 22;
  inline const ::CMsgPaintKit_Definition_Item& amputator() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_amputator();
  inline ::CMsgPaintKit_Definition_Item* release_amputator();
  inline void set_allocated_amputator(::CMsgPaintKit_Definition_Item* amputator);

  // optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
  inline bool has_atom_launcher() const;
  inline void clear_atom_launcher();
  static const int kAtomLauncherFieldNumber = 23;
  inline const ::CMsgPaintKit_Definition_Item& atom_launcher() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_atom_launcher();
  inline ::CMsgPaintKit_Definition_Item* release_atom_launcher();
  inline void set_allocated_atom_launcher(::CMsgPaintKit_Definition_Item* atom_launcher);

  // optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
  inline bool has_back_scratcher() const;
  inline void clear_back_scratcher();
  static const int kBackScratcherFieldNumber = 24;
  inline const ::CMsgPaintKit_Definition_Item& back_scratcher() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_back_scratcher();
  inline ::CMsgPaintKit_Definition_Item* release_back_scratcher();
  inline void set_allocated_back_scratcher(::CMsgPaintKit_Definition_Item* back_scratcher);

  // optional .CMsgPaintKit_Definition.Item battleaxe = 25;
  inline bool has_battleaxe() const;
  inline void clear_battleaxe();
  static const int kBattleaxeFieldNumber = 25;
  inline const ::CMsgPaintKit_Definition_Item& battleaxe() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_battleaxe();
  inline ::CMsgPaintKit_Definition_Item* release_battleaxe();
  inline void set_allocated_battleaxe(::CMsgPaintKit_Definition_Item* battleaxe);

  // optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
  inline bool has_bazaar_sniper() const;
  inline void clear_bazaar_sniper();
  static const int kBazaarSniperFieldNumber = 26;
  inline const ::CMsgPaintKit_Definition_Item& bazaar_sniper() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_bazaar_sniper();
  inline ::CMsgPaintKit_Definition_Item* release_bazaar_sniper();
  inline void set_allocated_bazaar_sniper(::CMsgPaintKit_Definition_Item* bazaar_sniper);

  // optional .CMsgPaintKit_Definition.Item blackbox = 27;
  inline bool has_blackbox() const;
  inline void clear_blackbox();
  static const int kBlackboxFieldNumber = 27;
  inline const ::CMsgPaintKit_Definition_Item& blackbox() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_blackbox();
  inline ::CMsgPaintKit_Definition_Item* release_blackbox();
  inline void set_allocated_blackbox(::CMsgPaintKit_Definition_Item* blackbox);

  // optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
  inline bool has_claidheamohmor() const;
  inline void clear_claidheamohmor();
  static const int kClaidheamohmorFieldNumber = 28;
  inline const ::CMsgPaintKit_Definition_Item& claidheamohmor() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_claidheamohmor();
  inline ::CMsgPaintKit_Definition_Item* release_claidheamohmor();
  inline void set_allocated_claidheamohmor(::CMsgPaintKit_Definition_Item* claidheamohmor);

  // optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
  inline bool has_crusaders_crossbow() const;
  inline void clear_crusaders_crossbow();
  static const int kCrusadersCrossbowFieldNumber = 29;
  inline const ::CMsgPaintKit_Definition_Item& crusaders_crossbow() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_crusaders_crossbow();
  inline ::CMsgPaintKit_Definition_Item* release_crusaders_crossbow();
  inline void set_allocated_crusaders_crossbow(::CMsgPaintKit_Definition_Item* crusaders_crossbow);

  // optional .CMsgPaintKit_Definition.Item degreaser = 30;
  inline bool has_degreaser() const;
  inline void clear_degreaser();
  static const int kDegreaserFieldNumber = 30;
  inline const ::CMsgPaintKit_Definition_Item& degreaser() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_degreaser();
  inline ::CMsgPaintKit_Definition_Item* release_degreaser();
  inline void set_allocated_degreaser(::CMsgPaintKit_Definition_Item* degreaser);

  // optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
  inline bool has_demo_cannon() const;
  inline void clear_demo_cannon();
  static const int kDemoCannonFieldNumber = 31;
  inline const ::CMsgPaintKit_Definition_Item& demo_cannon() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_demo_cannon();
  inline ::CMsgPaintKit_Definition_Item* release_demo_cannon();
  inline void set_allocated_demo_cannon(::CMsgPaintKit_Definition_Item* demo_cannon);

  // optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
  inline bool has_demo_sultan_sword() const;
  inline void clear_demo_sultan_sword();
  static const int kDemoSultanSwordFieldNumber = 32;
  inline const ::CMsgPaintKit_Definition_Item& demo_sultan_sword() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_demo_sultan_sword();
  inline ::CMsgPaintKit_Definition_Item* release_demo_sultan_sword();
  inline void set_allocated_demo_sultan_sword(::CMsgPaintKit_Definition_Item* demo_sultan_sword);

  // optional .CMsgPaintKit_Definition.Item detonator = 33;
  inline bool has_detonator() const;
  inline void clear_detonator();
  static const int kDetonatorFieldNumber = 33;
  inline const ::CMsgPaintKit_Definition_Item& detonator() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_detonator();
  inline ::CMsgPaintKit_Definition_Item* release_detonator();
  inline void set_allocated_detonator(::CMsgPaintKit_Definition_Item* detonator);

  // optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
  inline bool has_gatling_gun() const;
  inline void clear_gatling_gun();
  static const int kGatlingGunFieldNumber = 34;
  inline const ::CMsgPaintKit_Definition_Item& gatling_gun() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_gatling_gun();
  inline ::CMsgPaintKit_Definition_Item* release_gatling_gun();
  inline void set_allocated_gatling_gun(::CMsgPaintKit_Definition_Item* gatling_gun);

  // optional .CMsgPaintKit_Definition.Item holymackerel = 35;
  inline bool has_holymackerel() const;
  inline void clear_holymackerel();
  static const int kHolymackerelFieldNumber = 35;
  inline const ::CMsgPaintKit_Definition_Item& holymackerel() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_holymackerel();
  inline ::CMsgPaintKit_Definition_Item* release_holymackerel();
  inline void set_allocated_holymackerel(::CMsgPaintKit_Definition_Item* holymackerel);

  // optional .CMsgPaintKit_Definition.Item jag = 36;
  inline bool has_jag() const;
  inline void clear_jag();
  static const int kJagFieldNumber = 36;
  inline const ::CMsgPaintKit_Definition_Item& jag() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_jag();
  inline ::CMsgPaintKit_Definition_Item* release_jag();
  inline void set_allocated_jag(::CMsgPaintKit_Definition_Item* jag);

  // optional .CMsgPaintKit_Definition.Item lochnload = 37;
  inline bool has_lochnload() const;
  inline void clear_lochnload();
  static const int kLochnloadFieldNumber = 37;
  inline const ::CMsgPaintKit_Definition_Item& lochnload() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_lochnload();
  inline ::CMsgPaintKit_Definition_Item* release_lochnload();
  inline void set_allocated_lochnload(::CMsgPaintKit_Definition_Item* lochnload);

  // optional .CMsgPaintKit_Definition.Item powerjack = 38;
  inline bool has_powerjack() const;
  inline void clear_powerjack();
  static const int kPowerjackFieldNumber = 38;
  inline const ::CMsgPaintKit_Definition_Item& powerjack() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_powerjack();
  inline ::CMsgPaintKit_Definition_Item* release_powerjack();
  inline void set_allocated_powerjack(::CMsgPaintKit_Definition_Item* powerjack);

  // optional .CMsgPaintKit_Definition.Item quadball = 39;
  inline bool has_quadball() const;
  inline void clear_quadball();
  static const int kQuadballFieldNumber = 39;
  inline const ::CMsgPaintKit_Definition_Item& quadball() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_quadball();
  inline ::CMsgPaintKit_Definition_Item* release_quadball();
  inline void set_allocated_quadball(::CMsgPaintKit_Definition_Item* quadball);

  // optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
  inline bool has_reserve_shooter() const;
  inline void clear_reserve_shooter();
  static const int kReserveShooterFieldNumber = 40;
  inline const ::CMsgPaintKit_Definition_Item& reserve_shooter() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_reserve_shooter();
  inline ::CMsgPaintKit_Definition_Item* release_reserve_shooter();
  inline void set_allocated_reserve_shooter(::CMsgPaintKit_Definition_Item* reserve_shooter);

  // optional .CMsgPaintKit_Definition.Item riding_crop = 41;
  inline bool has_riding_crop() const;
  inline void clear_riding_crop();
  static const int kRidingCropFieldNumber = 41;
  inline const ::CMsgPaintKit_Definition_Item& riding_crop() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_riding_crop();
  inline ::CMsgPaintKit_Definition_Item* release_riding_crop();
  inline void set_allocated_riding_crop(::CMsgPaintKit_Definition_Item* riding_crop);

  // optional .CMsgPaintKit_Definition.Item russian_riot = 42;
  inline bool has_russian_riot() const;
  inline void clear_russian_riot();
  static const int kRussianRiotFieldNumber = 42;
  inline const ::CMsgPaintKit_Definition_Item& russian_riot() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_russian_riot();
  inline ::CMsgPaintKit_Definition_Item* release_russian_riot();
  inline void set_allocated_russian_riot(::CMsgPaintKit_Definition_Item* russian_riot);

  // optional .CMsgPaintKit_Definition.Item scimitar = 43;
  inline bool has_scimitar() const;
  inline void clear_scimitar();
  static const int kScimitarFieldNumber = 43;
  inline const ::CMsgPaintKit_Definition_Item& scimitar() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_scimitar();
  inline ::CMsgPaintKit_Definition_Item* release_scimitar();
  inline void set_allocated_scimitar(::CMsgPaintKit_Definition_Item* scimitar);

  // optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
  inline bool has_scorch_shot() const;
  inline void clear_scorch_shot();
  static const int kScorchShotFieldNumber = 44;
  inline const ::CMsgPaintKit_Definition_Item& scorch_shot() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_scorch_shot();
  inline ::CMsgPaintKit_Definition_Item* release_scorch_shot();
  inline void set_allocated_scorch_shot(::CMsgPaintKit_Definition_Item* scorch_shot);

  // optional .CMsgPaintKit_Definition.Item shortstop = 45;
  inline bool has_shortstop() const;
  inline void clear_shortstop();
  static const int kShortstopFieldNumber = 45;
  inline const ::CMsgPaintKit_Definition_Item& shortstop() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_shortstop();
  inline ::CMsgPaintKit_Definition_Item* release_shortstop();
  inline void set_allocated_shortstop(::CMsgPaintKit_Definition_Item* shortstop);

  // optional .CMsgPaintKit_Definition.Item soda_popper = 46;
  inline bool has_soda_popper() const;
  inline void clear_soda_popper();
  static const int kSodaPopperFieldNumber = 46;
  inline const ::CMsgPaintKit_Definition_Item& soda_popper() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_soda_popper();
  inline ::CMsgPaintKit_Definition_Item* release_soda_popper();
  inline void set_allocated_soda_popper(::CMsgPaintKit_Definition_Item* soda_popper);

  // optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
  inline bool has_tele_shotgun() const;
  inline void clear_tele_shotgun();
  static const int kTeleShotgunFieldNumber = 47;
  inline const ::CMsgPaintKit_Definition_Item& tele_shotgun() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_tele_shotgun();
  inline ::CMsgPaintKit_Definition_Item* release_tele_shotgun();
  inline void set_allocated_tele_shotgun(::CMsgPaintKit_Definition_Item* tele_shotgun);

  // optional .CMsgPaintKit_Definition.Item tomislav = 48;
  inline bool has_tomislav() const;
  inline void clear_tomislav();
  static const int kTomislavFieldNumber = 48;
  inline const ::CMsgPaintKit_Definition_Item& tomislav() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_tomislav();
  inline ::CMsgPaintKit_Definition_Item* release_tomislav();
  inline void set_allocated_tomislav(::CMsgPaintKit_Definition_Item* tomislav);

  // optional .CMsgPaintKit_Definition.Item trenchgun = 49;
  inline bool has_trenchgun() const;
  inline void clear_trenchgun();
  static const int kTrenchgunFieldNumber = 49;
  inline const ::CMsgPaintKit_Definition_Item& trenchgun() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_trenchgun();
  inline ::CMsgPaintKit_Definition_Item* release_trenchgun();
  inline void set_allocated_trenchgun(::CMsgPaintKit_Definition_Item* trenchgun);

  // optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
  inline bool has_winger_pistol() const;
  inline void clear_winger_pistol();
  static const int kWingerPistolFieldNumber = 50;
  inline const ::CMsgPaintKit_Definition_Item& winger_pistol() const;
  inline ::CMsgPaintKit_Definition_Item* mutable_winger_pistol();
  inline ::CMsgPaintKit_Definition_Item* release_winger_pistol();
  inline void set_allocated_winger_pistol(::CMsgPaintKit_Definition_Item* winger_pistol);

  // @@protoc_insertion_point(class_scope:CMsgPaintKit_Definition)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_loc_desctoken();
  inline void clear_has_loc_desctoken();
  inline void set_has_operation_template();
  inline void clear_has_operation_template();
  inline void set_has_has_team_textures();
  inline void clear_has_has_team_textures();
  inline void set_has_paintkit_tool();
  inline void clear_has_paintkit_tool();
  inline void set_has_flamethrower();
  inline void clear_has_flamethrower();
  inline void set_has_grenadelauncher();
  inline void clear_has_grenadelauncher();
  inline void set_has_knife();
  inline void clear_has_knife();
  inline void set_has_medigun();
  inline void clear_has_medigun();
  inline void set_has_minigun();
  inline void clear_has_minigun();
  inline void set_has_pistol();
  inline void clear_has_pistol();
  inline void set_has_revolver();
  inline void clear_has_revolver();
  inline void set_has_rocketlauncher();
  inline void clear_has_rocketlauncher();
  inline void set_has_scattergun();
  inline void clear_has_scattergun();
  inline void set_has_shotgun();
  inline void clear_has_shotgun();
  inline void set_has_smg();
  inline void clear_has_smg();
  inline void set_has_sniperrifle();
  inline void clear_has_sniperrifle();
  inline void set_has_stickybomb_launcher();
  inline void clear_has_stickybomb_launcher();
  inline void set_has_ubersaw();
  inline void clear_has_ubersaw();
  inline void set_has_wrench();
  inline void clear_has_wrench();
  inline void set_has_amputator();
  inline void clear_has_amputator();
  inline void set_has_atom_launcher();
  inline void clear_has_atom_launcher();
  inline void set_has_back_scratcher();
  inline void clear_has_back_scratcher();
  inline void set_has_battleaxe();
  inline void clear_has_battleaxe();
  inline void set_has_bazaar_sniper();
  inline void clear_has_bazaar_sniper();
  inline void set_has_blackbox();
  inline void clear_has_blackbox();
  inline void set_has_claidheamohmor();
  inline void clear_has_claidheamohmor();
  inline void set_has_crusaders_crossbow();
  inline void clear_has_crusaders_crossbow();
  inline void set_has_degreaser();
  inline void clear_has_degreaser();
  inline void set_has_demo_cannon();
  inline void clear_has_demo_cannon();
  inline void set_has_demo_sultan_sword();
  inline void clear_has_demo_sultan_sword();
  inline void set_has_detonator();
  inline void clear_has_detonator();
  inline void set_has_gatling_gun();
  inline void clear_has_gatling_gun();
  inline void set_has_holymackerel();
  inline void clear_has_holymackerel();
  inline void set_has_jag();
  inline void clear_has_jag();
  inline void set_has_lochnload();
  inline void clear_has_lochnload();
  inline void set_has_powerjack();
  inline void clear_has_powerjack();
  inline void set_has_quadball();
  inline void clear_has_quadball();
  inline void set_has_reserve_shooter();
  inline void clear_has_reserve_shooter();
  inline void set_has_riding_crop();
  inline void clear_has_riding_crop();
  inline void set_has_russian_riot();
  inline void clear_has_russian_riot();
  inline void set_has_scimitar();
  inline void clear_has_scimitar();
  inline void set_has_scorch_shot();
  inline void clear_has_scorch_shot();
  inline void set_has_shortstop();
  inline void clear_has_shortstop();
  inline void set_has_soda_popper();
  inline void clear_has_soda_popper();
  inline void set_has_tele_shotgun();
  inline void clear_has_tele_shotgun();
  inline void set_has_tomislav();
  inline void clear_has_tomislav();
  inline void set_has_trenchgun();
  inline void clear_has_trenchgun();
  inline void set_has_winger_pistol();
  inline void clear_has_winger_pistol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::CMsgProtoDefHeader* header_;
  ::std::string* loc_desctoken_;
  ::CMsgProtoDefID* operation_template_;
  ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Definition_Item > item_;
  ::CMsgPaintKit_Definition_Item* paintkit_tool_;
  ::CMsgPaintKit_Definition_Item* flamethrower_;
  ::CMsgPaintKit_Definition_Item* grenadelauncher_;
  ::CMsgPaintKit_Definition_Item* knife_;
  ::CMsgPaintKit_Definition_Item* medigun_;
  ::CMsgPaintKit_Definition_Item* minigun_;
  ::CMsgPaintKit_Definition_Item* pistol_;
  ::CMsgPaintKit_Definition_Item* revolver_;
  ::CMsgPaintKit_Definition_Item* rocketlauncher_;
  ::CMsgPaintKit_Definition_Item* scattergun_;
  ::CMsgPaintKit_Definition_Item* shotgun_;
  ::CMsgPaintKit_Definition_Item* smg_;
  ::CMsgPaintKit_Definition_Item* sniperrifle_;
  ::CMsgPaintKit_Definition_Item* stickybomb_launcher_;
  ::CMsgPaintKit_Definition_Item* ubersaw_;
  ::CMsgPaintKit_Definition_Item* wrench_;
  ::CMsgPaintKit_Definition_Item* amputator_;
  ::CMsgPaintKit_Definition_Item* atom_launcher_;
  ::CMsgPaintKit_Definition_Item* back_scratcher_;
  ::CMsgPaintKit_Definition_Item* battleaxe_;
  ::CMsgPaintKit_Definition_Item* bazaar_sniper_;
  ::CMsgPaintKit_Definition_Item* blackbox_;
  ::CMsgPaintKit_Definition_Item* claidheamohmor_;
  ::CMsgPaintKit_Definition_Item* crusaders_crossbow_;
  ::CMsgPaintKit_Definition_Item* degreaser_;
  ::CMsgPaintKit_Definition_Item* demo_cannon_;
  ::CMsgPaintKit_Definition_Item* demo_sultan_sword_;
  ::CMsgPaintKit_Definition_Item* detonator_;
  ::CMsgPaintKit_Definition_Item* gatling_gun_;
  ::CMsgPaintKit_Definition_Item* holymackerel_;
  ::CMsgPaintKit_Definition_Item* jag_;
  ::CMsgPaintKit_Definition_Item* lochnload_;
  ::CMsgPaintKit_Definition_Item* powerjack_;
  ::CMsgPaintKit_Definition_Item* quadball_;
  ::CMsgPaintKit_Definition_Item* reserve_shooter_;
  ::CMsgPaintKit_Definition_Item* riding_crop_;
  ::CMsgPaintKit_Definition_Item* russian_riot_;
  ::CMsgPaintKit_Definition_Item* scimitar_;
  ::CMsgPaintKit_Definition_Item* scorch_shot_;
  ::CMsgPaintKit_Definition_Item* shortstop_;
  ::CMsgPaintKit_Definition_Item* soda_popper_;
  ::CMsgPaintKit_Definition_Item* tele_shotgun_;
  ::CMsgPaintKit_Definition_Item* tomislav_;
  ::CMsgPaintKit_Definition_Item* trenchgun_;
  ::CMsgPaintKit_Definition_Item* winger_pistol_;
  bool has_team_textures_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgPaintKit_Definition* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestTheme_WeightedString : public ::google::protobuf::Message {
 public:
  CMsgQuestTheme_WeightedString();
  virtual ~CMsgQuestTheme_WeightedString();

  CMsgQuestTheme_WeightedString(const CMsgQuestTheme_WeightedString& from);

  inline CMsgQuestTheme_WeightedString& operator=(const CMsgQuestTheme_WeightedString& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestTheme_WeightedString& default_instance();

  void Swap(CMsgQuestTheme_WeightedString* other);

  // implements Message ----------------------------------------------

  CMsgQuestTheme_WeightedString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestTheme_WeightedString& from);
  void MergeFrom(const CMsgQuestTheme_WeightedString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string = 1;
  inline bool has_string() const;
  inline void clear_string();
  static const int kStringFieldNumber = 1;
  inline const ::std::string& string() const;
  inline void set_string(const ::std::string& value);
  inline void set_string(const char* value);
  inline void set_string(const char* value, size_t size);
  inline ::std::string* mutable_string();
  inline ::std::string* release_string();
  inline void set_allocated_string(::std::string* string);

  // optional uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgQuestTheme.WeightedString)
 private:
  inline void set_has_string();
  inline void clear_has_string();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* string_;
  ::google::protobuf::uint32 weight_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestTheme_WeightedString* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestTheme_WeightedStringSet : public ::google::protobuf::Message {
 public:
  CMsgQuestTheme_WeightedStringSet();
  virtual ~CMsgQuestTheme_WeightedStringSet();

  CMsgQuestTheme_WeightedStringSet(const CMsgQuestTheme_WeightedStringSet& from);

  inline CMsgQuestTheme_WeightedStringSet& operator=(const CMsgQuestTheme_WeightedStringSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestTheme_WeightedStringSet& default_instance();

  void Swap(CMsgQuestTheme_WeightedStringSet* other);

  // implements Message ----------------------------------------------

  CMsgQuestTheme_WeightedStringSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestTheme_WeightedStringSet& from);
  void MergeFrom(const CMsgQuestTheme_WeightedStringSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
  inline int weighted_strings_size() const;
  inline void clear_weighted_strings();
  static const int kWeightedStringsFieldNumber = 1;
  inline const ::CMsgQuestTheme_WeightedString& weighted_strings(int index) const;
  inline ::CMsgQuestTheme_WeightedString* mutable_weighted_strings(int index);
  inline ::CMsgQuestTheme_WeightedString* add_weighted_strings();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedString >&
      weighted_strings() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedString >*
      mutable_weighted_strings();

  // @@protoc_insertion_point(class_scope:CMsgQuestTheme.WeightedStringSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedString > weighted_strings_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestTheme_WeightedStringSet* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestTheme : public ::google::protobuf::Message {
 public:
  CMsgQuestTheme();
  virtual ~CMsgQuestTheme();

  CMsgQuestTheme(const CMsgQuestTheme& from);

  inline CMsgQuestTheme& operator=(const CMsgQuestTheme& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestTheme& default_instance();

  void Swap(CMsgQuestTheme* other);

  // implements Message ----------------------------------------------

  CMsgQuestTheme* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestTheme& from);
  void MergeFrom(const CMsgQuestTheme& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgQuestTheme_WeightedString WeightedString;
  typedef CMsgQuestTheme_WeightedStringSet WeightedStringSet;

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // optional string notification_res = 2;
  inline bool has_notification_res() const;
  inline void clear_notification_res();
  static const int kNotificationResFieldNumber = 2;
  inline const ::std::string& notification_res() const;
  inline void set_notification_res(const ::std::string& value);
  inline void set_notification_res(const char* value);
  inline void set_notification_res(const char* value, size_t size);
  inline ::std::string* mutable_notification_res();
  inline ::std::string* release_notification_res();
  inline void set_allocated_notification_res(::std::string* notification_res);

  // optional string quest_item_res = 3;
  inline bool has_quest_item_res() const;
  inline void clear_quest_item_res();
  static const int kQuestItemResFieldNumber = 3;
  inline const ::std::string& quest_item_res() const;
  inline void set_quest_item_res(const ::std::string& value);
  inline void set_quest_item_res(const char* value);
  inline void set_quest_item_res(const char* value, size_t size);
  inline ::std::string* mutable_quest_item_res();
  inline ::std::string* release_quest_item_res();
  inline void set_allocated_quest_item_res(::std::string* quest_item_res);

  // optional string in_game_tracker_res = 4;
  inline bool has_in_game_tracker_res() const;
  inline void clear_in_game_tracker_res();
  static const int kInGameTrackerResFieldNumber = 4;
  inline const ::std::string& in_game_tracker_res() const;
  inline void set_in_game_tracker_res(const ::std::string& value);
  inline void set_in_game_tracker_res(const char* value);
  inline void set_in_game_tracker_res(const char* value, size_t size);
  inline ::std::string* mutable_in_game_tracker_res();
  inline ::std::string* release_in_game_tracker_res();
  inline void set_allocated_in_game_tracker_res(::std::string* in_game_tracker_res);

  // repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
  inline int give_sounds_size() const;
  inline void clear_give_sounds();
  static const int kGiveSoundsFieldNumber = 5;
  inline const ::CMsgQuestTheme_WeightedStringSet& give_sounds(int index) const;
  inline ::CMsgQuestTheme_WeightedStringSet* mutable_give_sounds(int index);
  inline ::CMsgQuestTheme_WeightedStringSet* add_give_sounds();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
      give_sounds() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
      mutable_give_sounds();

  // repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
  inline int complete_sounds_size() const;
  inline void clear_complete_sounds();
  static const int kCompleteSoundsFieldNumber = 6;
  inline const ::CMsgQuestTheme_WeightedStringSet& complete_sounds(int index) const;
  inline ::CMsgQuestTheme_WeightedStringSet* mutable_complete_sounds(int index);
  inline ::CMsgQuestTheme_WeightedStringSet* add_complete_sounds();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
      complete_sounds() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
      mutable_complete_sounds();

  // repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
  inline int fully_complete_sounds_size() const;
  inline void clear_fully_complete_sounds();
  static const int kFullyCompleteSoundsFieldNumber = 7;
  inline const ::CMsgQuestTheme_WeightedStringSet& fully_complete_sounds(int index) const;
  inline ::CMsgQuestTheme_WeightedStringSet* mutable_fully_complete_sounds(int index);
  inline ::CMsgQuestTheme_WeightedStringSet* add_fully_complete_sounds();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
      fully_complete_sounds() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
      mutable_fully_complete_sounds();

  // optional string reward_sound = 8;
  inline bool has_reward_sound() const;
  inline void clear_reward_sound();
  static const int kRewardSoundFieldNumber = 8;
  inline const ::std::string& reward_sound() const;
  inline void set_reward_sound(const ::std::string& value);
  inline void set_reward_sound(const char* value);
  inline void set_reward_sound(const char* value, size_t size);
  inline ::std::string* mutable_reward_sound();
  inline ::std::string* release_reward_sound();
  inline void set_allocated_reward_sound(::std::string* reward_sound);

  // optional string discard_sound = 9;
  inline bool has_discard_sound() const;
  inline void clear_discard_sound();
  static const int kDiscardSoundFieldNumber = 9;
  inline const ::std::string& discard_sound() const;
  inline void set_discard_sound(const ::std::string& value);
  inline void set_discard_sound(const char* value);
  inline void set_discard_sound(const char* value, size_t size);
  inline ::std::string* mutable_discard_sound();
  inline ::std::string* release_discard_sound();
  inline void set_allocated_discard_sound(::std::string* discard_sound);

  // optional string reveal_sound = 10;
  inline bool has_reveal_sound() const;
  inline void clear_reveal_sound();
  static const int kRevealSoundFieldNumber = 10;
  inline const ::std::string& reveal_sound() const;
  inline void set_reveal_sound(const ::std::string& value);
  inline void set_reveal_sound(const char* value);
  inline void set_reveal_sound(const char* value, size_t size);
  inline ::std::string* mutable_reveal_sound();
  inline ::std::string* release_reveal_sound();
  inline void set_allocated_reveal_sound(::std::string* reveal_sound);

  // @@protoc_insertion_point(class_scope:CMsgQuestTheme)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_notification_res();
  inline void clear_has_notification_res();
  inline void set_has_quest_item_res();
  inline void clear_has_quest_item_res();
  inline void set_has_in_game_tracker_res();
  inline void clear_has_in_game_tracker_res();
  inline void set_has_reward_sound();
  inline void clear_has_reward_sound();
  inline void set_has_discard_sound();
  inline void clear_has_discard_sound();
  inline void set_has_reveal_sound();
  inline void clear_has_reveal_sound();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  ::std::string* notification_res_;
  ::std::string* quest_item_res_;
  ::std::string* in_game_tracker_res_;
  ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet > give_sounds_;
  ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet > complete_sounds_;
  ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet > fully_complete_sounds_;
  ::std::string* reward_sound_;
  ::std::string* discard_sound_;
  ::std::string* reveal_sound_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestTheme* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestMapNodeCondition_NodeState : public ::google::protobuf::Message {
 public:
  CMsgQuestMapNodeCondition_NodeState();
  virtual ~CMsgQuestMapNodeCondition_NodeState();

  CMsgQuestMapNodeCondition_NodeState(const CMsgQuestMapNodeCondition_NodeState& from);

  inline CMsgQuestMapNodeCondition_NodeState& operator=(const CMsgQuestMapNodeCondition_NodeState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestMapNodeCondition_NodeState& default_instance();

  void Swap(CMsgQuestMapNodeCondition_NodeState* other);

  // implements Message ----------------------------------------------

  CMsgQuestMapNodeCondition_NodeState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestMapNodeCondition_NodeState& from);
  void MergeFrom(const CMsgQuestMapNodeCondition_NodeState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bonus_objectives_required = 1 [default = 0];
  inline bool has_bonus_objectives_required() const;
  inline void clear_bonus_objectives_required();
  static const int kBonusObjectivesRequiredFieldNumber = 1;
  inline ::google::protobuf::uint32 bonus_objectives_required() const;
  inline void set_bonus_objectives_required(::google::protobuf::uint32 value);

  // required .CMsgProtoDefID target_node_defid = 2;
  inline bool has_target_node_defid() const;
  inline void clear_target_node_defid();
  static const int kTargetNodeDefidFieldNumber = 2;
  inline const ::CMsgProtoDefID& target_node_defid() const;
  inline ::CMsgProtoDefID* mutable_target_node_defid();
  inline ::CMsgProtoDefID* release_target_node_defid();
  inline void set_allocated_target_node_defid(::CMsgProtoDefID* target_node_defid);

  // @@protoc_insertion_point(class_scope:CMsgQuestMapNodeCondition_NodeState)
 private:
  inline void set_has_bonus_objectives_required();
  inline void clear_has_bonus_objectives_required();
  inline void set_has_target_node_defid();
  inline void clear_has_target_node_defid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefID* target_node_defid_;
  ::google::protobuf::uint32 bonus_objectives_required_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestMapNodeCondition_NodeState* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestMapNodeCondition_Logic : public ::google::protobuf::Message {
 public:
  CMsgQuestMapNodeCondition_Logic();
  virtual ~CMsgQuestMapNodeCondition_Logic();

  CMsgQuestMapNodeCondition_Logic(const CMsgQuestMapNodeCondition_Logic& from);

  inline CMsgQuestMapNodeCondition_Logic& operator=(const CMsgQuestMapNodeCondition_Logic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestMapNodeCondition_Logic& default_instance();

  void Swap(CMsgQuestMapNodeCondition_Logic* other);

  // implements Message ----------------------------------------------

  CMsgQuestMapNodeCondition_Logic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestMapNodeCondition_Logic& from);
  void MergeFrom(const CMsgQuestMapNodeCondition_Logic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .LogicalOperation operation = 1;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::LogicalOperation operation() const;
  inline void set_operation(::LogicalOperation value);

  // repeated .CMsgQuestMapNodeCondition sub_conditions = 2;
  inline int sub_conditions_size() const;
  inline void clear_sub_conditions();
  static const int kSubConditionsFieldNumber = 2;
  inline const ::CMsgQuestMapNodeCondition& sub_conditions(int index) const;
  inline ::CMsgQuestMapNodeCondition* mutable_sub_conditions(int index);
  inline ::CMsgQuestMapNodeCondition* add_sub_conditions();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapNodeCondition >&
      sub_conditions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapNodeCondition >*
      mutable_sub_conditions();

  // @@protoc_insertion_point(class_scope:CMsgQuestMapNodeCondition_Logic)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapNodeCondition > sub_conditions_;
  int operation_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestMapNodeCondition_Logic* default_instance_;
};
// -------------------------------------------------------------------

class CMsgQuestMapNodeCondition : public ::google::protobuf::Message {
 public:
  CMsgQuestMapNodeCondition();
  virtual ~CMsgQuestMapNodeCondition();

  CMsgQuestMapNodeCondition(const CMsgQuestMapNodeCondition& from);

  inline CMsgQuestMapNodeCondition& operator=(const CMsgQuestMapNodeCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgQuestMapNodeCondition& default_instance();

  enum OperationCase {
    kNodeState = 1,
    kLogical = 2,
    OPERATION_NOT_SET = 0,
  };

  void Swap(CMsgQuestMapNodeCondition* other);

  // implements Message ----------------------------------------------

  CMsgQuestMapNodeCondition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgQuestMapNodeCondition& from);
  void MergeFrom(const CMsgQuestMapNodeCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgQuestMapNodeCondition_NodeState node_state = 1;
  inline bool has_node_state() const;
  inline void clear_node_state();
  static const int kNodeStateFieldNumber = 1;
  inline const ::CMsgQuestMapNodeCondition_NodeState& node_state() const;
  inline ::CMsgQuestMapNodeCondition_NodeState* mutable_node_state();
  inline ::CMsgQuestMapNodeCondition_NodeState* release_node_state();
  inline void set_allocated_node_state(::CMsgQuestMapNodeCondition_NodeState* node_state);

  // optional .CMsgQuestMapNodeCondition_Logic logical = 2;
  inline bool has_logical() const;
  inline void clear_logical();
  static const int kLogicalFieldNumber = 2;
  inline const ::CMsgQuestMapNodeCondition_Logic& logical() const;
  inline ::CMsgQuestMapNodeCondition_Logic* mutable_logical();
  inline ::CMsgQuestMapNodeCondition_Logic* release_logical();
  inline void set_allocated_logical(::CMsgQuestMapNodeCondition_Logic* logical);

  inline OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:CMsgQuestMapNodeCondition)
 private:
  inline void set_has_node_state();
  inline void set_has_logical();

  inline bool has_operation();
  void clear_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union OperationUnion {
    ::CMsgQuestMapNodeCondition_NodeState* node_state_;
    ::CMsgQuestMapNodeCondition_Logic* logical_;
  } operation_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgQuestMapNodeCondition* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHeaderOnly : public ::google::protobuf::Message {
 public:
  CMsgHeaderOnly();
  virtual ~CMsgHeaderOnly();

  CMsgHeaderOnly(const CMsgHeaderOnly& from);

  inline CMsgHeaderOnly& operator=(const CMsgHeaderOnly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHeaderOnly& default_instance();

  void Swap(CMsgHeaderOnly* other);

  // implements Message ----------------------------------------------

  CMsgHeaderOnly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHeaderOnly& from);
  void MergeFrom(const CMsgHeaderOnly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CMsgProtoDefHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::CMsgProtoDefHeader& header() const;
  inline ::CMsgProtoDefHeader* mutable_header();
  inline ::CMsgProtoDefHeader* release_header();
  inline void set_allocated_header(::CMsgProtoDefHeader* header);

  // @@protoc_insertion_point(class_scope:CMsgHeaderOnly)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CMsgProtoDefHeader* header_;
  friend void  protobuf_AddDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_AssignDesc_tf_5fproto_5fdef_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_tf_5fproto_5fdef_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgHeaderOnly* default_instance_;
};
// ===================================================================

static const int kStartExpandedFieldNumber = 80000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  start_expanded;
static const int kValidTypeFieldNumber = 70000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::ProtoDefTypes, ::ProtoDefTypes_IsValid>, 14, false >
  valid_type;
static const int kEditableFieldNumber = 70001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  editable;
static const int kLocalizedFieldNumber = 70002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  localized;
static const int kDoNotInheritFieldNumber = 70003;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  do_not_inherit;
static const int kDisplayNameFieldNumber = 70004;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  display_name;
static const int kCommentFieldNumber = 70005;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  comment;
static const int kMaxCountFieldNumber = 70007;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  max_count;
static const int kAllowAddFieldNumber = 70008;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_add;
static const int kAllowDeleteFieldNumber = 70009;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  allow_delete;
static const int kPanelClassOverrideFieldNumber = 70010;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  panel_class_override;
static const int kMessageInherhitanceKeyFieldNameFieldNumber = 70011;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  message_inherhitance_key_field_name;
static const int kInheritReferenceVariablesFieldNumber = 70012;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  inherit_reference_variables;
static const int kSelfInheritOnlyFieldNumber = 70013;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  self_inherit_only;
static const int kVarFieldTypeFieldNumber = 70014;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::EnumTypeTraits< ::EVarFieldType, ::EVarFieldType_IsValid>, 14, false >
  var_field_type;
static const int kMergingKeyFieldFieldNumber = 70015;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  merging_key_field;

// ===================================================================

// CMsgFieldID_CMsgField

// optional uint32 field_number = 1;
inline bool CMsgFieldID_CMsgField::has_field_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgFieldID_CMsgField::set_has_field_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgFieldID_CMsgField::clear_has_field_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgFieldID_CMsgField::clear_field_number() {
  field_number_ = 0u;
  clear_has_field_number();
}
inline ::google::protobuf::uint32 CMsgFieldID_CMsgField::field_number() const {
  // @@protoc_insertion_point(field_get:CMsgFieldID.CMsgField.field_number)
  return field_number_;
}
inline void CMsgFieldID_CMsgField::set_field_number(::google::protobuf::uint32 value) {
  set_has_field_number();
  field_number_ = value;
  // @@protoc_insertion_point(field_set:CMsgFieldID.CMsgField.field_number)
}

// optional uint32 repeated_index = 2;
inline bool CMsgFieldID_CMsgField::has_repeated_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgFieldID_CMsgField::set_has_repeated_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgFieldID_CMsgField::clear_has_repeated_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgFieldID_CMsgField::clear_repeated_index() {
  repeated_index_ = 0u;
  clear_has_repeated_index();
}
inline ::google::protobuf::uint32 CMsgFieldID_CMsgField::repeated_index() const {
  // @@protoc_insertion_point(field_get:CMsgFieldID.CMsgField.repeated_index)
  return repeated_index_;
}
inline void CMsgFieldID_CMsgField::set_repeated_index(::google::protobuf::uint32 value) {
  set_has_repeated_index();
  repeated_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgFieldID.CMsgField.repeated_index)
}

// -------------------------------------------------------------------

// CMsgFieldID

// repeated .CMsgFieldID.CMsgField field = 1;
inline int CMsgFieldID::field_size() const {
  return field_.size();
}
inline void CMsgFieldID::clear_field() {
  field_.Clear();
}
inline const ::CMsgFieldID_CMsgField& CMsgFieldID::field(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFieldID.field)
  return field_.Get(index);
}
inline ::CMsgFieldID_CMsgField* CMsgFieldID::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFieldID.field)
  return field_.Mutable(index);
}
inline ::CMsgFieldID_CMsgField* CMsgFieldID::add_field() {
  // @@protoc_insertion_point(field_add:CMsgFieldID.field)
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgFieldID_CMsgField >&
CMsgFieldID::field() const {
  // @@protoc_insertion_point(field_list:CMsgFieldID.field)
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgFieldID_CMsgField >*
CMsgFieldID::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFieldID.field)
  return &field_;
}

// -------------------------------------------------------------------

// CMsgUniversalFieldID

// optional .EValueDefinitionSource source_type = 1;
inline bool CMsgUniversalFieldID::has_source_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgUniversalFieldID::set_has_source_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgUniversalFieldID::clear_has_source_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgUniversalFieldID::clear_source_type() {
  source_type_ = 0;
  clear_has_source_type();
}
inline ::EValueDefinitionSource CMsgUniversalFieldID::source_type() const {
  // @@protoc_insertion_point(field_get:CMsgUniversalFieldID.source_type)
  return static_cast< ::EValueDefinitionSource >(source_type_);
}
inline void CMsgUniversalFieldID::set_source_type(::EValueDefinitionSource value) {
  assert(::EValueDefinitionSource_IsValid(value));
  set_has_source_type();
  source_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgUniversalFieldID.source_type)
}

// optional .CMsgProtoDefID defining_obj_id = 2;
inline bool CMsgUniversalFieldID::has_defining_obj_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgUniversalFieldID::set_has_defining_obj_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgUniversalFieldID::clear_has_defining_obj_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgUniversalFieldID::clear_defining_obj_id() {
  if (defining_obj_id_ != NULL) defining_obj_id_->::CMsgProtoDefID::Clear();
  clear_has_defining_obj_id();
}
inline const ::CMsgProtoDefID& CMsgUniversalFieldID::defining_obj_id() const {
  // @@protoc_insertion_point(field_get:CMsgUniversalFieldID.defining_obj_id)
  return defining_obj_id_ != NULL ? *defining_obj_id_ : *default_instance_->defining_obj_id_;
}
inline ::CMsgProtoDefID* CMsgUniversalFieldID::mutable_defining_obj_id() {
  set_has_defining_obj_id();
  if (defining_obj_id_ == NULL) defining_obj_id_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgUniversalFieldID.defining_obj_id)
  return defining_obj_id_;
}
inline ::CMsgProtoDefID* CMsgUniversalFieldID::release_defining_obj_id() {
  clear_has_defining_obj_id();
  ::CMsgProtoDefID* temp = defining_obj_id_;
  defining_obj_id_ = NULL;
  return temp;
}
inline void CMsgUniversalFieldID::set_allocated_defining_obj_id(::CMsgProtoDefID* defining_obj_id) {
  delete defining_obj_id_;
  defining_obj_id_ = defining_obj_id;
  if (defining_obj_id) {
    set_has_defining_obj_id();
  } else {
    clear_has_defining_obj_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgUniversalFieldID.defining_obj_id)
}

// optional .CMsgFieldID field_id = 3;
inline bool CMsgUniversalFieldID::has_field_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgUniversalFieldID::set_has_field_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgUniversalFieldID::clear_has_field_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgUniversalFieldID::clear_field_id() {
  if (field_id_ != NULL) field_id_->::CMsgFieldID::Clear();
  clear_has_field_id();
}
inline const ::CMsgFieldID& CMsgUniversalFieldID::field_id() const {
  // @@protoc_insertion_point(field_get:CMsgUniversalFieldID.field_id)
  return field_id_ != NULL ? *field_id_ : *default_instance_->field_id_;
}
inline ::CMsgFieldID* CMsgUniversalFieldID::mutable_field_id() {
  set_has_field_id();
  if (field_id_ == NULL) field_id_ = new ::CMsgFieldID;
  // @@protoc_insertion_point(field_mutable:CMsgUniversalFieldID.field_id)
  return field_id_;
}
inline ::CMsgFieldID* CMsgUniversalFieldID::release_field_id() {
  clear_has_field_id();
  ::CMsgFieldID* temp = field_id_;
  field_id_ = NULL;
  return temp;
}
inline void CMsgUniversalFieldID::set_allocated_field_id(::CMsgFieldID* field_id) {
  delete field_id_;
  field_id_ = field_id;
  if (field_id) {
    set_has_field_id();
  } else {
    clear_has_field_id();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgUniversalFieldID.field_id)
}

// -------------------------------------------------------------------

// CMsgVariableDefinition

// optional string name = 1;
inline bool CMsgVariableDefinition::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgVariableDefinition::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgVariableDefinition::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgVariableDefinition::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgVariableDefinition::name() const {
  // @@protoc_insertion_point(field_get:CMsgVariableDefinition.name)
  return *name_;
}
inline void CMsgVariableDefinition::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgVariableDefinition.name)
}
inline void CMsgVariableDefinition::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgVariableDefinition.name)
}
inline void CMsgVariableDefinition::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgVariableDefinition.name)
}
inline ::std::string* CMsgVariableDefinition::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgVariableDefinition.name)
  return name_;
}
inline ::std::string* CMsgVariableDefinition::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgVariableDefinition::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgVariableDefinition.name)
}

// optional bool inherit = 2 [default = true];
inline bool CMsgVariableDefinition::has_inherit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgVariableDefinition::set_has_inherit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgVariableDefinition::clear_has_inherit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgVariableDefinition::clear_inherit() {
  inherit_ = true;
  clear_has_inherit();
}
inline bool CMsgVariableDefinition::inherit() const {
  // @@protoc_insertion_point(field_get:CMsgVariableDefinition.inherit)
  return inherit_;
}
inline void CMsgVariableDefinition::set_inherit(bool value) {
  set_has_inherit();
  inherit_ = value;
  // @@protoc_insertion_point(field_set:CMsgVariableDefinition.inherit)
}

// optional string value = 3;
inline bool CMsgVariableDefinition::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgVariableDefinition::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgVariableDefinition::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgVariableDefinition::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CMsgVariableDefinition::value() const {
  // @@protoc_insertion_point(field_get:CMsgVariableDefinition.value)
  return *value_;
}
inline void CMsgVariableDefinition::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgVariableDefinition.value)
}
inline void CMsgVariableDefinition::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgVariableDefinition.value)
}
inline void CMsgVariableDefinition::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgVariableDefinition.value)
}
inline ::std::string* CMsgVariableDefinition::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgVariableDefinition.value)
  return value_;
}
inline ::std::string* CMsgVariableDefinition::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgVariableDefinition::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgVariableDefinition.value)
}

// -------------------------------------------------------------------

// CMsgProtoDefHeader

// required uint32 defindex = 1;
inline bool CMsgProtoDefHeader::has_defindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgProtoDefHeader::set_has_defindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgProtoDefHeader::clear_has_defindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgProtoDefHeader::clear_defindex() {
  defindex_ = 0u;
  clear_has_defindex();
}
inline ::google::protobuf::uint32 CMsgProtoDefHeader::defindex() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.defindex)
  return defindex_;
}
inline void CMsgProtoDefHeader::set_defindex(::google::protobuf::uint32 value) {
  set_has_defindex();
  defindex_ = value;
  // @@protoc_insertion_point(field_set:CMsgProtoDefHeader.defindex)
}

// optional string name = 2;
inline bool CMsgProtoDefHeader::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgProtoDefHeader::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgProtoDefHeader::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgProtoDefHeader::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgProtoDefHeader::name() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.name)
  return *name_;
}
inline void CMsgProtoDefHeader::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgProtoDefHeader.name)
}
inline void CMsgProtoDefHeader::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgProtoDefHeader.name)
}
inline void CMsgProtoDefHeader::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgProtoDefHeader.name)
}
inline ::std::string* CMsgProtoDefHeader::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefHeader.name)
  return name_;
}
inline ::std::string* CMsgProtoDefHeader::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgProtoDefHeader::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoDefHeader.name)
}

// repeated .CMsgProtoDefID prefabs = 3;
inline int CMsgProtoDefHeader::prefabs_size() const {
  return prefabs_.size();
}
inline void CMsgProtoDefHeader::clear_prefabs() {
  prefabs_.Clear();
}
inline const ::CMsgProtoDefID& CMsgProtoDefHeader::prefabs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.prefabs)
  return prefabs_.Get(index);
}
inline ::CMsgProtoDefID* CMsgProtoDefHeader::mutable_prefabs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefHeader.prefabs)
  return prefabs_.Mutable(index);
}
inline ::CMsgProtoDefID* CMsgProtoDefHeader::add_prefabs() {
  // @@protoc_insertion_point(field_add:CMsgProtoDefHeader.prefabs)
  return prefabs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID >&
CMsgProtoDefHeader::prefabs() const {
  // @@protoc_insertion_point(field_list:CMsgProtoDefHeader.prefabs)
  return prefabs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID >*
CMsgProtoDefHeader::mutable_prefabs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProtoDefHeader.prefabs)
  return &prefabs_;
}

// repeated string tags = 4;
inline int CMsgProtoDefHeader::tags_size() const {
  return tags_.size();
}
inline void CMsgProtoDefHeader::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CMsgProtoDefHeader::tags(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.tags)
  return tags_.Get(index);
}
inline ::std::string* CMsgProtoDefHeader::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefHeader.tags)
  return tags_.Mutable(index);
}
inline void CMsgProtoDefHeader::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgProtoDefHeader.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CMsgProtoDefHeader::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgProtoDefHeader.tags)
}
inline void CMsgProtoDefHeader::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgProtoDefHeader.tags)
}
inline ::std::string* CMsgProtoDefHeader::add_tags() {
  return tags_.Add();
}
inline void CMsgProtoDefHeader::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgProtoDefHeader.tags)
}
inline void CMsgProtoDefHeader::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgProtoDefHeader.tags)
}
inline void CMsgProtoDefHeader::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgProtoDefHeader.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgProtoDefHeader::tags() const {
  // @@protoc_insertion_point(field_list:CMsgProtoDefHeader.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgProtoDefHeader::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProtoDefHeader.tags)
  return &tags_;
}

// optional bool prefab_only = 5 [default = false];
inline bool CMsgProtoDefHeader::has_prefab_only() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgProtoDefHeader::set_has_prefab_only() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgProtoDefHeader::clear_has_prefab_only() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgProtoDefHeader::clear_prefab_only() {
  prefab_only_ = false;
  clear_has_prefab_only();
}
inline bool CMsgProtoDefHeader::prefab_only() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.prefab_only)
  return prefab_only_;
}
inline void CMsgProtoDefHeader::set_prefab_only(bool value) {
  set_has_prefab_only();
  prefab_only_ = value;
  // @@protoc_insertion_point(field_set:CMsgProtoDefHeader.prefab_only)
}

// repeated .CMsgVariableDefinition variables = 6;
inline int CMsgProtoDefHeader::variables_size() const {
  return variables_.size();
}
inline void CMsgProtoDefHeader::clear_variables() {
  variables_.Clear();
}
inline const ::CMsgVariableDefinition& CMsgProtoDefHeader::variables(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefHeader.variables)
  return variables_.Get(index);
}
inline ::CMsgVariableDefinition* CMsgProtoDefHeader::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProtoDefHeader.variables)
  return variables_.Mutable(index);
}
inline ::CMsgVariableDefinition* CMsgProtoDefHeader::add_variables() {
  // @@protoc_insertion_point(field_add:CMsgProtoDefHeader.variables)
  return variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgVariableDefinition >&
CMsgProtoDefHeader::variables() const {
  // @@protoc_insertion_point(field_list:CMsgProtoDefHeader.variables)
  return variables_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgVariableDefinition >*
CMsgProtoDefHeader::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProtoDefHeader.variables)
  return &variables_;
}

// -------------------------------------------------------------------

// CMsgValidTypes

// repeated .ProtoDefTypes types = 1;
inline int CMsgValidTypes::types_size() const {
  return types_.size();
}
inline void CMsgValidTypes::clear_types() {
  types_.Clear();
}
inline ::ProtoDefTypes CMsgValidTypes::types(int index) const {
  // @@protoc_insertion_point(field_get:CMsgValidTypes.types)
  return static_cast< ::ProtoDefTypes >(types_.Get(index));
}
inline void CMsgValidTypes::set_types(int index, ::ProtoDefTypes value) {
  assert(::ProtoDefTypes_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgValidTypes.types)
}
inline void CMsgValidTypes::add_types(::ProtoDefTypes value) {
  assert(::ProtoDefTypes_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgValidTypes.types)
}
inline const ::google::protobuf::RepeatedField<int>&
CMsgValidTypes::types() const {
  // @@protoc_insertion_point(field_list:CMsgValidTypes.types)
  return types_;
}
inline ::google::protobuf::RepeatedField<int>*
CMsgValidTypes::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:CMsgValidTypes.types)
  return &types_;
}

// -------------------------------------------------------------------

// CMsgProtoDefID

// optional uint32 defindex = 1;
inline bool CMsgProtoDefID::has_defindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgProtoDefID::set_has_defindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgProtoDefID::clear_has_defindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgProtoDefID::clear_defindex() {
  defindex_ = 0u;
  clear_has_defindex();
}
inline ::google::protobuf::uint32 CMsgProtoDefID::defindex() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.defindex)
  return defindex_;
}
inline void CMsgProtoDefID::set_defindex(::google::protobuf::uint32 value) {
  set_has_defindex();
  defindex_ = value;
  // @@protoc_insertion_point(field_set:CMsgProtoDefID.defindex)
}

// optional .ProtoDefTypes type = 2;
inline bool CMsgProtoDefID::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgProtoDefID::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgProtoDefID::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgProtoDefID::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ProtoDefTypes CMsgProtoDefID::type() const {
  // @@protoc_insertion_point(field_get:CMsgProtoDefID.type)
  return static_cast< ::ProtoDefTypes >(type_);
}
inline void CMsgProtoDefID::set_type(::ProtoDefTypes value) {
  assert(::ProtoDefTypes_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CMsgProtoDefID.type)
}

// optional .CMsgQuestMapNodeDef instance_def_type_quest_map_node = 3;
inline bool CMsgProtoDefID::has_instance_def_type_quest_map_node() const {
  return instance_case() == kInstanceDefTypeQuestMapNode;
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest_map_node() {
  _oneof_case_[0] = kInstanceDefTypeQuestMapNode;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest_map_node() {
  if (has_instance_def_type_quest_map_node()) {
    delete instance_.instance_def_type_quest_map_node_;
    clear_has_instance();
  }
}
inline const ::CMsgQuestMapNodeDef& CMsgProtoDefID::instance_def_type_quest_map_node() const {
  return has_instance_def_type_quest_map_node() ? *instance_.instance_def_type_quest_map_node_
                      : ::CMsgQuestMapNodeDef::default_instance();
}
inline ::CMsgQuestMapNodeDef* CMsgProtoDefID::mutable_instance_def_type_quest_map_node() {
  if (!has_instance_def_type_quest_map_node()) {
    clear_instance();
    set_has_instance_def_type_quest_map_node();
    instance_.instance_def_type_quest_map_node_ = new ::CMsgQuestMapNodeDef;
  }
  return instance_.instance_def_type_quest_map_node_;
}
inline ::CMsgQuestMapNodeDef* CMsgProtoDefID::release_instance_def_type_quest_map_node() {
  if (has_instance_def_type_quest_map_node()) {
    clear_has_instance();
    ::CMsgQuestMapNodeDef* temp = instance_.instance_def_type_quest_map_node_;
    instance_.instance_def_type_quest_map_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_quest_map_node(::CMsgQuestMapNodeDef* instance_def_type_quest_map_node) {
  clear_instance();
  if (instance_def_type_quest_map_node) {
    set_has_instance_def_type_quest_map_node();
    instance_.instance_def_type_quest_map_node_ = instance_def_type_quest_map_node;
  }
}

// optional .CMsgQuestTheme instance_def_type_quest_theme = 5;
inline bool CMsgProtoDefID::has_instance_def_type_quest_theme() const {
  return instance_case() == kInstanceDefTypeQuestTheme;
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest_theme() {
  _oneof_case_[0] = kInstanceDefTypeQuestTheme;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest_theme() {
  if (has_instance_def_type_quest_theme()) {
    delete instance_.instance_def_type_quest_theme_;
    clear_has_instance();
  }
}
inline const ::CMsgQuestTheme& CMsgProtoDefID::instance_def_type_quest_theme() const {
  return has_instance_def_type_quest_theme() ? *instance_.instance_def_type_quest_theme_
                      : ::CMsgQuestTheme::default_instance();
}
inline ::CMsgQuestTheme* CMsgProtoDefID::mutable_instance_def_type_quest_theme() {
  if (!has_instance_def_type_quest_theme()) {
    clear_instance();
    set_has_instance_def_type_quest_theme();
    instance_.instance_def_type_quest_theme_ = new ::CMsgQuestTheme;
  }
  return instance_.instance_def_type_quest_theme_;
}
inline ::CMsgQuestTheme* CMsgProtoDefID::release_instance_def_type_quest_theme() {
  if (has_instance_def_type_quest_theme()) {
    clear_has_instance();
    ::CMsgQuestTheme* temp = instance_.instance_def_type_quest_theme_;
    instance_.instance_def_type_quest_theme_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_quest_theme(::CMsgQuestTheme* instance_def_type_quest_theme) {
  clear_instance();
  if (instance_def_type_quest_theme) {
    set_has_instance_def_type_quest_theme();
    instance_.instance_def_type_quest_theme_ = instance_def_type_quest_theme;
  }
}

// optional .CMsgQuestMapRegionDef instance_def_type_quest_map_region = 6;
inline bool CMsgProtoDefID::has_instance_def_type_quest_map_region() const {
  return instance_case() == kInstanceDefTypeQuestMapRegion;
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest_map_region() {
  _oneof_case_[0] = kInstanceDefTypeQuestMapRegion;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest_map_region() {
  if (has_instance_def_type_quest_map_region()) {
    delete instance_.instance_def_type_quest_map_region_;
    clear_has_instance();
  }
}
inline const ::CMsgQuestMapRegionDef& CMsgProtoDefID::instance_def_type_quest_map_region() const {
  return has_instance_def_type_quest_map_region() ? *instance_.instance_def_type_quest_map_region_
                      : ::CMsgQuestMapRegionDef::default_instance();
}
inline ::CMsgQuestMapRegionDef* CMsgProtoDefID::mutable_instance_def_type_quest_map_region() {
  if (!has_instance_def_type_quest_map_region()) {
    clear_instance();
    set_has_instance_def_type_quest_map_region();
    instance_.instance_def_type_quest_map_region_ = new ::CMsgQuestMapRegionDef;
  }
  return instance_.instance_def_type_quest_map_region_;
}
inline ::CMsgQuestMapRegionDef* CMsgProtoDefID::release_instance_def_type_quest_map_region() {
  if (has_instance_def_type_quest_map_region()) {
    clear_has_instance();
    ::CMsgQuestMapRegionDef* temp = instance_.instance_def_type_quest_map_region_;
    instance_.instance_def_type_quest_map_region_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_quest_map_region(::CMsgQuestMapRegionDef* instance_def_type_quest_map_region) {
  clear_instance();
  if (instance_def_type_quest_map_region) {
    set_has_instance_def_type_quest_map_region();
    instance_.instance_def_type_quest_map_region_ = instance_def_type_quest_map_region;
  }
}

// optional .CMsgQuestDef instance_def_type_quest = 7;
inline bool CMsgProtoDefID::has_instance_def_type_quest() const {
  return instance_case() == kInstanceDefTypeQuest;
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest() {
  _oneof_case_[0] = kInstanceDefTypeQuest;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest() {
  if (has_instance_def_type_quest()) {
    delete instance_.instance_def_type_quest_;
    clear_has_instance();
  }
}
inline const ::CMsgQuestDef& CMsgProtoDefID::instance_def_type_quest() const {
  return has_instance_def_type_quest() ? *instance_.instance_def_type_quest_
                      : ::CMsgQuestDef::default_instance();
}
inline ::CMsgQuestDef* CMsgProtoDefID::mutable_instance_def_type_quest() {
  if (!has_instance_def_type_quest()) {
    clear_instance();
    set_has_instance_def_type_quest();
    instance_.instance_def_type_quest_ = new ::CMsgQuestDef;
  }
  return instance_.instance_def_type_quest_;
}
inline ::CMsgQuestDef* CMsgProtoDefID::release_instance_def_type_quest() {
  if (has_instance_def_type_quest()) {
    clear_has_instance();
    ::CMsgQuestDef* temp = instance_.instance_def_type_quest_;
    instance_.instance_def_type_quest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_quest(::CMsgQuestDef* instance_def_type_quest) {
  clear_instance();
  if (instance_def_type_quest) {
    set_has_instance_def_type_quest();
    instance_.instance_def_type_quest_ = instance_def_type_quest;
  }
}

// optional .CMsgQuestObjectiveDef instance_def_type_quest_objective = 8;
inline bool CMsgProtoDefID::has_instance_def_type_quest_objective() const {
  return instance_case() == kInstanceDefTypeQuestObjective;
}
inline void CMsgProtoDefID::set_has_instance_def_type_quest_objective() {
  _oneof_case_[0] = kInstanceDefTypeQuestObjective;
}
inline void CMsgProtoDefID::clear_instance_def_type_quest_objective() {
  if (has_instance_def_type_quest_objective()) {
    delete instance_.instance_def_type_quest_objective_;
    clear_has_instance();
  }
}
inline const ::CMsgQuestObjectiveDef& CMsgProtoDefID::instance_def_type_quest_objective() const {
  return has_instance_def_type_quest_objective() ? *instance_.instance_def_type_quest_objective_
                      : ::CMsgQuestObjectiveDef::default_instance();
}
inline ::CMsgQuestObjectiveDef* CMsgProtoDefID::mutable_instance_def_type_quest_objective() {
  if (!has_instance_def_type_quest_objective()) {
    clear_instance();
    set_has_instance_def_type_quest_objective();
    instance_.instance_def_type_quest_objective_ = new ::CMsgQuestObjectiveDef;
  }
  return instance_.instance_def_type_quest_objective_;
}
inline ::CMsgQuestObjectiveDef* CMsgProtoDefID::release_instance_def_type_quest_objective() {
  if (has_instance_def_type_quest_objective()) {
    clear_has_instance();
    ::CMsgQuestObjectiveDef* temp = instance_.instance_def_type_quest_objective_;
    instance_.instance_def_type_quest_objective_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_quest_objective(::CMsgQuestObjectiveDef* instance_def_type_quest_objective) {
  clear_instance();
  if (instance_def_type_quest_objective) {
    set_has_instance_def_type_quest_objective();
    instance_.instance_def_type_quest_objective_ = instance_def_type_quest_objective;
  }
}

// optional .CMsgPaintKit_Variables instance_def_type_paintkit_variables = 9;
inline bool CMsgProtoDefID::has_instance_def_type_paintkit_variables() const {
  return instance_case() == kInstanceDefTypePaintkitVariables;
}
inline void CMsgProtoDefID::set_has_instance_def_type_paintkit_variables() {
  _oneof_case_[0] = kInstanceDefTypePaintkitVariables;
}
inline void CMsgProtoDefID::clear_instance_def_type_paintkit_variables() {
  if (has_instance_def_type_paintkit_variables()) {
    delete instance_.instance_def_type_paintkit_variables_;
    clear_has_instance();
  }
}
inline const ::CMsgPaintKit_Variables& CMsgProtoDefID::instance_def_type_paintkit_variables() const {
  return has_instance_def_type_paintkit_variables() ? *instance_.instance_def_type_paintkit_variables_
                      : ::CMsgPaintKit_Variables::default_instance();
}
inline ::CMsgPaintKit_Variables* CMsgProtoDefID::mutable_instance_def_type_paintkit_variables() {
  if (!has_instance_def_type_paintkit_variables()) {
    clear_instance();
    set_has_instance_def_type_paintkit_variables();
    instance_.instance_def_type_paintkit_variables_ = new ::CMsgPaintKit_Variables;
  }
  return instance_.instance_def_type_paintkit_variables_;
}
inline ::CMsgPaintKit_Variables* CMsgProtoDefID::release_instance_def_type_paintkit_variables() {
  if (has_instance_def_type_paintkit_variables()) {
    clear_has_instance();
    ::CMsgPaintKit_Variables* temp = instance_.instance_def_type_paintkit_variables_;
    instance_.instance_def_type_paintkit_variables_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_paintkit_variables(::CMsgPaintKit_Variables* instance_def_type_paintkit_variables) {
  clear_instance();
  if (instance_def_type_paintkit_variables) {
    set_has_instance_def_type_paintkit_variables();
    instance_.instance_def_type_paintkit_variables_ = instance_def_type_paintkit_variables;
  }
}

// optional .CMsgPaintKit_Operation instance_def_type_paintkit_operation = 10;
inline bool CMsgProtoDefID::has_instance_def_type_paintkit_operation() const {
  return instance_case() == kInstanceDefTypePaintkitOperation;
}
inline void CMsgProtoDefID::set_has_instance_def_type_paintkit_operation() {
  _oneof_case_[0] = kInstanceDefTypePaintkitOperation;
}
inline void CMsgProtoDefID::clear_instance_def_type_paintkit_operation() {
  if (has_instance_def_type_paintkit_operation()) {
    delete instance_.instance_def_type_paintkit_operation_;
    clear_has_instance();
  }
}
inline const ::CMsgPaintKit_Operation& CMsgProtoDefID::instance_def_type_paintkit_operation() const {
  return has_instance_def_type_paintkit_operation() ? *instance_.instance_def_type_paintkit_operation_
                      : ::CMsgPaintKit_Operation::default_instance();
}
inline ::CMsgPaintKit_Operation* CMsgProtoDefID::mutable_instance_def_type_paintkit_operation() {
  if (!has_instance_def_type_paintkit_operation()) {
    clear_instance();
    set_has_instance_def_type_paintkit_operation();
    instance_.instance_def_type_paintkit_operation_ = new ::CMsgPaintKit_Operation;
  }
  return instance_.instance_def_type_paintkit_operation_;
}
inline ::CMsgPaintKit_Operation* CMsgProtoDefID::release_instance_def_type_paintkit_operation() {
  if (has_instance_def_type_paintkit_operation()) {
    clear_has_instance();
    ::CMsgPaintKit_Operation* temp = instance_.instance_def_type_paintkit_operation_;
    instance_.instance_def_type_paintkit_operation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_paintkit_operation(::CMsgPaintKit_Operation* instance_def_type_paintkit_operation) {
  clear_instance();
  if (instance_def_type_paintkit_operation) {
    set_has_instance_def_type_paintkit_operation();
    instance_.instance_def_type_paintkit_operation_ = instance_def_type_paintkit_operation;
  }
}

// optional .CMsgPaintKit_ItemDefinition instance_def_type_paintkit_item_definition = 11;
inline bool CMsgProtoDefID::has_instance_def_type_paintkit_item_definition() const {
  return instance_case() == kInstanceDefTypePaintkitItemDefinition;
}
inline void CMsgProtoDefID::set_has_instance_def_type_paintkit_item_definition() {
  _oneof_case_[0] = kInstanceDefTypePaintkitItemDefinition;
}
inline void CMsgProtoDefID::clear_instance_def_type_paintkit_item_definition() {
  if (has_instance_def_type_paintkit_item_definition()) {
    delete instance_.instance_def_type_paintkit_item_definition_;
    clear_has_instance();
  }
}
inline const ::CMsgPaintKit_ItemDefinition& CMsgProtoDefID::instance_def_type_paintkit_item_definition() const {
  return has_instance_def_type_paintkit_item_definition() ? *instance_.instance_def_type_paintkit_item_definition_
                      : ::CMsgPaintKit_ItemDefinition::default_instance();
}
inline ::CMsgPaintKit_ItemDefinition* CMsgProtoDefID::mutable_instance_def_type_paintkit_item_definition() {
  if (!has_instance_def_type_paintkit_item_definition()) {
    clear_instance();
    set_has_instance_def_type_paintkit_item_definition();
    instance_.instance_def_type_paintkit_item_definition_ = new ::CMsgPaintKit_ItemDefinition;
  }
  return instance_.instance_def_type_paintkit_item_definition_;
}
inline ::CMsgPaintKit_ItemDefinition* CMsgProtoDefID::release_instance_def_type_paintkit_item_definition() {
  if (has_instance_def_type_paintkit_item_definition()) {
    clear_has_instance();
    ::CMsgPaintKit_ItemDefinition* temp = instance_.instance_def_type_paintkit_item_definition_;
    instance_.instance_def_type_paintkit_item_definition_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_paintkit_item_definition(::CMsgPaintKit_ItemDefinition* instance_def_type_paintkit_item_definition) {
  clear_instance();
  if (instance_def_type_paintkit_item_definition) {
    set_has_instance_def_type_paintkit_item_definition();
    instance_.instance_def_type_paintkit_item_definition_ = instance_def_type_paintkit_item_definition;
  }
}

// optional .CMsgPaintKit_Definition instance_def_type_paintkit_definition = 12;
inline bool CMsgProtoDefID::has_instance_def_type_paintkit_definition() const {
  return instance_case() == kInstanceDefTypePaintkitDefinition;
}
inline void CMsgProtoDefID::set_has_instance_def_type_paintkit_definition() {
  _oneof_case_[0] = kInstanceDefTypePaintkitDefinition;
}
inline void CMsgProtoDefID::clear_instance_def_type_paintkit_definition() {
  if (has_instance_def_type_paintkit_definition()) {
    delete instance_.instance_def_type_paintkit_definition_;
    clear_has_instance();
  }
}
inline const ::CMsgPaintKit_Definition& CMsgProtoDefID::instance_def_type_paintkit_definition() const {
  return has_instance_def_type_paintkit_definition() ? *instance_.instance_def_type_paintkit_definition_
                      : ::CMsgPaintKit_Definition::default_instance();
}
inline ::CMsgPaintKit_Definition* CMsgProtoDefID::mutable_instance_def_type_paintkit_definition() {
  if (!has_instance_def_type_paintkit_definition()) {
    clear_instance();
    set_has_instance_def_type_paintkit_definition();
    instance_.instance_def_type_paintkit_definition_ = new ::CMsgPaintKit_Definition;
  }
  return instance_.instance_def_type_paintkit_definition_;
}
inline ::CMsgPaintKit_Definition* CMsgProtoDefID::release_instance_def_type_paintkit_definition() {
  if (has_instance_def_type_paintkit_definition()) {
    clear_has_instance();
    ::CMsgPaintKit_Definition* temp = instance_.instance_def_type_paintkit_definition_;
    instance_.instance_def_type_paintkit_definition_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_paintkit_definition(::CMsgPaintKit_Definition* instance_def_type_paintkit_definition) {
  clear_instance();
  if (instance_def_type_paintkit_definition) {
    set_has_instance_def_type_paintkit_definition();
    instance_.instance_def_type_paintkit_definition_ = instance_def_type_paintkit_definition;
  }
}

// optional .CMsgHeaderOnly instance_def_type_header_only = 13;
inline bool CMsgProtoDefID::has_instance_def_type_header_only() const {
  return instance_case() == kInstanceDefTypeHeaderOnly;
}
inline void CMsgProtoDefID::set_has_instance_def_type_header_only() {
  _oneof_case_[0] = kInstanceDefTypeHeaderOnly;
}
inline void CMsgProtoDefID::clear_instance_def_type_header_only() {
  if (has_instance_def_type_header_only()) {
    delete instance_.instance_def_type_header_only_;
    clear_has_instance();
  }
}
inline const ::CMsgHeaderOnly& CMsgProtoDefID::instance_def_type_header_only() const {
  return has_instance_def_type_header_only() ? *instance_.instance_def_type_header_only_
                      : ::CMsgHeaderOnly::default_instance();
}
inline ::CMsgHeaderOnly* CMsgProtoDefID::mutable_instance_def_type_header_only() {
  if (!has_instance_def_type_header_only()) {
    clear_instance();
    set_has_instance_def_type_header_only();
    instance_.instance_def_type_header_only_ = new ::CMsgHeaderOnly;
  }
  return instance_.instance_def_type_header_only_;
}
inline ::CMsgHeaderOnly* CMsgProtoDefID::release_instance_def_type_header_only() {
  if (has_instance_def_type_header_only()) {
    clear_has_instance();
    ::CMsgHeaderOnly* temp = instance_.instance_def_type_header_only_;
    instance_.instance_def_type_header_only_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgProtoDefID::set_allocated_instance_def_type_header_only(::CMsgHeaderOnly* instance_def_type_header_only) {
  clear_instance();
  if (instance_def_type_header_only) {
    set_has_instance_def_type_header_only();
    instance_.instance_def_type_header_only_ = instance_def_type_header_only;
  }
}

inline bool CMsgProtoDefID::has_instance() {
  return instance_case() != INSTANCE_NOT_SET;
}
inline void CMsgProtoDefID::clear_has_instance() {
  _oneof_case_[0] = INSTANCE_NOT_SET;
}
inline CMsgProtoDefID::InstanceCase CMsgProtoDefID::instance_case() const {
  return CMsgProtoDefID::InstanceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgQuestObjectiveDef

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestObjectiveDef::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestObjectiveDef::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestObjectiveDef::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestObjectiveDef::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgQuestObjectiveDef::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestObjectiveDef::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestObjectiveDef::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgQuestObjectiveDef::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestObjectiveDef.header)
}

// optional string loc_desctoken = 2;
inline bool CMsgQuestObjectiveDef::has_loc_desctoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestObjectiveDef::set_has_loc_desctoken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestObjectiveDef::clear_has_loc_desctoken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestObjectiveDef::clear_loc_desctoken() {
  if (loc_desctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_->clear();
  }
  clear_has_loc_desctoken();
}
inline const ::std::string& CMsgQuestObjectiveDef::loc_desctoken() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.loc_desctoken)
  return *loc_desctoken_;
}
inline void CMsgQuestObjectiveDef::set_loc_desctoken(const ::std::string& value) {
  set_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_ = new ::std::string;
  }
  loc_desctoken_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.loc_desctoken)
}
inline void CMsgQuestObjectiveDef::set_loc_desctoken(const char* value) {
  set_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_ = new ::std::string;
  }
  loc_desctoken_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestObjectiveDef.loc_desctoken)
}
inline void CMsgQuestObjectiveDef::set_loc_desctoken(const char* value, size_t size) {
  set_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_ = new ::std::string;
  }
  loc_desctoken_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestObjectiveDef.loc_desctoken)
}
inline ::std::string* CMsgQuestObjectiveDef::mutable_loc_desctoken() {
  set_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.loc_desctoken)
  return loc_desctoken_;
}
inline ::std::string* CMsgQuestObjectiveDef::release_loc_desctoken() {
  clear_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loc_desctoken_;
    loc_desctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestObjectiveDef::set_allocated_loc_desctoken(::std::string* loc_desctoken) {
  if (loc_desctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loc_desctoken_;
  }
  if (loc_desctoken) {
    set_has_loc_desctoken();
    loc_desctoken_ = loc_desctoken;
  } else {
    clear_has_loc_desctoken();
    loc_desctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestObjectiveDef.loc_desctoken)
}

// optional uint32 points = 3;
inline bool CMsgQuestObjectiveDef::has_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuestObjectiveDef::set_has_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuestObjectiveDef::clear_has_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuestObjectiveDef::clear_points() {
  points_ = 0u;
  clear_has_points();
}
inline ::google::protobuf::uint32 CMsgQuestObjectiveDef::points() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.points)
  return points_;
}
inline void CMsgQuestObjectiveDef::set_points(::google::protobuf::uint32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.points)
}

// optional uint32 conditions_defindex = 5;
inline bool CMsgQuestObjectiveDef::has_conditions_defindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgQuestObjectiveDef::set_has_conditions_defindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgQuestObjectiveDef::clear_has_conditions_defindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgQuestObjectiveDef::clear_conditions_defindex() {
  conditions_defindex_ = 0u;
  clear_has_conditions_defindex();
}
inline ::google::protobuf::uint32 CMsgQuestObjectiveDef::conditions_defindex() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.conditions_defindex)
  return conditions_defindex_;
}
inline void CMsgQuestObjectiveDef::set_conditions_defindex(::google::protobuf::uint32 value) {
  set_has_conditions_defindex();
  conditions_defindex_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.conditions_defindex)
}

// repeated string map = 8;
inline int CMsgQuestObjectiveDef::map_size() const {
  return map_.size();
}
inline void CMsgQuestObjectiveDef::clear_map() {
  map_.Clear();
}
inline const ::std::string& CMsgQuestObjectiveDef::map(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.map)
  return map_.Get(index);
}
inline ::std::string* CMsgQuestObjectiveDef::mutable_map(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.map)
  return map_.Mutable(index);
}
inline void CMsgQuestObjectiveDef::set_map(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.map)
  map_.Mutable(index)->assign(value);
}
inline void CMsgQuestObjectiveDef::set_map(int index, const char* value) {
  map_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestObjectiveDef.map)
}
inline void CMsgQuestObjectiveDef::set_map(int index, const char* value, size_t size) {
  map_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestObjectiveDef.map)
}
inline ::std::string* CMsgQuestObjectiveDef::add_map() {
  return map_.Add();
}
inline void CMsgQuestObjectiveDef::add_map(const ::std::string& value) {
  map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.map)
}
inline void CMsgQuestObjectiveDef::add_map(const char* value) {
  map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgQuestObjectiveDef.map)
}
inline void CMsgQuestObjectiveDef::add_map(const char* value, size_t size) {
  map_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgQuestObjectiveDef.map)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgQuestObjectiveDef::map() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.map)
  return map_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgQuestObjectiveDef::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.map)
  return &map_;
}

// repeated .CMsgQuestObjectiveDef.ETF2GameModes game_mode = 9;
inline int CMsgQuestObjectiveDef::game_mode_size() const {
  return game_mode_.size();
}
inline void CMsgQuestObjectiveDef::clear_game_mode() {
  game_mode_.Clear();
}
inline ::CMsgQuestObjectiveDef_ETF2GameModes CMsgQuestObjectiveDef::game_mode(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.game_mode)
  return static_cast< ::CMsgQuestObjectiveDef_ETF2GameModes >(game_mode_.Get(index));
}
inline void CMsgQuestObjectiveDef::set_game_mode(int index, ::CMsgQuestObjectiveDef_ETF2GameModes value) {
  assert(::CMsgQuestObjectiveDef_ETF2GameModes_IsValid(value));
  game_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.game_mode)
}
inline void CMsgQuestObjectiveDef::add_game_mode(::CMsgQuestObjectiveDef_ETF2GameModes value) {
  assert(::CMsgQuestObjectiveDef_ETF2GameModes_IsValid(value));
  game_mode_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.game_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
CMsgQuestObjectiveDef::game_mode() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.game_mode)
  return game_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
CMsgQuestObjectiveDef::mutable_game_mode() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.game_mode)
  return &game_mode_;
}

// optional .CMsgQuestObjectiveDef.ETF2Team team = 10;
inline bool CMsgQuestObjectiveDef::has_team() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgQuestObjectiveDef::set_has_team() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgQuestObjectiveDef::clear_has_team() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgQuestObjectiveDef::clear_team() {
  team_ = 2;
  clear_has_team();
}
inline ::CMsgQuestObjectiveDef_ETF2Team CMsgQuestObjectiveDef::team() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.team)
  return static_cast< ::CMsgQuestObjectiveDef_ETF2Team >(team_);
}
inline void CMsgQuestObjectiveDef::set_team(::CMsgQuestObjectiveDef_ETF2Team value) {
  assert(::CMsgQuestObjectiveDef_ETF2Team_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.team)
}

// repeated .CMsgVarField condition_vars = 11;
inline int CMsgQuestObjectiveDef::condition_vars_size() const {
  return condition_vars_.size();
}
inline void CMsgQuestObjectiveDef::clear_condition_vars() {
  condition_vars_.Clear();
}
inline const ::CMsgVarField& CMsgQuestObjectiveDef::condition_vars(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.condition_vars)
  return condition_vars_.Get(index);
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::mutable_condition_vars(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.condition_vars)
  return condition_vars_.Mutable(index);
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::add_condition_vars() {
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.condition_vars)
  return condition_vars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
CMsgQuestObjectiveDef::condition_vars() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.condition_vars)
  return condition_vars_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
CMsgQuestObjectiveDef::mutable_condition_vars() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.condition_vars)
  return &condition_vars_;
}

// repeated .CMsgVarField classes_vars = 12;
inline int CMsgQuestObjectiveDef::classes_vars_size() const {
  return classes_vars_.size();
}
inline void CMsgQuestObjectiveDef::clear_classes_vars() {
  classes_vars_.Clear();
}
inline const ::CMsgVarField& CMsgQuestObjectiveDef::classes_vars(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.classes_vars)
  return classes_vars_.Get(index);
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::mutable_classes_vars(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.classes_vars)
  return classes_vars_.Mutable(index);
}
inline ::CMsgVarField* CMsgQuestObjectiveDef::add_classes_vars() {
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.classes_vars)
  return classes_vars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
CMsgQuestObjectiveDef::classes_vars() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.classes_vars)
  return classes_vars_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
CMsgQuestObjectiveDef::mutable_classes_vars() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.classes_vars)
  return &classes_vars_;
}

// repeated .CMsgQuestObjectiveDef.ETF2Conditions conditions = 13;
inline int CMsgQuestObjectiveDef::conditions_size() const {
  return conditions_.size();
}
inline void CMsgQuestObjectiveDef::clear_conditions() {
  conditions_.Clear();
}
inline ::CMsgQuestObjectiveDef_ETF2Conditions CMsgQuestObjectiveDef::conditions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.conditions)
  return static_cast< ::CMsgQuestObjectiveDef_ETF2Conditions >(conditions_.Get(index));
}
inline void CMsgQuestObjectiveDef::set_conditions(int index, ::CMsgQuestObjectiveDef_ETF2Conditions value) {
  assert(::CMsgQuestObjectiveDef_ETF2Conditions_IsValid(value));
  conditions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.conditions)
}
inline void CMsgQuestObjectiveDef::add_conditions(::CMsgQuestObjectiveDef_ETF2Conditions value) {
  assert(::CMsgQuestObjectiveDef_ETF2Conditions_IsValid(value));
  conditions_.Add(value);
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.conditions)
}
inline const ::google::protobuf::RepeatedField<int>&
CMsgQuestObjectiveDef::conditions() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.conditions)
  return conditions_;
}
inline ::google::protobuf::RepeatedField<int>*
CMsgQuestObjectiveDef::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.conditions)
  return &conditions_;
}

// optional .LogicalOperation condition_logic = 14;
inline bool CMsgQuestObjectiveDef::has_condition_logic() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgQuestObjectiveDef::set_has_condition_logic() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgQuestObjectiveDef::clear_has_condition_logic() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgQuestObjectiveDef::clear_condition_logic() {
  condition_logic_ = 0;
  clear_has_condition_logic();
}
inline ::LogicalOperation CMsgQuestObjectiveDef::condition_logic() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.condition_logic)
  return static_cast< ::LogicalOperation >(condition_logic_);
}
inline void CMsgQuestObjectiveDef::set_condition_logic(::LogicalOperation value) {
  assert(::LogicalOperation_IsValid(value));
  set_has_condition_logic();
  condition_logic_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.condition_logic)
}

// repeated string item_name = 15;
inline int CMsgQuestObjectiveDef::item_name_size() const {
  return item_name_.size();
}
inline void CMsgQuestObjectiveDef::clear_item_name() {
  item_name_.Clear();
}
inline const ::std::string& CMsgQuestObjectiveDef::item_name(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.item_name)
  return item_name_.Get(index);
}
inline ::std::string* CMsgQuestObjectiveDef::mutable_item_name(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestObjectiveDef.item_name)
  return item_name_.Mutable(index);
}
inline void CMsgQuestObjectiveDef::set_item_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.item_name)
  item_name_.Mutable(index)->assign(value);
}
inline void CMsgQuestObjectiveDef::set_item_name(int index, const char* value) {
  item_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestObjectiveDef.item_name)
}
inline void CMsgQuestObjectiveDef::set_item_name(int index, const char* value, size_t size) {
  item_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestObjectiveDef.item_name)
}
inline ::std::string* CMsgQuestObjectiveDef::add_item_name() {
  return item_name_.Add();
}
inline void CMsgQuestObjectiveDef::add_item_name(const ::std::string& value) {
  item_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgQuestObjectiveDef.item_name)
}
inline void CMsgQuestObjectiveDef::add_item_name(const char* value) {
  item_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgQuestObjectiveDef.item_name)
}
inline void CMsgQuestObjectiveDef::add_item_name(const char* value, size_t size) {
  item_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgQuestObjectiveDef.item_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgQuestObjectiveDef::item_name() const {
  // @@protoc_insertion_point(field_list:CMsgQuestObjectiveDef.item_name)
  return item_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgQuestObjectiveDef::mutable_item_name() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestObjectiveDef.item_name)
  return &item_name_;
}

// optional .LogicalOperation item_logic = 16;
inline bool CMsgQuestObjectiveDef::has_item_logic() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgQuestObjectiveDef::set_has_item_logic() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgQuestObjectiveDef::clear_has_item_logic() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgQuestObjectiveDef::clear_item_logic() {
  item_logic_ = 0;
  clear_has_item_logic();
}
inline ::LogicalOperation CMsgQuestObjectiveDef::item_logic() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.item_logic)
  return static_cast< ::LogicalOperation >(item_logic_);
}
inline void CMsgQuestObjectiveDef::set_item_logic(::LogicalOperation value) {
  assert(::LogicalOperation_IsValid(value));
  set_has_item_logic();
  item_logic_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.item_logic)
}

// optional uint32 jump_state = 17;
inline bool CMsgQuestObjectiveDef::has_jump_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgQuestObjectiveDef::set_has_jump_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgQuestObjectiveDef::clear_has_jump_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgQuestObjectiveDef::clear_jump_state() {
  jump_state_ = 0u;
  clear_has_jump_state();
}
inline ::google::protobuf::uint32 CMsgQuestObjectiveDef::jump_state() const {
  // @@protoc_insertion_point(field_get:CMsgQuestObjectiveDef.jump_state)
  return jump_state_;
}
inline void CMsgQuestObjectiveDef::set_jump_state(::google::protobuf::uint32 value) {
  set_has_jump_state();
  jump_state_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestObjectiveDef.jump_state)
}

// -------------------------------------------------------------------

// CMsgQuestDef_MMCriteria

// optional string group_name = 1;
inline bool CMsgQuestDef_MMCriteria::has_group_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestDef_MMCriteria::set_has_group_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestDef_MMCriteria::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestDef_MMCriteria::clear_group_name() {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_->clear();
  }
  clear_has_group_name();
}
inline const ::std::string& CMsgQuestDef_MMCriteria::group_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.MMCriteria.group_name)
  return *group_name_;
}
inline void CMsgQuestDef_MMCriteria::set_group_name(const ::std::string& value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.MMCriteria.group_name)
}
inline void CMsgQuestDef_MMCriteria::set_group_name(const char* value) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.MMCriteria.group_name)
}
inline void CMsgQuestDef_MMCriteria::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.MMCriteria.group_name)
}
inline ::std::string* CMsgQuestDef_MMCriteria::mutable_group_name() {
  set_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.MMCriteria.group_name)
  return group_name_;
}
inline ::std::string* CMsgQuestDef_MMCriteria::release_group_name() {
  clear_has_group_name();
  if (group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_name_;
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestDef_MMCriteria::set_allocated_group_name(::std::string* group_name) {
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (group_name) {
    set_has_group_name();
    group_name_ = group_name;
  } else {
    clear_has_group_name();
    group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.MMCriteria.group_name)
}

// optional string category_name = 2;
inline bool CMsgQuestDef_MMCriteria::has_category_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestDef_MMCriteria::set_has_category_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestDef_MMCriteria::clear_has_category_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestDef_MMCriteria::clear_category_name() {
  if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_name_->clear();
  }
  clear_has_category_name();
}
inline const ::std::string& CMsgQuestDef_MMCriteria::category_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.MMCriteria.category_name)
  return *category_name_;
}
inline void CMsgQuestDef_MMCriteria::set_category_name(const ::std::string& value) {
  set_has_category_name();
  if (category_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_name_ = new ::std::string;
  }
  category_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.MMCriteria.category_name)
}
inline void CMsgQuestDef_MMCriteria::set_category_name(const char* value) {
  set_has_category_name();
  if (category_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_name_ = new ::std::string;
  }
  category_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.MMCriteria.category_name)
}
inline void CMsgQuestDef_MMCriteria::set_category_name(const char* value, size_t size) {
  set_has_category_name();
  if (category_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_name_ = new ::std::string;
  }
  category_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.MMCriteria.category_name)
}
inline ::std::string* CMsgQuestDef_MMCriteria::mutable_category_name() {
  set_has_category_name();
  if (category_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.MMCriteria.category_name)
  return category_name_;
}
inline ::std::string* CMsgQuestDef_MMCriteria::release_category_name() {
  clear_has_category_name();
  if (category_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = category_name_;
    category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestDef_MMCriteria::set_allocated_category_name(::std::string* category_name) {
  if (category_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete category_name_;
  }
  if (category_name) {
    set_has_category_name();
    category_name_ = category_name;
  } else {
    clear_has_category_name();
    category_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.MMCriteria.category_name)
}

// optional string map_name = 3;
inline bool CMsgQuestDef_MMCriteria::has_map_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuestDef_MMCriteria::set_has_map_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuestDef_MMCriteria::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuestDef_MMCriteria::clear_map_name() {
  if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_->clear();
  }
  clear_has_map_name();
}
inline const ::std::string& CMsgQuestDef_MMCriteria::map_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.MMCriteria.map_name)
  return *map_name_;
}
inline void CMsgQuestDef_MMCriteria::set_map_name(const ::std::string& value) {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.MMCriteria.map_name)
}
inline void CMsgQuestDef_MMCriteria::set_map_name(const char* value) {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.MMCriteria.map_name)
}
inline void CMsgQuestDef_MMCriteria::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.MMCriteria.map_name)
}
inline ::std::string* CMsgQuestDef_MMCriteria::mutable_map_name() {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.MMCriteria.map_name)
  return map_name_;
}
inline ::std::string* CMsgQuestDef_MMCriteria::release_map_name() {
  clear_has_map_name();
  if (map_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = map_name_;
    map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestDef_MMCriteria::set_allocated_map_name(::std::string* map_name) {
  if (map_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_name_;
  }
  if (map_name) {
    set_has_map_name();
    map_name_ = map_name;
  } else {
    clear_has_map_name();
    map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.MMCriteria.map_name)
}

// -------------------------------------------------------------------

// CMsgQuestDef_ObjectiveInstance

// optional .CMsgProtoDefID objective = 1;
inline bool CMsgQuestDef_ObjectiveInstance::has_objective() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestDef_ObjectiveInstance::set_has_objective() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestDef_ObjectiveInstance::clear_has_objective() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestDef_ObjectiveInstance::clear_objective() {
  if (objective_ != NULL) objective_->::CMsgProtoDefID::Clear();
  clear_has_objective();
}
inline const ::CMsgProtoDefID& CMsgQuestDef_ObjectiveInstance::objective() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.ObjectiveInstance.objective)
  return objective_ != NULL ? *objective_ : *default_instance_->objective_;
}
inline ::CMsgProtoDefID* CMsgQuestDef_ObjectiveInstance::mutable_objective() {
  set_has_objective();
  if (objective_ == NULL) objective_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.ObjectiveInstance.objective)
  return objective_;
}
inline ::CMsgProtoDefID* CMsgQuestDef_ObjectiveInstance::release_objective() {
  clear_has_objective();
  ::CMsgProtoDefID* temp = objective_;
  objective_ = NULL;
  return temp;
}
inline void CMsgQuestDef_ObjectiveInstance::set_allocated_objective(::CMsgProtoDefID* objective) {
  delete objective_;
  objective_ = objective;
  if (objective) {
    set_has_objective();
  } else {
    clear_has_objective();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.ObjectiveInstance.objective)
}

// optional .EQuestPoints point_type = 2;
inline bool CMsgQuestDef_ObjectiveInstance::has_point_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestDef_ObjectiveInstance::set_has_point_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestDef_ObjectiveInstance::clear_has_point_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestDef_ObjectiveInstance::clear_point_type() {
  point_type_ = 0;
  clear_has_point_type();
}
inline ::EQuestPoints CMsgQuestDef_ObjectiveInstance::point_type() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.ObjectiveInstance.point_type)
  return static_cast< ::EQuestPoints >(point_type_);
}
inline void CMsgQuestDef_ObjectiveInstance::set_point_type(::EQuestPoints value) {
  assert(::EQuestPoints_IsValid(value));
  set_has_point_type();
  point_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestDef.ObjectiveInstance.point_type)
}

// optional uint32 point_value = 3;
inline bool CMsgQuestDef_ObjectiveInstance::has_point_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuestDef_ObjectiveInstance::set_has_point_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuestDef_ObjectiveInstance::clear_has_point_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuestDef_ObjectiveInstance::clear_point_value() {
  point_value_ = 0u;
  clear_has_point_value();
}
inline ::google::protobuf::uint32 CMsgQuestDef_ObjectiveInstance::point_value() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.ObjectiveInstance.point_value)
  return point_value_;
}
inline void CMsgQuestDef_ObjectiveInstance::set_point_value(::google::protobuf::uint32 value) {
  set_has_point_value();
  point_value_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestDef.ObjectiveInstance.point_value)
}

// -------------------------------------------------------------------

// CMsgQuestDef

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestDef::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestDef::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestDef::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestDef::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgQuestDef::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestDef::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestDef::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgQuestDef::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.header)
}

// optional uint32 max_points_0 = 2;
inline bool CMsgQuestDef::has_max_points_0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestDef::set_has_max_points_0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestDef::clear_has_max_points_0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestDef::clear_max_points_0() {
  max_points_0_ = 0u;
  clear_has_max_points_0();
}
inline ::google::protobuf::uint32 CMsgQuestDef::max_points_0() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.max_points_0)
  return max_points_0_;
}
inline void CMsgQuestDef::set_max_points_0(::google::protobuf::uint32 value) {
  set_has_max_points_0();
  max_points_0_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestDef.max_points_0)
}

// optional uint32 max_points_1 = 3;
inline bool CMsgQuestDef::has_max_points_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuestDef::set_has_max_points_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuestDef::clear_has_max_points_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuestDef::clear_max_points_1() {
  max_points_1_ = 0u;
  clear_has_max_points_1();
}
inline ::google::protobuf::uint32 CMsgQuestDef::max_points_1() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.max_points_1)
  return max_points_1_;
}
inline void CMsgQuestDef::set_max_points_1(::google::protobuf::uint32 value) {
  set_has_max_points_1();
  max_points_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestDef.max_points_1)
}

// optional uint32 max_points_2 = 4;
inline bool CMsgQuestDef::has_max_points_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgQuestDef::set_has_max_points_2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgQuestDef::clear_has_max_points_2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgQuestDef::clear_max_points_2() {
  max_points_2_ = 0u;
  clear_has_max_points_2();
}
inline ::google::protobuf::uint32 CMsgQuestDef::max_points_2() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.max_points_2)
  return max_points_2_;
}
inline void CMsgQuestDef::set_max_points_2(::google::protobuf::uint32 value) {
  set_has_max_points_2();
  max_points_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestDef.max_points_2)
}

// optional string name_loctoken = 5;
inline bool CMsgQuestDef::has_name_loctoken() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgQuestDef::set_has_name_loctoken() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgQuestDef::clear_has_name_loctoken() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgQuestDef::clear_name_loctoken() {
  if (name_loctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_->clear();
  }
  clear_has_name_loctoken();
}
inline const ::std::string& CMsgQuestDef::name_loctoken() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.name_loctoken)
  return *name_loctoken_;
}
inline void CMsgQuestDef::set_name_loctoken(const ::std::string& value) {
  set_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_ = new ::std::string;
  }
  name_loctoken_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.name_loctoken)
}
inline void CMsgQuestDef::set_name_loctoken(const char* value) {
  set_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_ = new ::std::string;
  }
  name_loctoken_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.name_loctoken)
}
inline void CMsgQuestDef::set_name_loctoken(const char* value, size_t size) {
  set_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_ = new ::std::string;
  }
  name_loctoken_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.name_loctoken)
}
inline ::std::string* CMsgQuestDef::mutable_name_loctoken() {
  set_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.name_loctoken)
  return name_loctoken_;
}
inline ::std::string* CMsgQuestDef::release_name_loctoken() {
  clear_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_loctoken_;
    name_loctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestDef::set_allocated_name_loctoken(::std::string* name_loctoken) {
  if (name_loctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_loctoken_;
  }
  if (name_loctoken) {
    set_has_name_loctoken();
    name_loctoken_ = name_loctoken;
  } else {
    clear_has_name_loctoken();
    name_loctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.name_loctoken)
}

// optional string operation = 7;
inline bool CMsgQuestDef::has_operation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgQuestDef::set_has_operation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgQuestDef::clear_has_operation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgQuestDef::clear_operation() {
  if (operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_->clear();
  }
  clear_has_operation();
}
inline const ::std::string& CMsgQuestDef::operation() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.operation)
  return *operation_;
}
inline void CMsgQuestDef::set_operation(const ::std::string& value) {
  set_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_ = new ::std::string;
  }
  operation_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.operation)
}
inline void CMsgQuestDef::set_operation(const char* value) {
  set_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_ = new ::std::string;
  }
  operation_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.operation)
}
inline void CMsgQuestDef::set_operation(const char* value, size_t size) {
  set_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_ = new ::std::string;
  }
  operation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.operation)
}
inline ::std::string* CMsgQuestDef::mutable_operation() {
  set_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.operation)
  return operation_;
}
inline ::std::string* CMsgQuestDef::release_operation() {
  clear_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operation_;
    operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestDef::set_allocated_operation(::std::string* operation) {
  if (operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_;
  }
  if (operation) {
    set_has_operation();
    operation_ = operation;
  } else {
    clear_has_operation();
    operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.operation)
}

// optional .CMsgQuestDef.MMCriteria mm_criteria = 8;
inline bool CMsgQuestDef::has_mm_criteria() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgQuestDef::set_has_mm_criteria() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgQuestDef::clear_has_mm_criteria() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgQuestDef::clear_mm_criteria() {
  if (mm_criteria_ != NULL) mm_criteria_->::CMsgQuestDef_MMCriteria::Clear();
  clear_has_mm_criteria();
}
inline const ::CMsgQuestDef_MMCriteria& CMsgQuestDef::mm_criteria() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.mm_criteria)
  return mm_criteria_ != NULL ? *mm_criteria_ : *default_instance_->mm_criteria_;
}
inline ::CMsgQuestDef_MMCriteria* CMsgQuestDef::mutable_mm_criteria() {
  set_has_mm_criteria();
  if (mm_criteria_ == NULL) mm_criteria_ = new ::CMsgQuestDef_MMCriteria;
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.mm_criteria)
  return mm_criteria_;
}
inline ::CMsgQuestDef_MMCriteria* CMsgQuestDef::release_mm_criteria() {
  clear_has_mm_criteria();
  ::CMsgQuestDef_MMCriteria* temp = mm_criteria_;
  mm_criteria_ = NULL;
  return temp;
}
inline void CMsgQuestDef::set_allocated_mm_criteria(::CMsgQuestDef_MMCriteria* mm_criteria) {
  delete mm_criteria_;
  mm_criteria_ = mm_criteria;
  if (mm_criteria) {
    set_has_mm_criteria();
  } else {
    clear_has_mm_criteria();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.mm_criteria)
}

// optional string node_image = 12;
inline bool CMsgQuestDef::has_node_image() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgQuestDef::set_has_node_image() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgQuestDef::clear_has_node_image() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgQuestDef::clear_node_image() {
  if (node_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_image_->clear();
  }
  clear_has_node_image();
}
inline const ::std::string& CMsgQuestDef::node_image() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.node_image)
  return *node_image_;
}
inline void CMsgQuestDef::set_node_image(const ::std::string& value) {
  set_has_node_image();
  if (node_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_image_ = new ::std::string;
  }
  node_image_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.node_image)
}
inline void CMsgQuestDef::set_node_image(const char* value) {
  set_has_node_image();
  if (node_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_image_ = new ::std::string;
  }
  node_image_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.node_image)
}
inline void CMsgQuestDef::set_node_image(const char* value, size_t size) {
  set_has_node_image();
  if (node_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_image_ = new ::std::string;
  }
  node_image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.node_image)
}
inline ::std::string* CMsgQuestDef::mutable_node_image() {
  set_has_node_image();
  if (node_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.node_image)
  return node_image_;
}
inline ::std::string* CMsgQuestDef::release_node_image() {
  clear_has_node_image();
  if (node_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = node_image_;
    node_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestDef::set_allocated_node_image(::std::string* node_image) {
  if (node_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_image_;
  }
  if (node_image) {
    set_has_node_image();
    node_image_ = node_image;
  } else {
    clear_has_node_image();
    node_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.node_image)
}

// optional string icon_image = 13;
inline bool CMsgQuestDef::has_icon_image() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgQuestDef::set_has_icon_image() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgQuestDef::clear_has_icon_image() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgQuestDef::clear_icon_image() {
  if (icon_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_image_->clear();
  }
  clear_has_icon_image();
}
inline const ::std::string& CMsgQuestDef::icon_image() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.icon_image)
  return *icon_image_;
}
inline void CMsgQuestDef::set_icon_image(const ::std::string& value) {
  set_has_icon_image();
  if (icon_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_image_ = new ::std::string;
  }
  icon_image_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestDef.icon_image)
}
inline void CMsgQuestDef::set_icon_image(const char* value) {
  set_has_icon_image();
  if (icon_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_image_ = new ::std::string;
  }
  icon_image_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.icon_image)
}
inline void CMsgQuestDef::set_icon_image(const char* value, size_t size) {
  set_has_icon_image();
  if (icon_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_image_ = new ::std::string;
  }
  icon_image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.icon_image)
}
inline ::std::string* CMsgQuestDef::mutable_icon_image() {
  set_has_icon_image();
  if (icon_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.icon_image)
  return icon_image_;
}
inline ::std::string* CMsgQuestDef::release_icon_image() {
  clear_has_icon_image();
  if (icon_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = icon_image_;
    icon_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestDef::set_allocated_icon_image(::std::string* icon_image) {
  if (icon_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_image_;
  }
  if (icon_image) {
    set_has_icon_image();
    icon_image_ = icon_image;
  } else {
    clear_has_icon_image();
    icon_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.icon_image)
}

// optional .CMsgProtoDefID theme = 14;
inline bool CMsgQuestDef::has_theme() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgQuestDef::set_has_theme() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgQuestDef::clear_has_theme() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgQuestDef::clear_theme() {
  if (theme_ != NULL) theme_->::CMsgProtoDefID::Clear();
  clear_has_theme();
}
inline const ::CMsgProtoDefID& CMsgQuestDef::theme() const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.theme)
  return theme_ != NULL ? *theme_ : *default_instance_->theme_;
}
inline ::CMsgProtoDefID* CMsgQuestDef::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) theme_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.theme)
  return theme_;
}
inline ::CMsgProtoDefID* CMsgQuestDef::release_theme() {
  clear_has_theme();
  ::CMsgProtoDefID* temp = theme_;
  theme_ = NULL;
  return temp;
}
inline void CMsgQuestDef::set_allocated_theme(::CMsgProtoDefID* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestDef.theme)
}

// repeated string loaner_names = 15;
inline int CMsgQuestDef::loaner_names_size() const {
  return loaner_names_.size();
}
inline void CMsgQuestDef::clear_loaner_names() {
  loaner_names_.Clear();
}
inline const ::std::string& CMsgQuestDef::loaner_names(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.loaner_names)
  return loaner_names_.Get(index);
}
inline ::std::string* CMsgQuestDef::mutable_loaner_names(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.loaner_names)
  return loaner_names_.Mutable(index);
}
inline void CMsgQuestDef::set_loaner_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestDef.loaner_names)
  loaner_names_.Mutable(index)->assign(value);
}
inline void CMsgQuestDef::set_loaner_names(int index, const char* value) {
  loaner_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.loaner_names)
}
inline void CMsgQuestDef::set_loaner_names(int index, const char* value, size_t size) {
  loaner_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.loaner_names)
}
inline ::std::string* CMsgQuestDef::add_loaner_names() {
  return loaner_names_.Add();
}
inline void CMsgQuestDef::add_loaner_names(const ::std::string& value) {
  loaner_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgQuestDef.loaner_names)
}
inline void CMsgQuestDef::add_loaner_names(const char* value) {
  loaner_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgQuestDef.loaner_names)
}
inline void CMsgQuestDef::add_loaner_names(const char* value, size_t size) {
  loaner_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgQuestDef.loaner_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgQuestDef::loaner_names() const {
  // @@protoc_insertion_point(field_list:CMsgQuestDef.loaner_names)
  return loaner_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgQuestDef::mutable_loaner_names() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestDef.loaner_names)
  return &loaner_names_;
}

// repeated .CMsgQuestDef.ObjectiveInstance objectives = 16;
inline int CMsgQuestDef::objectives_size() const {
  return objectives_.size();
}
inline void CMsgQuestDef::clear_objectives() {
  objectives_.Clear();
}
inline const ::CMsgQuestDef_ObjectiveInstance& CMsgQuestDef::objectives(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.objectives)
  return objectives_.Get(index);
}
inline ::CMsgQuestDef_ObjectiveInstance* CMsgQuestDef::mutable_objectives(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.objectives)
  return objectives_.Mutable(index);
}
inline ::CMsgQuestDef_ObjectiveInstance* CMsgQuestDef::add_objectives() {
  // @@protoc_insertion_point(field_add:CMsgQuestDef.objectives)
  return objectives_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance >&
CMsgQuestDef::objectives() const {
  // @@protoc_insertion_point(field_list:CMsgQuestDef.objectives)
  return objectives_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestDef_ObjectiveInstance >*
CMsgQuestDef::mutable_objectives() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestDef.objectives)
  return &objectives_;
}

// repeated string map = 17;
inline int CMsgQuestDef::map_size() const {
  return map_.size();
}
inline void CMsgQuestDef::clear_map() {
  map_.Clear();
}
inline const ::std::string& CMsgQuestDef::map(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestDef.map)
  return map_.Get(index);
}
inline ::std::string* CMsgQuestDef::mutable_map(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestDef.map)
  return map_.Mutable(index);
}
inline void CMsgQuestDef::set_map(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgQuestDef.map)
  map_.Mutable(index)->assign(value);
}
inline void CMsgQuestDef::set_map(int index, const char* value) {
  map_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestDef.map)
}
inline void CMsgQuestDef::set_map(int index, const char* value, size_t size) {
  map_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestDef.map)
}
inline ::std::string* CMsgQuestDef::add_map() {
  return map_.Add();
}
inline void CMsgQuestDef::add_map(const ::std::string& value) {
  map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgQuestDef.map)
}
inline void CMsgQuestDef::add_map(const char* value) {
  map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgQuestDef.map)
}
inline void CMsgQuestDef::add_map(const char* value, size_t size) {
  map_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgQuestDef.map)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgQuestDef::map() const {
  // @@protoc_insertion_point(field_list:CMsgQuestDef.map)
  return map_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgQuestDef::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestDef.map)
  return &map_;
}

// -------------------------------------------------------------------

// CMsgQuestMapStoreItem

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestMapStoreItem::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestMapStoreItem::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestMapStoreItem::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestMapStoreItem::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapStoreItem::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStoreItem::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStoreItem.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStoreItem::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgQuestMapStoreItem::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStoreItem.header)
}

// optional string item_name = 2;
inline bool CMsgQuestMapStoreItem::has_item_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestMapStoreItem::set_has_item_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestMapStoreItem::clear_has_item_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestMapStoreItem::clear_item_name() {
  if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_name_->clear();
  }
  clear_has_item_name();
}
inline const ::std::string& CMsgQuestMapStoreItem::item_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.item_name)
  return *item_name_;
}
inline void CMsgQuestMapStoreItem::set_item_name(const ::std::string& value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapStoreItem.item_name)
}
inline void CMsgQuestMapStoreItem::set_item_name(const char* value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestMapStoreItem.item_name)
}
inline void CMsgQuestMapStoreItem::set_item_name(const char* value, size_t size) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestMapStoreItem.item_name)
}
inline ::std::string* CMsgQuestMapStoreItem::mutable_item_name() {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStoreItem.item_name)
  return item_name_;
}
inline ::std::string* CMsgQuestMapStoreItem::release_item_name() {
  clear_has_item_name();
  if (item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = item_name_;
    item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestMapStoreItem::set_allocated_item_name(::std::string* item_name) {
  if (item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_name_;
  }
  if (item_name) {
    set_has_item_name();
    item_name_ = item_name;
  } else {
    clear_has_item_name();
    item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStoreItem.item_name)
}

// optional string reward_lootlist_name = 6;
inline bool CMsgQuestMapStoreItem::has_reward_lootlist_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuestMapStoreItem::set_has_reward_lootlist_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuestMapStoreItem::clear_has_reward_lootlist_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuestMapStoreItem::clear_reward_lootlist_name() {
  if (reward_lootlist_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_->clear();
  }
  clear_has_reward_lootlist_name();
}
inline const ::std::string& CMsgQuestMapStoreItem::reward_lootlist_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.reward_lootlist_name)
  return *reward_lootlist_name_;
}
inline void CMsgQuestMapStoreItem::set_reward_lootlist_name(const ::std::string& value) {
  set_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_ = new ::std::string;
  }
  reward_lootlist_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapStoreItem.reward_lootlist_name)
}
inline void CMsgQuestMapStoreItem::set_reward_lootlist_name(const char* value) {
  set_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_ = new ::std::string;
  }
  reward_lootlist_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestMapStoreItem.reward_lootlist_name)
}
inline void CMsgQuestMapStoreItem::set_reward_lootlist_name(const char* value, size_t size) {
  set_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_ = new ::std::string;
  }
  reward_lootlist_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestMapStoreItem.reward_lootlist_name)
}
inline ::std::string* CMsgQuestMapStoreItem::mutable_reward_lootlist_name() {
  set_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStoreItem.reward_lootlist_name)
  return reward_lootlist_name_;
}
inline ::std::string* CMsgQuestMapStoreItem::release_reward_lootlist_name() {
  clear_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reward_lootlist_name_;
    reward_lootlist_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestMapStoreItem::set_allocated_reward_lootlist_name(::std::string* reward_lootlist_name) {
  if (reward_lootlist_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_lootlist_name_;
  }
  if (reward_lootlist_name) {
    set_has_reward_lootlist_name();
    reward_lootlist_name_ = reward_lootlist_name;
  } else {
    clear_has_reward_lootlist_name();
    reward_lootlist_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStoreItem.reward_lootlist_name)
}

// optional .CMsgVarField price = 3;
inline bool CMsgQuestMapStoreItem::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgQuestMapStoreItem::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgQuestMapStoreItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgQuestMapStoreItem::clear_price() {
  if (price_ != NULL) price_->::CMsgVarField::Clear();
  clear_has_price();
}
inline const ::CMsgVarField& CMsgQuestMapStoreItem::price() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.price)
  return price_ != NULL ? *price_ : *default_instance_->price_;
}
inline ::CMsgVarField* CMsgQuestMapStoreItem::mutable_price() {
  set_has_price();
  if (price_ == NULL) price_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStoreItem.price)
  return price_;
}
inline ::CMsgVarField* CMsgQuestMapStoreItem::release_price() {
  clear_has_price();
  ::CMsgVarField* temp = price_;
  price_ = NULL;
  return temp;
}
inline void CMsgQuestMapStoreItem::set_allocated_price(::CMsgVarField* price) {
  delete price_;
  price_ = price;
  if (price) {
    set_has_price();
  } else {
    clear_has_price();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStoreItem.price)
}

// optional uint32 purchase_limit = 4;
inline bool CMsgQuestMapStoreItem::has_purchase_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgQuestMapStoreItem::set_has_purchase_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgQuestMapStoreItem::clear_has_purchase_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgQuestMapStoreItem::clear_purchase_limit() {
  purchase_limit_ = 0u;
  clear_has_purchase_limit();
}
inline ::google::protobuf::uint32 CMsgQuestMapStoreItem::purchase_limit() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.purchase_limit)
  return purchase_limit_;
}
inline void CMsgQuestMapStoreItem::set_purchase_limit(::google::protobuf::uint32 value) {
  set_has_purchase_limit();
  purchase_limit_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapStoreItem.purchase_limit)
}

// optional uint32 sort_group = 5;
inline bool CMsgQuestMapStoreItem::has_sort_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgQuestMapStoreItem::set_has_sort_group() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgQuestMapStoreItem::clear_has_sort_group() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgQuestMapStoreItem::clear_sort_group() {
  sort_group_ = 0u;
  clear_has_sort_group();
}
inline ::google::protobuf::uint32 CMsgQuestMapStoreItem::sort_group() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStoreItem.sort_group)
  return sort_group_;
}
inline void CMsgQuestMapStoreItem::set_sort_group(::google::protobuf::uint32 value) {
  set_has_sort_group();
  sort_group_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapStoreItem.sort_group)
}

// -------------------------------------------------------------------

// CMsgQuestMapRegionDef_RegionLink

// required .CMsgProtoDefID target_region_defid = 1;
inline bool CMsgQuestMapRegionDef_RegionLink::has_target_region_defid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestMapRegionDef_RegionLink::set_has_target_region_defid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestMapRegionDef_RegionLink::clear_has_target_region_defid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestMapRegionDef_RegionLink::clear_target_region_defid() {
  if (target_region_defid_ != NULL) target_region_defid_->::CMsgProtoDefID::Clear();
  clear_has_target_region_defid();
}
inline const ::CMsgProtoDefID& CMsgQuestMapRegionDef_RegionLink::target_region_defid() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.RegionLink.target_region_defid)
  return target_region_defid_ != NULL ? *target_region_defid_ : *default_instance_->target_region_defid_;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef_RegionLink::mutable_target_region_defid() {
  set_has_target_region_defid();
  if (target_region_defid_ == NULL) target_region_defid_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.RegionLink.target_region_defid)
  return target_region_defid_;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef_RegionLink::release_target_region_defid() {
  clear_has_target_region_defid();
  ::CMsgProtoDefID* temp = target_region_defid_;
  target_region_defid_ = NULL;
  return temp;
}
inline void CMsgQuestMapRegionDef_RegionLink::set_allocated_target_region_defid(::CMsgProtoDefID* target_region_defid) {
  delete target_region_defid_;
  target_region_defid_ = target_region_defid;
  if (target_region_defid) {
    set_has_target_region_defid();
  } else {
    clear_has_target_region_defid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.RegionLink.target_region_defid)
}

// optional uint32 xpos = 2;
inline bool CMsgQuestMapRegionDef_RegionLink::has_xpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestMapRegionDef_RegionLink::set_has_xpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestMapRegionDef_RegionLink::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestMapRegionDef_RegionLink::clear_xpos() {
  xpos_ = 0u;
  clear_has_xpos();
}
inline ::google::protobuf::uint32 CMsgQuestMapRegionDef_RegionLink::xpos() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.RegionLink.xpos)
  return xpos_;
}
inline void CMsgQuestMapRegionDef_RegionLink::set_xpos(::google::protobuf::uint32 value) {
  set_has_xpos();
  xpos_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.RegionLink.xpos)
}

// optional uint32 ypos = 3;
inline bool CMsgQuestMapRegionDef_RegionLink::has_ypos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuestMapRegionDef_RegionLink::set_has_ypos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuestMapRegionDef_RegionLink::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuestMapRegionDef_RegionLink::clear_ypos() {
  ypos_ = 0u;
  clear_has_ypos();
}
inline ::google::protobuf::uint32 CMsgQuestMapRegionDef_RegionLink::ypos() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.RegionLink.ypos)
  return ypos_;
}
inline void CMsgQuestMapRegionDef_RegionLink::set_ypos(::google::protobuf::uint32 value) {
  set_has_ypos();
  ypos_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.RegionLink.ypos)
}

// -------------------------------------------------------------------

// CMsgQuestMapRegionDef

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestMapRegionDef::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestMapRegionDef::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestMapRegionDef::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestMapRegionDef::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapRegionDef::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapRegionDef::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapRegionDef::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgQuestMapRegionDef::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.header)
}

// optional string name = 2;
inline bool CMsgQuestMapRegionDef::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestMapRegionDef::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestMapRegionDef::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestMapRegionDef::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgQuestMapRegionDef::name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.name)
  return *name_;
}
inline void CMsgQuestMapRegionDef::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.name)
}
inline void CMsgQuestMapRegionDef::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestMapRegionDef.name)
}
inline void CMsgQuestMapRegionDef::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestMapRegionDef.name)
}
inline ::std::string* CMsgQuestMapRegionDef::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.name)
  return name_;
}
inline ::std::string* CMsgQuestMapRegionDef::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestMapRegionDef::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.name)
}

// optional string resfile = 3;
inline bool CMsgQuestMapRegionDef::has_resfile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuestMapRegionDef::set_has_resfile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuestMapRegionDef::clear_has_resfile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuestMapRegionDef::clear_resfile() {
  if (resfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resfile_->clear();
  }
  clear_has_resfile();
}
inline const ::std::string& CMsgQuestMapRegionDef::resfile() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.resfile)
  return *resfile_;
}
inline void CMsgQuestMapRegionDef::set_resfile(const ::std::string& value) {
  set_has_resfile();
  if (resfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resfile_ = new ::std::string;
  }
  resfile_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.resfile)
}
inline void CMsgQuestMapRegionDef::set_resfile(const char* value) {
  set_has_resfile();
  if (resfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resfile_ = new ::std::string;
  }
  resfile_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestMapRegionDef.resfile)
}
inline void CMsgQuestMapRegionDef::set_resfile(const char* value, size_t size) {
  set_has_resfile();
  if (resfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resfile_ = new ::std::string;
  }
  resfile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestMapRegionDef.resfile)
}
inline ::std::string* CMsgQuestMapRegionDef::mutable_resfile() {
  set_has_resfile();
  if (resfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resfile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.resfile)
  return resfile_;
}
inline ::std::string* CMsgQuestMapRegionDef::release_resfile() {
  clear_has_resfile();
  if (resfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resfile_;
    resfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestMapRegionDef::set_allocated_resfile(::std::string* resfile) {
  if (resfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resfile_;
  }
  if (resfile) {
    set_has_resfile();
    resfile_ = resfile;
  } else {
    clear_has_resfile();
    resfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.resfile)
}

// repeated .CMsgQuestMapRegionDef.RegionLink links = 4;
inline int CMsgQuestMapRegionDef::links_size() const {
  return links_.size();
}
inline void CMsgQuestMapRegionDef::clear_links() {
  links_.Clear();
}
inline const ::CMsgQuestMapRegionDef_RegionLink& CMsgQuestMapRegionDef::links(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.links)
  return links_.Get(index);
}
inline ::CMsgQuestMapRegionDef_RegionLink* CMsgQuestMapRegionDef::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.links)
  return links_.Mutable(index);
}
inline ::CMsgQuestMapRegionDef_RegionLink* CMsgQuestMapRegionDef::add_links() {
  // @@protoc_insertion_point(field_add:CMsgQuestMapRegionDef.links)
  return links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink >&
CMsgQuestMapRegionDef::links() const {
  // @@protoc_insertion_point(field_list:CMsgQuestMapRegionDef.links)
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapRegionDef_RegionLink >*
CMsgQuestMapRegionDef::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestMapRegionDef.links)
  return &links_;
}

// optional .CMsgProtoDefID return_link = 5;
inline bool CMsgQuestMapRegionDef::has_return_link() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgQuestMapRegionDef::set_has_return_link() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgQuestMapRegionDef::clear_has_return_link() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgQuestMapRegionDef::clear_return_link() {
  if (return_link_ != NULL) return_link_->::CMsgProtoDefID::Clear();
  clear_has_return_link();
}
inline const ::CMsgProtoDefID& CMsgQuestMapRegionDef::return_link() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.return_link)
  return return_link_ != NULL ? *return_link_ : *default_instance_->return_link_;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::mutable_return_link() {
  set_has_return_link();
  if (return_link_ == NULL) return_link_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.return_link)
  return return_link_;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::release_return_link() {
  clear_has_return_link();
  ::CMsgProtoDefID* temp = return_link_;
  return_link_ = NULL;
  return temp;
}
inline void CMsgQuestMapRegionDef::set_allocated_return_link(::CMsgProtoDefID* return_link) {
  delete return_link_;
  return_link_ = return_link;
  if (return_link) {
    set_has_return_link();
  } else {
    clear_has_return_link();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.return_link)
}

// optional float radio_freq = 6;
inline bool CMsgQuestMapRegionDef::has_radio_freq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgQuestMapRegionDef::set_has_radio_freq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgQuestMapRegionDef::clear_has_radio_freq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgQuestMapRegionDef::clear_radio_freq() {
  radio_freq_ = 0;
  clear_has_radio_freq();
}
inline float CMsgQuestMapRegionDef::radio_freq() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.radio_freq)
  return radio_freq_;
}
inline void CMsgQuestMapRegionDef::set_radio_freq(float value) {
  set_has_radio_freq();
  radio_freq_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.radio_freq)
}

// optional float zoom_scale = 7;
inline bool CMsgQuestMapRegionDef::has_zoom_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgQuestMapRegionDef::set_has_zoom_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgQuestMapRegionDef::clear_has_zoom_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgQuestMapRegionDef::clear_zoom_scale() {
  zoom_scale_ = 0;
  clear_has_zoom_scale();
}
inline float CMsgQuestMapRegionDef::zoom_scale() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.zoom_scale)
  return zoom_scale_;
}
inline void CMsgQuestMapRegionDef::set_zoom_scale(float value) {
  set_has_zoom_scale();
  zoom_scale_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapRegionDef.zoom_scale)
}

// optional .CMsgProtoDefID star_type = 8;
inline bool CMsgQuestMapRegionDef::has_star_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgQuestMapRegionDef::set_has_star_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgQuestMapRegionDef::clear_has_star_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgQuestMapRegionDef::clear_star_type() {
  if (star_type_ != NULL) star_type_->::CMsgProtoDefID::Clear();
  clear_has_star_type();
}
inline const ::CMsgProtoDefID& CMsgQuestMapRegionDef::star_type() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapRegionDef.star_type)
  return star_type_ != NULL ? *star_type_ : *default_instance_->star_type_;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::mutable_star_type() {
  set_has_star_type();
  if (star_type_ == NULL) star_type_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapRegionDef.star_type)
  return star_type_;
}
inline ::CMsgProtoDefID* CMsgQuestMapRegionDef::release_star_type() {
  clear_has_star_type();
  ::CMsgProtoDefID* temp = star_type_;
  star_type_ = NULL;
  return temp;
}
inline void CMsgQuestMapRegionDef::set_allocated_star_type(::CMsgProtoDefID* star_type) {
  delete star_type_;
  star_type_ = star_type;
  if (star_type) {
    set_has_star_type();
  } else {
    clear_has_star_type();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapRegionDef.star_type)
}

// -------------------------------------------------------------------

// CMsgVarField

// optional string variable = 1;
inline bool CMsgVarField::has_variable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgVarField::set_has_variable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgVarField::clear_has_variable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgVarField::clear_variable() {
  if (variable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variable_->clear();
  }
  clear_has_variable();
}
inline const ::std::string& CMsgVarField::variable() const {
  // @@protoc_insertion_point(field_get:CMsgVarField.variable)
  return *variable_;
}
inline void CMsgVarField::set_variable(const ::std::string& value) {
  set_has_variable();
  if (variable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variable_ = new ::std::string;
  }
  variable_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgVarField.variable)
}
inline void CMsgVarField::set_variable(const char* value) {
  set_has_variable();
  if (variable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variable_ = new ::std::string;
  }
  variable_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgVarField.variable)
}
inline void CMsgVarField::set_variable(const char* value, size_t size) {
  set_has_variable();
  if (variable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variable_ = new ::std::string;
  }
  variable_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgVarField.variable)
}
inline ::std::string* CMsgVarField::mutable_variable() {
  set_has_variable();
  if (variable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variable_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgVarField.variable)
  return variable_;
}
inline ::std::string* CMsgVarField::release_variable() {
  clear_has_variable();
  if (variable_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = variable_;
    variable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgVarField::set_allocated_variable(::std::string* variable) {
  if (variable_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete variable_;
  }
  if (variable) {
    set_has_variable();
    variable_ = variable;
  } else {
    clear_has_variable();
    variable_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgVarField.variable)
}

// optional float float = 2;
inline bool CMsgVarField::has_float_() const {
  return value_case() == kFloat;
}
inline void CMsgVarField::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void CMsgVarField::clear_float_() {
  if (has_float_()) {
    value_.float__ = 0;
    clear_has_value();
  }
}
inline float CMsgVarField::float_() const {
  if (has_float_()) {
    return value_.float__;
  }
  return 0;
}
inline void CMsgVarField::set_float_(float value) {
  if (!has_float_()) {
    clear_value();
    set_has_float_();
  }
  value_.float__ = value;
}

// optional double double = 3;
inline bool CMsgVarField::has_double_() const {
  return value_case() == kDouble;
}
inline void CMsgVarField::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void CMsgVarField::clear_double_() {
  if (has_double_()) {
    value_.double__ = 0;
    clear_has_value();
  }
}
inline double CMsgVarField::double_() const {
  if (has_double_()) {
    return value_.double__;
  }
  return 0;
}
inline void CMsgVarField::set_double_(double value) {
  if (!has_double_()) {
    clear_value();
    set_has_double_();
  }
  value_.double__ = value;
}

// optional uint32 uint32 = 4;
inline bool CMsgVarField::has_uint32() const {
  return value_case() == kUint32;
}
inline void CMsgVarField::set_has_uint32() {
  _oneof_case_[0] = kUint32;
}
inline void CMsgVarField::clear_uint32() {
  if (has_uint32()) {
    value_.uint32_ = 0u;
    clear_has_value();
  }
}
inline ::google::protobuf::uint32 CMsgVarField::uint32() const {
  if (has_uint32()) {
    return value_.uint32_;
  }
  return 0u;
}
inline void CMsgVarField::set_uint32(::google::protobuf::uint32 value) {
  if (!has_uint32()) {
    clear_value();
    set_has_uint32();
  }
  value_.uint32_ = value;
}

// optional uint64 uint64 = 5;
inline bool CMsgVarField::has_uint64() const {
  return value_case() == kUint64;
}
inline void CMsgVarField::set_has_uint64() {
  _oneof_case_[0] = kUint64;
}
inline void CMsgVarField::clear_uint64() {
  if (has_uint64()) {
    value_.uint64_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 CMsgVarField::uint64() const {
  if (has_uint64()) {
    return value_.uint64_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void CMsgVarField::set_uint64(::google::protobuf::uint64 value) {
  if (!has_uint64()) {
    clear_value();
    set_has_uint64();
  }
  value_.uint64_ = value;
}

// optional sint32 sint32 = 6;
inline bool CMsgVarField::has_sint32() const {
  return value_case() == kSint32;
}
inline void CMsgVarField::set_has_sint32() {
  _oneof_case_[0] = kSint32;
}
inline void CMsgVarField::clear_sint32() {
  if (has_sint32()) {
    value_.sint32_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 CMsgVarField::sint32() const {
  if (has_sint32()) {
    return value_.sint32_;
  }
  return 0;
}
inline void CMsgVarField::set_sint32(::google::protobuf::int32 value) {
  if (!has_sint32()) {
    clear_value();
    set_has_sint32();
  }
  value_.sint32_ = value;
}

// optional sint64 sint64 = 7;
inline bool CMsgVarField::has_sint64() const {
  return value_case() == kSint64;
}
inline void CMsgVarField::set_has_sint64() {
  _oneof_case_[0] = kSint64;
}
inline void CMsgVarField::clear_sint64() {
  if (has_sint64()) {
    value_.sint64_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 CMsgVarField::sint64() const {
  if (has_sint64()) {
    return value_.sint64_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void CMsgVarField::set_sint64(::google::protobuf::int64 value) {
  if (!has_sint64()) {
    clear_value();
    set_has_sint64();
  }
  value_.sint64_ = value;
}

// optional bool bool = 8;
inline bool CMsgVarField::has_bool_() const {
  return value_case() == kBool;
}
inline void CMsgVarField::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void CMsgVarField::clear_bool_() {
  if (has_bool_()) {
    value_.bool__ = false;
    clear_has_value();
  }
}
inline bool CMsgVarField::bool_() const {
  if (has_bool_()) {
    return value_.bool__;
  }
  return false;
}
inline void CMsgVarField::set_bool_(bool value) {
  if (!has_bool_()) {
    clear_value();
    set_has_bool_();
  }
  value_.bool__ = value;
}

// optional string string = 9;
inline bool CMsgVarField::has_string() const {
  return value_case() == kString;
}
inline void CMsgVarField::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void CMsgVarField::clear_string() {
  if (has_string()) {
    delete value_.string_;
    clear_has_value();
  }
}
inline const ::std::string& CMsgVarField::string() const {
  if (has_string()) {
    return *value_.string_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CMsgVarField::set_string(const ::std::string& value) {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_ = new ::std::string;
  }
  value_.string_->assign(value);
}
inline void CMsgVarField::set_string(const char* value) {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_ = new ::std::string;
  }
  value_.string_->assign(value);
}
inline void CMsgVarField::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_ = new ::std::string;
  }
  value_.string_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgVarField::mutable_string() {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_ = new ::std::string;
  }
  return value_.string_;
}
inline ::std::string* CMsgVarField::release_string() {
  if (has_string()) {
    clear_has_value();
    ::std::string* temp = value_.string_;
    value_.string_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgVarField::set_allocated_string(::std::string* string) {
  clear_value();
  if (string) {
    set_has_string();
    value_.string_ = string;
  }
}

inline bool CMsgVarField::has_value() {
  return value_case() != VALUE_NOT_SET;
}
inline void CMsgVarField::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline CMsgVarField::ValueCase CMsgVarField::value_case() const {
  return CMsgVarField::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgQuestMapStarType

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestMapStarType::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestMapStarType::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestMapStarType::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestMapStarType::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapStarType::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStarType.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStarType::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStarType.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapStarType::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgQuestMapStarType::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStarType.header)
}

// optional string name = 2;
inline bool CMsgQuestMapStarType::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestMapStarType::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestMapStarType::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestMapStarType::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMsgQuestMapStarType::name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapStarType.name)
  return *name_;
}
inline void CMsgQuestMapStarType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapStarType.name)
}
inline void CMsgQuestMapStarType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestMapStarType.name)
}
inline void CMsgQuestMapStarType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestMapStarType.name)
}
inline ::std::string* CMsgQuestMapStarType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapStarType.name)
  return name_;
}
inline ::std::string* CMsgQuestMapStarType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestMapStarType::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapStarType.name)
}

// -------------------------------------------------------------------

// CMsgQuestMapNodeDef

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestMapNodeDef::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestMapNodeDef::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestMapNodeDef::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgQuestMapNodeDef::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapNodeDef::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestMapNodeDef::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgQuestMapNodeDef::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.header)
}

// optional string name_loctoken = 4;
inline bool CMsgQuestMapNodeDef::has_name_loctoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_name_loctoken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestMapNodeDef::clear_has_name_loctoken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestMapNodeDef::clear_name_loctoken() {
  if (name_loctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_->clear();
  }
  clear_has_name_loctoken();
}
inline const ::std::string& CMsgQuestMapNodeDef::name_loctoken() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.name_loctoken)
  return *name_loctoken_;
}
inline void CMsgQuestMapNodeDef::set_name_loctoken(const ::std::string& value) {
  set_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_ = new ::std::string;
  }
  name_loctoken_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.name_loctoken)
}
inline void CMsgQuestMapNodeDef::set_name_loctoken(const char* value) {
  set_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_ = new ::std::string;
  }
  name_loctoken_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestMapNodeDef.name_loctoken)
}
inline void CMsgQuestMapNodeDef::set_name_loctoken(const char* value, size_t size) {
  set_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_ = new ::std::string;
  }
  name_loctoken_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestMapNodeDef.name_loctoken)
}
inline ::std::string* CMsgQuestMapNodeDef::mutable_name_loctoken() {
  set_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_loctoken_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.name_loctoken)
  return name_loctoken_;
}
inline ::std::string* CMsgQuestMapNodeDef::release_name_loctoken() {
  clear_has_name_loctoken();
  if (name_loctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_loctoken_;
    name_loctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestMapNodeDef::set_allocated_name_loctoken(::std::string* name_loctoken) {
  if (name_loctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_loctoken_;
  }
  if (name_loctoken) {
    set_has_name_loctoken();
    name_loctoken_ = name_loctoken;
  } else {
    clear_has_name_loctoken();
    name_loctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.name_loctoken)
}

// optional float x_pos = 6;
inline bool CMsgQuestMapNodeDef::has_x_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_x_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuestMapNodeDef::clear_has_x_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuestMapNodeDef::clear_x_pos() {
  x_pos_ = 0;
  clear_has_x_pos();
}
inline float CMsgQuestMapNodeDef::x_pos() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.x_pos)
  return x_pos_;
}
inline void CMsgQuestMapNodeDef::set_x_pos(float value) {
  set_has_x_pos();
  x_pos_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.x_pos)
}

// optional float y_pos = 7;
inline bool CMsgQuestMapNodeDef::has_y_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_y_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgQuestMapNodeDef::clear_has_y_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgQuestMapNodeDef::clear_y_pos() {
  y_pos_ = 0;
  clear_has_y_pos();
}
inline float CMsgQuestMapNodeDef::y_pos() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.y_pos)
  return y_pos_;
}
inline void CMsgQuestMapNodeDef::set_y_pos(float value) {
  set_has_y_pos();
  y_pos_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.y_pos)
}

// optional .CMsgQuestMapNodeCondition condition = 9;
inline bool CMsgQuestMapNodeDef::has_condition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_condition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgQuestMapNodeDef::clear_has_condition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgQuestMapNodeDef::clear_condition() {
  if (condition_ != NULL) condition_->::CMsgQuestMapNodeCondition::Clear();
  clear_has_condition();
}
inline const ::CMsgQuestMapNodeCondition& CMsgQuestMapNodeDef::condition() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.condition)
  return condition_ != NULL ? *condition_ : *default_instance_->condition_;
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeDef::mutable_condition() {
  set_has_condition();
  if (condition_ == NULL) condition_ = new ::CMsgQuestMapNodeCondition;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.condition)
  return condition_;
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeDef::release_condition() {
  clear_has_condition();
  ::CMsgQuestMapNodeCondition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline void CMsgQuestMapNodeDef::set_allocated_condition(::CMsgQuestMapNodeCondition* condition) {
  delete condition_;
  condition_ = condition;
  if (condition) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.condition)
}

// optional .CMsgProtoDefID owning_region = 10;
inline bool CMsgQuestMapNodeDef::has_owning_region() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_owning_region() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgQuestMapNodeDef::clear_has_owning_region() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgQuestMapNodeDef::clear_owning_region() {
  if (owning_region_ != NULL) owning_region_->::CMsgProtoDefID::Clear();
  clear_has_owning_region();
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeDef::owning_region() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.owning_region)
  return owning_region_ != NULL ? *owning_region_ : *default_instance_->owning_region_;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::mutable_owning_region() {
  set_has_owning_region();
  if (owning_region_ == NULL) owning_region_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.owning_region)
  return owning_region_;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::release_owning_region() {
  clear_has_owning_region();
  ::CMsgProtoDefID* temp = owning_region_;
  owning_region_ = NULL;
  return temp;
}
inline void CMsgQuestMapNodeDef::set_allocated_owning_region(::CMsgProtoDefID* owning_region) {
  delete owning_region_;
  owning_region_ = owning_region;
  if (owning_region) {
    set_has_owning_region();
  } else {
    clear_has_owning_region();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.owning_region)
}

// repeated .CMsgProtoDefID quest_options = 11;
inline int CMsgQuestMapNodeDef::quest_options_size() const {
  return quest_options_.size();
}
inline void CMsgQuestMapNodeDef::clear_quest_options() {
  quest_options_.Clear();
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeDef::quest_options(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.quest_options)
  return quest_options_.Get(index);
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::mutable_quest_options(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.quest_options)
  return quest_options_.Mutable(index);
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::add_quest_options() {
  // @@protoc_insertion_point(field_add:CMsgQuestMapNodeDef.quest_options)
  return quest_options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID >&
CMsgQuestMapNodeDef::quest_options() const {
  // @@protoc_insertion_point(field_list:CMsgQuestMapNodeDef.quest_options)
  return quest_options_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgProtoDefID >*
CMsgQuestMapNodeDef::mutable_quest_options() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestMapNodeDef.quest_options)
  return &quest_options_;
}

// optional string associated_operation = 16;
inline bool CMsgQuestMapNodeDef::has_associated_operation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_associated_operation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgQuestMapNodeDef::clear_has_associated_operation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgQuestMapNodeDef::clear_associated_operation() {
  if (associated_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    associated_operation_->clear();
  }
  clear_has_associated_operation();
}
inline const ::std::string& CMsgQuestMapNodeDef::associated_operation() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.associated_operation)
  return *associated_operation_;
}
inline void CMsgQuestMapNodeDef::set_associated_operation(const ::std::string& value) {
  set_has_associated_operation();
  if (associated_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    associated_operation_ = new ::std::string;
  }
  associated_operation_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.associated_operation)
}
inline void CMsgQuestMapNodeDef::set_associated_operation(const char* value) {
  set_has_associated_operation();
  if (associated_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    associated_operation_ = new ::std::string;
  }
  associated_operation_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestMapNodeDef.associated_operation)
}
inline void CMsgQuestMapNodeDef::set_associated_operation(const char* value, size_t size) {
  set_has_associated_operation();
  if (associated_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    associated_operation_ = new ::std::string;
  }
  associated_operation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestMapNodeDef.associated_operation)
}
inline ::std::string* CMsgQuestMapNodeDef::mutable_associated_operation() {
  set_has_associated_operation();
  if (associated_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    associated_operation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.associated_operation)
  return associated_operation_;
}
inline ::std::string* CMsgQuestMapNodeDef::release_associated_operation() {
  clear_has_associated_operation();
  if (associated_operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = associated_operation_;
    associated_operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestMapNodeDef::set_allocated_associated_operation(::std::string* associated_operation) {
  if (associated_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete associated_operation_;
  }
  if (associated_operation) {
    set_has_associated_operation();
    associated_operation_ = associated_operation;
  } else {
    clear_has_associated_operation();
    associated_operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.associated_operation)
}

// optional string reward_item_name = 18;
inline bool CMsgQuestMapNodeDef::has_reward_item_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_reward_item_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgQuestMapNodeDef::clear_has_reward_item_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgQuestMapNodeDef::clear_reward_item_name() {
  if (reward_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_item_name_->clear();
  }
  clear_has_reward_item_name();
}
inline const ::std::string& CMsgQuestMapNodeDef::reward_item_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.reward_item_name)
  return *reward_item_name_;
}
inline void CMsgQuestMapNodeDef::set_reward_item_name(const ::std::string& value) {
  set_has_reward_item_name();
  if (reward_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_item_name_ = new ::std::string;
  }
  reward_item_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.reward_item_name)
}
inline void CMsgQuestMapNodeDef::set_reward_item_name(const char* value) {
  set_has_reward_item_name();
  if (reward_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_item_name_ = new ::std::string;
  }
  reward_item_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestMapNodeDef.reward_item_name)
}
inline void CMsgQuestMapNodeDef::set_reward_item_name(const char* value, size_t size) {
  set_has_reward_item_name();
  if (reward_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_item_name_ = new ::std::string;
  }
  reward_item_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestMapNodeDef.reward_item_name)
}
inline ::std::string* CMsgQuestMapNodeDef::mutable_reward_item_name() {
  set_has_reward_item_name();
  if (reward_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_item_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.reward_item_name)
  return reward_item_name_;
}
inline ::std::string* CMsgQuestMapNodeDef::release_reward_item_name() {
  clear_has_reward_item_name();
  if (reward_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reward_item_name_;
    reward_item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestMapNodeDef::set_allocated_reward_item_name(::std::string* reward_item_name) {
  if (reward_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_item_name_;
  }
  if (reward_item_name) {
    set_has_reward_item_name();
    reward_item_name_ = reward_item_name;
  } else {
    clear_has_reward_item_name();
    reward_item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.reward_item_name)
}

// optional string reward_lootlist_name = 22;
inline bool CMsgQuestMapNodeDef::has_reward_lootlist_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_reward_lootlist_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgQuestMapNodeDef::clear_has_reward_lootlist_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgQuestMapNodeDef::clear_reward_lootlist_name() {
  if (reward_lootlist_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_->clear();
  }
  clear_has_reward_lootlist_name();
}
inline const ::std::string& CMsgQuestMapNodeDef::reward_lootlist_name() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.reward_lootlist_name)
  return *reward_lootlist_name_;
}
inline void CMsgQuestMapNodeDef::set_reward_lootlist_name(const ::std::string& value) {
  set_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_ = new ::std::string;
  }
  reward_lootlist_name_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.reward_lootlist_name)
}
inline void CMsgQuestMapNodeDef::set_reward_lootlist_name(const char* value) {
  set_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_ = new ::std::string;
  }
  reward_lootlist_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestMapNodeDef.reward_lootlist_name)
}
inline void CMsgQuestMapNodeDef::set_reward_lootlist_name(const char* value, size_t size) {
  set_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_ = new ::std::string;
  }
  reward_lootlist_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestMapNodeDef.reward_lootlist_name)
}
inline ::std::string* CMsgQuestMapNodeDef::mutable_reward_lootlist_name() {
  set_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_lootlist_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.reward_lootlist_name)
  return reward_lootlist_name_;
}
inline ::std::string* CMsgQuestMapNodeDef::release_reward_lootlist_name() {
  clear_has_reward_lootlist_name();
  if (reward_lootlist_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reward_lootlist_name_;
    reward_lootlist_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestMapNodeDef::set_allocated_reward_lootlist_name(::std::string* reward_lootlist_name) {
  if (reward_lootlist_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_lootlist_name_;
  }
  if (reward_lootlist_name) {
    set_has_reward_lootlist_name();
    reward_lootlist_name_ = reward_lootlist_name;
  } else {
    clear_has_reward_lootlist_name();
    reward_lootlist_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.reward_lootlist_name)
}

// optional .ENodeCashReward cash_reward = 19;
inline bool CMsgQuestMapNodeDef::has_cash_reward() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_cash_reward() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgQuestMapNodeDef::clear_has_cash_reward() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgQuestMapNodeDef::clear_cash_reward() {
  cash_reward_ = 1;
  clear_has_cash_reward();
}
inline ::ENodeCashReward CMsgQuestMapNodeDef::cash_reward() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.cash_reward)
  return static_cast< ::ENodeCashReward >(cash_reward_);
}
inline void CMsgQuestMapNodeDef::set_cash_reward(::ENodeCashReward value) {
  assert(::ENodeCashReward_IsValid(value));
  set_has_cash_reward();
  cash_reward_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.cash_reward)
}

// optional .CMsgProtoDefID star_type = 20;
inline bool CMsgQuestMapNodeDef::has_star_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_star_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgQuestMapNodeDef::clear_has_star_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgQuestMapNodeDef::clear_star_type() {
  if (star_type_ != NULL) star_type_->::CMsgProtoDefID::Clear();
  clear_has_star_type();
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeDef::star_type() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.star_type)
  return star_type_ != NULL ? *star_type_ : *default_instance_->star_type_;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::mutable_star_type() {
  set_has_star_type();
  if (star_type_ == NULL) star_type_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeDef.star_type)
  return star_type_;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeDef::release_star_type() {
  clear_has_star_type();
  ::CMsgProtoDefID* temp = star_type_;
  star_type_ = NULL;
  return temp;
}
inline void CMsgQuestMapNodeDef::set_allocated_star_type(::CMsgProtoDefID* star_type) {
  delete star_type_;
  star_type_ = star_type;
  if (star_type) {
    set_has_star_type();
  } else {
    clear_has_star_type();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeDef.star_type)
}

// optional uint32 stars_to_unlock = 21 [default = 1];
inline bool CMsgQuestMapNodeDef::has_stars_to_unlock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgQuestMapNodeDef::set_has_stars_to_unlock() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgQuestMapNodeDef::clear_has_stars_to_unlock() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgQuestMapNodeDef::clear_stars_to_unlock() {
  stars_to_unlock_ = 1u;
  clear_has_stars_to_unlock();
}
inline ::google::protobuf::uint32 CMsgQuestMapNodeDef::stars_to_unlock() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeDef.stars_to_unlock)
  return stars_to_unlock_;
}
inline void CMsgQuestMapNodeDef::set_stars_to_unlock(::google::protobuf::uint32 value) {
  set_has_stars_to_unlock();
  stars_to_unlock_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeDef.stars_to_unlock)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Variables

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgPaintKit_Variables::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Variables::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_Variables::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_Variables::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_Variables::header() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Variables.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Variables::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Variables.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Variables::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Variables::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Variables.header)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_TextureStage

// optional .CMsgVarField texture = 1;
inline bool CMsgPaintKit_Operation_TextureStage::has_texture() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_texture() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_texture() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_texture() {
  if (texture_ != NULL) texture_->::CMsgVarField::Clear();
  clear_has_texture();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::texture() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.texture)
  return texture_ != NULL ? *texture_ : *default_instance_->texture_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_texture() {
  set_has_texture();
  if (texture_ == NULL) texture_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.texture)
  return texture_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_texture() {
  clear_has_texture();
  ::CMsgVarField* temp = texture_;
  texture_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_texture(::CMsgVarField* texture) {
  delete texture_;
  texture_ = texture;
  if (texture) {
    set_has_texture();
  } else {
    clear_has_texture();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.texture)
}

// optional .CMsgVarField texture_red = 2;
inline bool CMsgPaintKit_Operation_TextureStage::has_texture_red() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_texture_red() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_texture_red() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_texture_red() {
  if (texture_red_ != NULL) texture_red_->::CMsgVarField::Clear();
  clear_has_texture_red();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::texture_red() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.texture_red)
  return texture_red_ != NULL ? *texture_red_ : *default_instance_->texture_red_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_texture_red() {
  set_has_texture_red();
  if (texture_red_ == NULL) texture_red_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.texture_red)
  return texture_red_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_texture_red() {
  clear_has_texture_red();
  ::CMsgVarField* temp = texture_red_;
  texture_red_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_texture_red(::CMsgVarField* texture_red) {
  delete texture_red_;
  texture_red_ = texture_red;
  if (texture_red) {
    set_has_texture_red();
  } else {
    clear_has_texture_red();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.texture_red)
}

// optional .CMsgVarField texture_blue = 3;
inline bool CMsgPaintKit_Operation_TextureStage::has_texture_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_texture_blue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_texture_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_texture_blue() {
  if (texture_blue_ != NULL) texture_blue_->::CMsgVarField::Clear();
  clear_has_texture_blue();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::texture_blue() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.texture_blue)
  return texture_blue_ != NULL ? *texture_blue_ : *default_instance_->texture_blue_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_texture_blue() {
  set_has_texture_blue();
  if (texture_blue_ == NULL) texture_blue_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.texture_blue)
  return texture_blue_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_texture_blue() {
  clear_has_texture_blue();
  ::CMsgVarField* temp = texture_blue_;
  texture_blue_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_texture_blue(::CMsgVarField* texture_blue) {
  delete texture_blue_;
  texture_blue_ = texture_blue;
  if (texture_blue) {
    set_has_texture_blue();
  } else {
    clear_has_texture_blue();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.texture_blue)
}

// optional .CMsgVarField adjust_black = 4;
inline bool CMsgPaintKit_Operation_TextureStage::has_adjust_black() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_adjust_black() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_adjust_black() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_adjust_black() {
  if (adjust_black_ != NULL) adjust_black_->::CMsgVarField::Clear();
  clear_has_adjust_black();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::adjust_black() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.adjust_black)
  return adjust_black_ != NULL ? *adjust_black_ : *default_instance_->adjust_black_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_adjust_black() {
  set_has_adjust_black();
  if (adjust_black_ == NULL) adjust_black_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.adjust_black)
  return adjust_black_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_adjust_black() {
  clear_has_adjust_black();
  ::CMsgVarField* temp = adjust_black_;
  adjust_black_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_adjust_black(::CMsgVarField* adjust_black) {
  delete adjust_black_;
  adjust_black_ = adjust_black;
  if (adjust_black) {
    set_has_adjust_black();
  } else {
    clear_has_adjust_black();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.adjust_black)
}

// optional .CMsgVarField adjust_offset = 5;
inline bool CMsgPaintKit_Operation_TextureStage::has_adjust_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_adjust_offset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_adjust_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_adjust_offset() {
  if (adjust_offset_ != NULL) adjust_offset_->::CMsgVarField::Clear();
  clear_has_adjust_offset();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::adjust_offset() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.adjust_offset)
  return adjust_offset_ != NULL ? *adjust_offset_ : *default_instance_->adjust_offset_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_adjust_offset() {
  set_has_adjust_offset();
  if (adjust_offset_ == NULL) adjust_offset_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.adjust_offset)
  return adjust_offset_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_adjust_offset() {
  clear_has_adjust_offset();
  ::CMsgVarField* temp = adjust_offset_;
  adjust_offset_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_adjust_offset(::CMsgVarField* adjust_offset) {
  delete adjust_offset_;
  adjust_offset_ = adjust_offset;
  if (adjust_offset) {
    set_has_adjust_offset();
  } else {
    clear_has_adjust_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.adjust_offset)
}

// optional .CMsgVarField adjust_gamma = 6;
inline bool CMsgPaintKit_Operation_TextureStage::has_adjust_gamma() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_adjust_gamma() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_adjust_gamma() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_adjust_gamma() {
  if (adjust_gamma_ != NULL) adjust_gamma_->::CMsgVarField::Clear();
  clear_has_adjust_gamma();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::adjust_gamma() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.adjust_gamma)
  return adjust_gamma_ != NULL ? *adjust_gamma_ : *default_instance_->adjust_gamma_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_adjust_gamma() {
  set_has_adjust_gamma();
  if (adjust_gamma_ == NULL) adjust_gamma_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.adjust_gamma)
  return adjust_gamma_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_adjust_gamma() {
  clear_has_adjust_gamma();
  ::CMsgVarField* temp = adjust_gamma_;
  adjust_gamma_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma) {
  delete adjust_gamma_;
  adjust_gamma_ = adjust_gamma;
  if (adjust_gamma) {
    set_has_adjust_gamma();
  } else {
    clear_has_adjust_gamma();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.adjust_gamma)
}

// optional .CMsgVarField rotation = 7;
inline bool CMsgPaintKit_Operation_TextureStage::has_rotation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_rotation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_rotation() {
  if (rotation_ != NULL) rotation_->::CMsgVarField::Clear();
  clear_has_rotation();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::rotation() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.rotation)
  return rotation_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_rotation() {
  clear_has_rotation();
  ::CMsgVarField* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_rotation(::CMsgVarField* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.rotation)
}

// optional .CMsgVarField translate_u = 8;
inline bool CMsgPaintKit_Operation_TextureStage::has_translate_u() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_translate_u() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_translate_u() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_translate_u() {
  if (translate_u_ != NULL) translate_u_->::CMsgVarField::Clear();
  clear_has_translate_u();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::translate_u() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.translate_u)
  return translate_u_ != NULL ? *translate_u_ : *default_instance_->translate_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_translate_u() {
  set_has_translate_u();
  if (translate_u_ == NULL) translate_u_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.translate_u)
  return translate_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_translate_u() {
  clear_has_translate_u();
  ::CMsgVarField* temp = translate_u_;
  translate_u_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_translate_u(::CMsgVarField* translate_u) {
  delete translate_u_;
  translate_u_ = translate_u;
  if (translate_u) {
    set_has_translate_u();
  } else {
    clear_has_translate_u();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.translate_u)
}

// optional .CMsgVarField translate_v = 9;
inline bool CMsgPaintKit_Operation_TextureStage::has_translate_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_translate_v() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_translate_v() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_translate_v() {
  if (translate_v_ != NULL) translate_v_->::CMsgVarField::Clear();
  clear_has_translate_v();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::translate_v() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.translate_v)
  return translate_v_ != NULL ? *translate_v_ : *default_instance_->translate_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_translate_v() {
  set_has_translate_v();
  if (translate_v_ == NULL) translate_v_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.translate_v)
  return translate_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_translate_v() {
  clear_has_translate_v();
  ::CMsgVarField* temp = translate_v_;
  translate_v_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_translate_v(::CMsgVarField* translate_v) {
  delete translate_v_;
  translate_v_ = translate_v;
  if (translate_v) {
    set_has_translate_v();
  } else {
    clear_has_translate_v();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.translate_v)
}

// optional .CMsgVarField scale_uv = 10;
inline bool CMsgPaintKit_Operation_TextureStage::has_scale_uv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_scale_uv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_scale_uv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_scale_uv() {
  if (scale_uv_ != NULL) scale_uv_->::CMsgVarField::Clear();
  clear_has_scale_uv();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::scale_uv() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.scale_uv)
  return scale_uv_ != NULL ? *scale_uv_ : *default_instance_->scale_uv_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_scale_uv() {
  set_has_scale_uv();
  if (scale_uv_ == NULL) scale_uv_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.scale_uv)
  return scale_uv_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_scale_uv() {
  clear_has_scale_uv();
  ::CMsgVarField* temp = scale_uv_;
  scale_uv_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_scale_uv(::CMsgVarField* scale_uv) {
  delete scale_uv_;
  scale_uv_ = scale_uv;
  if (scale_uv) {
    set_has_scale_uv();
  } else {
    clear_has_scale_uv();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.scale_uv)
}

// optional .CMsgVarField flip_u = 11;
inline bool CMsgPaintKit_Operation_TextureStage::has_flip_u() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_flip_u() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_flip_u() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_flip_u() {
  if (flip_u_ != NULL) flip_u_->::CMsgVarField::Clear();
  clear_has_flip_u();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::flip_u() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.flip_u)
  return flip_u_ != NULL ? *flip_u_ : *default_instance_->flip_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_flip_u() {
  set_has_flip_u();
  if (flip_u_ == NULL) flip_u_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.flip_u)
  return flip_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_flip_u() {
  clear_has_flip_u();
  ::CMsgVarField* temp = flip_u_;
  flip_u_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_flip_u(::CMsgVarField* flip_u) {
  delete flip_u_;
  flip_u_ = flip_u;
  if (flip_u) {
    set_has_flip_u();
  } else {
    clear_has_flip_u();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.flip_u)
}

// optional .CMsgVarField flip_v = 12;
inline bool CMsgPaintKit_Operation_TextureStage::has_flip_v() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgPaintKit_Operation_TextureStage::set_has_flip_v() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_has_flip_v() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgPaintKit_Operation_TextureStage::clear_flip_v() {
  if (flip_v_ != NULL) flip_v_->::CMsgVarField::Clear();
  clear_has_flip_v();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_TextureStage::flip_v() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_TextureStage.flip_v)
  return flip_v_ != NULL ? *flip_v_ : *default_instance_->flip_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::mutable_flip_v() {
  set_has_flip_v();
  if (flip_v_ == NULL) flip_v_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_TextureStage.flip_v)
  return flip_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_TextureStage::release_flip_v() {
  clear_has_flip_v();
  ::CMsgVarField* temp = flip_v_;
  flip_v_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_TextureStage::set_allocated_flip_v(::CMsgVarField* flip_v) {
  delete flip_v_;
  flip_v_ = flip_v;
  if (flip_v) {
    set_has_flip_v();
  } else {
    clear_has_flip_v();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_TextureStage.flip_v)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_CombineStage

// optional .CMsgVarField adjust_black = 1;
inline bool CMsgPaintKit_Operation_CombineStage::has_adjust_black() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Operation_CombineStage::set_has_adjust_black() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_has_adjust_black() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_adjust_black() {
  if (adjust_black_ != NULL) adjust_black_->::CMsgVarField::Clear();
  clear_has_adjust_black();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::adjust_black() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.adjust_black)
  return adjust_black_ != NULL ? *adjust_black_ : *default_instance_->adjust_black_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_adjust_black() {
  set_has_adjust_black();
  if (adjust_black_ == NULL) adjust_black_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.adjust_black)
  return adjust_black_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_adjust_black() {
  clear_has_adjust_black();
  ::CMsgVarField* temp = adjust_black_;
  adjust_black_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_adjust_black(::CMsgVarField* adjust_black) {
  delete adjust_black_;
  adjust_black_ = adjust_black;
  if (adjust_black) {
    set_has_adjust_black();
  } else {
    clear_has_adjust_black();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.adjust_black)
}

// optional .CMsgVarField adjust_offset = 2;
inline bool CMsgPaintKit_Operation_CombineStage::has_adjust_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPaintKit_Operation_CombineStage::set_has_adjust_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_has_adjust_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_adjust_offset() {
  if (adjust_offset_ != NULL) adjust_offset_->::CMsgVarField::Clear();
  clear_has_adjust_offset();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::adjust_offset() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.adjust_offset)
  return adjust_offset_ != NULL ? *adjust_offset_ : *default_instance_->adjust_offset_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_adjust_offset() {
  set_has_adjust_offset();
  if (adjust_offset_ == NULL) adjust_offset_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.adjust_offset)
  return adjust_offset_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_adjust_offset() {
  clear_has_adjust_offset();
  ::CMsgVarField* temp = adjust_offset_;
  adjust_offset_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_adjust_offset(::CMsgVarField* adjust_offset) {
  delete adjust_offset_;
  adjust_offset_ = adjust_offset;
  if (adjust_offset) {
    set_has_adjust_offset();
  } else {
    clear_has_adjust_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.adjust_offset)
}

// optional .CMsgVarField adjust_gamma = 3;
inline bool CMsgPaintKit_Operation_CombineStage::has_adjust_gamma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPaintKit_Operation_CombineStage::set_has_adjust_gamma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_has_adjust_gamma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_adjust_gamma() {
  if (adjust_gamma_ != NULL) adjust_gamma_->::CMsgVarField::Clear();
  clear_has_adjust_gamma();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::adjust_gamma() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.adjust_gamma)
  return adjust_gamma_ != NULL ? *adjust_gamma_ : *default_instance_->adjust_gamma_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_adjust_gamma() {
  set_has_adjust_gamma();
  if (adjust_gamma_ == NULL) adjust_gamma_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.adjust_gamma)
  return adjust_gamma_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_adjust_gamma() {
  clear_has_adjust_gamma();
  ::CMsgVarField* temp = adjust_gamma_;
  adjust_gamma_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma) {
  delete adjust_gamma_;
  adjust_gamma_ = adjust_gamma;
  if (adjust_gamma) {
    set_has_adjust_gamma();
  } else {
    clear_has_adjust_gamma();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.adjust_gamma)
}

// optional .CMsgVarField rotation = 4;
inline bool CMsgPaintKit_Operation_CombineStage::has_rotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPaintKit_Operation_CombineStage::set_has_rotation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_rotation() {
  if (rotation_ != NULL) rotation_->::CMsgVarField::Clear();
  clear_has_rotation();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::rotation() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.rotation)
  return rotation_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_rotation() {
  clear_has_rotation();
  ::CMsgVarField* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_rotation(::CMsgVarField* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.rotation)
}

// optional .CMsgVarField translate_u = 5;
inline bool CMsgPaintKit_Operation_CombineStage::has_translate_u() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPaintKit_Operation_CombineStage::set_has_translate_u() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_has_translate_u() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_translate_u() {
  if (translate_u_ != NULL) translate_u_->::CMsgVarField::Clear();
  clear_has_translate_u();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::translate_u() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.translate_u)
  return translate_u_ != NULL ? *translate_u_ : *default_instance_->translate_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_translate_u() {
  set_has_translate_u();
  if (translate_u_ == NULL) translate_u_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.translate_u)
  return translate_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_translate_u() {
  clear_has_translate_u();
  ::CMsgVarField* temp = translate_u_;
  translate_u_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_translate_u(::CMsgVarField* translate_u) {
  delete translate_u_;
  translate_u_ = translate_u;
  if (translate_u) {
    set_has_translate_u();
  } else {
    clear_has_translate_u();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.translate_u)
}

// optional .CMsgVarField translate_v = 6;
inline bool CMsgPaintKit_Operation_CombineStage::has_translate_v() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPaintKit_Operation_CombineStage::set_has_translate_v() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_has_translate_v() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_translate_v() {
  if (translate_v_ != NULL) translate_v_->::CMsgVarField::Clear();
  clear_has_translate_v();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::translate_v() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.translate_v)
  return translate_v_ != NULL ? *translate_v_ : *default_instance_->translate_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_translate_v() {
  set_has_translate_v();
  if (translate_v_ == NULL) translate_v_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.translate_v)
  return translate_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_translate_v() {
  clear_has_translate_v();
  ::CMsgVarField* temp = translate_v_;
  translate_v_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_translate_v(::CMsgVarField* translate_v) {
  delete translate_v_;
  translate_v_ = translate_v;
  if (translate_v) {
    set_has_translate_v();
  } else {
    clear_has_translate_v();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.translate_v)
}

// optional .CMsgVarField scale_uv = 7;
inline bool CMsgPaintKit_Operation_CombineStage::has_scale_uv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPaintKit_Operation_CombineStage::set_has_scale_uv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_has_scale_uv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_scale_uv() {
  if (scale_uv_ != NULL) scale_uv_->::CMsgVarField::Clear();
  clear_has_scale_uv();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::scale_uv() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.scale_uv)
  return scale_uv_ != NULL ? *scale_uv_ : *default_instance_->scale_uv_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_scale_uv() {
  set_has_scale_uv();
  if (scale_uv_ == NULL) scale_uv_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.scale_uv)
  return scale_uv_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_scale_uv() {
  clear_has_scale_uv();
  ::CMsgVarField* temp = scale_uv_;
  scale_uv_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_scale_uv(::CMsgVarField* scale_uv) {
  delete scale_uv_;
  scale_uv_ = scale_uv;
  if (scale_uv) {
    set_has_scale_uv();
  } else {
    clear_has_scale_uv();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.scale_uv)
}

// optional .CMsgVarField flip_u = 8;
inline bool CMsgPaintKit_Operation_CombineStage::has_flip_u() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgPaintKit_Operation_CombineStage::set_has_flip_u() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_has_flip_u() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_flip_u() {
  if (flip_u_ != NULL) flip_u_->::CMsgVarField::Clear();
  clear_has_flip_u();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::flip_u() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.flip_u)
  return flip_u_ != NULL ? *flip_u_ : *default_instance_->flip_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_flip_u() {
  set_has_flip_u();
  if (flip_u_ == NULL) flip_u_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.flip_u)
  return flip_u_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_flip_u() {
  clear_has_flip_u();
  ::CMsgVarField* temp = flip_u_;
  flip_u_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_flip_u(::CMsgVarField* flip_u) {
  delete flip_u_;
  flip_u_ = flip_u;
  if (flip_u) {
    set_has_flip_u();
  } else {
    clear_has_flip_u();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.flip_u)
}

// optional .CMsgVarField flip_v = 9;
inline bool CMsgPaintKit_Operation_CombineStage::has_flip_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgPaintKit_Operation_CombineStage::set_has_flip_v() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_has_flip_v() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgPaintKit_Operation_CombineStage::clear_flip_v() {
  if (flip_v_ != NULL) flip_v_->::CMsgVarField::Clear();
  clear_has_flip_v();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_CombineStage::flip_v() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.flip_v)
  return flip_v_ != NULL ? *flip_v_ : *default_instance_->flip_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::mutable_flip_v() {
  set_has_flip_v();
  if (flip_v_ == NULL) flip_v_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.flip_v)
  return flip_v_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_CombineStage::release_flip_v() {
  clear_has_flip_v();
  ::CMsgVarField* temp = flip_v_;
  flip_v_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_CombineStage::set_allocated_flip_v(::CMsgVarField* flip_v) {
  delete flip_v_;
  flip_v_ = flip_v;
  if (flip_v) {
    set_has_flip_v();
  } else {
    clear_has_flip_v();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_CombineStage.flip_v)
}

// repeated .CMsgPaintKit_OperationNode operation_node = 11;
inline int CMsgPaintKit_Operation_CombineStage::operation_node_size() const {
  return operation_node_.size();
}
inline void CMsgPaintKit_Operation_CombineStage::clear_operation_node() {
  operation_node_.Clear();
}
inline const ::CMsgPaintKit_OperationNode& CMsgPaintKit_Operation_CombineStage::operation_node(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_CombineStage.operation_node)
  return operation_node_.Get(index);
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_CombineStage::mutable_operation_node(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_CombineStage.operation_node)
  return operation_node_.Mutable(index);
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_CombineStage::add_operation_node() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation_CombineStage.operation_node)
  return operation_node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
CMsgPaintKit_Operation_CombineStage::operation_node() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation_CombineStage.operation_node)
  return operation_node_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
CMsgPaintKit_Operation_CombineStage::mutable_operation_node() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation_CombineStage.operation_node)
  return &operation_node_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_SelectStage

// optional .CMsgVarField groups = 1;
inline bool CMsgPaintKit_Operation_SelectStage::has_groups() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Operation_SelectStage::set_has_groups() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_Operation_SelectStage::clear_has_groups() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_Operation_SelectStage::clear_groups() {
  if (groups_ != NULL) groups_->::CMsgVarField::Clear();
  clear_has_groups();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_SelectStage::groups() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_SelectStage.groups)
  return groups_ != NULL ? *groups_ : *default_instance_->groups_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::mutable_groups() {
  set_has_groups();
  if (groups_ == NULL) groups_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_SelectStage.groups)
  return groups_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::release_groups() {
  clear_has_groups();
  ::CMsgVarField* temp = groups_;
  groups_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_SelectStage::set_allocated_groups(::CMsgVarField* groups) {
  delete groups_;
  groups_ = groups;
  if (groups) {
    set_has_groups();
  } else {
    clear_has_groups();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_SelectStage.groups)
}

// repeated .CMsgVarField select = 2;
inline int CMsgPaintKit_Operation_SelectStage::select_size() const {
  return select_.size();
}
inline void CMsgPaintKit_Operation_SelectStage::clear_select() {
  select_.Clear();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_SelectStage::select(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_SelectStage.select)
  return select_.Get(index);
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::mutable_select(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_SelectStage.select)
  return select_.Mutable(index);
}
inline ::CMsgVarField* CMsgPaintKit_Operation_SelectStage::add_select() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation_SelectStage.select)
  return select_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
CMsgPaintKit_Operation_SelectStage::select() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation_SelectStage.select)
  return select_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
CMsgPaintKit_Operation_SelectStage::mutable_select() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation_SelectStage.select)
  return &select_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_Sticker

// optional .CMsgVarField base = 1;
inline bool CMsgPaintKit_Operation_Sticker::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Operation_Sticker::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_Operation_Sticker::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_Operation_Sticker::clear_base() {
  if (base_ != NULL) base_->::CMsgVarField::Clear();
  clear_has_base();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_Sticker::base() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_Sticker.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_Sticker.base)
  return base_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::release_base() {
  clear_has_base();
  ::CMsgVarField* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_Sticker::set_allocated_base(::CMsgVarField* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_Sticker.base)
}

// optional .CMsgVarField weight = 2;
inline bool CMsgPaintKit_Operation_Sticker::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPaintKit_Operation_Sticker::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPaintKit_Operation_Sticker::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPaintKit_Operation_Sticker::clear_weight() {
  if (weight_ != NULL) weight_->::CMsgVarField::Clear();
  clear_has_weight();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_Sticker::weight() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_Sticker.weight)
  return weight_ != NULL ? *weight_ : *default_instance_->weight_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::mutable_weight() {
  set_has_weight();
  if (weight_ == NULL) weight_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_Sticker.weight)
  return weight_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::release_weight() {
  clear_has_weight();
  ::CMsgVarField* temp = weight_;
  weight_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_Sticker::set_allocated_weight(::CMsgVarField* weight) {
  delete weight_;
  weight_ = weight;
  if (weight) {
    set_has_weight();
  } else {
    clear_has_weight();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_Sticker.weight)
}

// optional .CMsgVarField spec = 3;
inline bool CMsgPaintKit_Operation_Sticker::has_spec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPaintKit_Operation_Sticker::set_has_spec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPaintKit_Operation_Sticker::clear_has_spec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPaintKit_Operation_Sticker::clear_spec() {
  if (spec_ != NULL) spec_->::CMsgVarField::Clear();
  clear_has_spec();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_Sticker::spec() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_Sticker.spec)
  return spec_ != NULL ? *spec_ : *default_instance_->spec_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::mutable_spec() {
  set_has_spec();
  if (spec_ == NULL) spec_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_Sticker.spec)
  return spec_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_Sticker::release_spec() {
  clear_has_spec();
  ::CMsgVarField* temp = spec_;
  spec_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_Sticker::set_allocated_spec(::CMsgVarField* spec) {
  delete spec_;
  spec_ = spec;
  if (spec) {
    set_has_spec();
  } else {
    clear_has_spec();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_Sticker.spec)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Operation_StickerStage

// repeated .CMsgPaintKit_Operation_Sticker sticker = 1;
inline int CMsgPaintKit_Operation_StickerStage::sticker_size() const {
  return sticker_.size();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_sticker() {
  sticker_.Clear();
}
inline const ::CMsgPaintKit_Operation_Sticker& CMsgPaintKit_Operation_StickerStage::sticker(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.sticker)
  return sticker_.Get(index);
}
inline ::CMsgPaintKit_Operation_Sticker* CMsgPaintKit_Operation_StickerStage::mutable_sticker(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.sticker)
  return sticker_.Mutable(index);
}
inline ::CMsgPaintKit_Operation_Sticker* CMsgPaintKit_Operation_StickerStage::add_sticker() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation_StickerStage.sticker)
  return sticker_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker >&
CMsgPaintKit_Operation_StickerStage::sticker() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation_StickerStage.sticker)
  return sticker_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Operation_Sticker >*
CMsgPaintKit_Operation_StickerStage::mutable_sticker() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation_StickerStage.sticker)
  return &sticker_;
}

// optional .CMsgVarField dest_tl = 2;
inline bool CMsgPaintKit_Operation_StickerStage::has_dest_tl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPaintKit_Operation_StickerStage::set_has_dest_tl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_has_dest_tl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_dest_tl() {
  if (dest_tl_ != NULL) dest_tl_->::CMsgVarField::Clear();
  clear_has_dest_tl();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::dest_tl() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.dest_tl)
  return dest_tl_ != NULL ? *dest_tl_ : *default_instance_->dest_tl_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_dest_tl() {
  set_has_dest_tl();
  if (dest_tl_ == NULL) dest_tl_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.dest_tl)
  return dest_tl_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_dest_tl() {
  clear_has_dest_tl();
  ::CMsgVarField* temp = dest_tl_;
  dest_tl_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_dest_tl(::CMsgVarField* dest_tl) {
  delete dest_tl_;
  dest_tl_ = dest_tl;
  if (dest_tl) {
    set_has_dest_tl();
  } else {
    clear_has_dest_tl();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.dest_tl)
}

// optional .CMsgVarField dest_tr = 3;
inline bool CMsgPaintKit_Operation_StickerStage::has_dest_tr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPaintKit_Operation_StickerStage::set_has_dest_tr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_has_dest_tr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_dest_tr() {
  if (dest_tr_ != NULL) dest_tr_->::CMsgVarField::Clear();
  clear_has_dest_tr();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::dest_tr() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.dest_tr)
  return dest_tr_ != NULL ? *dest_tr_ : *default_instance_->dest_tr_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_dest_tr() {
  set_has_dest_tr();
  if (dest_tr_ == NULL) dest_tr_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.dest_tr)
  return dest_tr_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_dest_tr() {
  clear_has_dest_tr();
  ::CMsgVarField* temp = dest_tr_;
  dest_tr_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_dest_tr(::CMsgVarField* dest_tr) {
  delete dest_tr_;
  dest_tr_ = dest_tr;
  if (dest_tr) {
    set_has_dest_tr();
  } else {
    clear_has_dest_tr();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.dest_tr)
}

// optional .CMsgVarField dest_bl = 4;
inline bool CMsgPaintKit_Operation_StickerStage::has_dest_bl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPaintKit_Operation_StickerStage::set_has_dest_bl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_has_dest_bl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_dest_bl() {
  if (dest_bl_ != NULL) dest_bl_->::CMsgVarField::Clear();
  clear_has_dest_bl();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::dest_bl() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.dest_bl)
  return dest_bl_ != NULL ? *dest_bl_ : *default_instance_->dest_bl_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_dest_bl() {
  set_has_dest_bl();
  if (dest_bl_ == NULL) dest_bl_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.dest_bl)
  return dest_bl_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_dest_bl() {
  clear_has_dest_bl();
  ::CMsgVarField* temp = dest_bl_;
  dest_bl_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_dest_bl(::CMsgVarField* dest_bl) {
  delete dest_bl_;
  dest_bl_ = dest_bl;
  if (dest_bl) {
    set_has_dest_bl();
  } else {
    clear_has_dest_bl();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.dest_bl)
}

// optional .CMsgVarField adjust_black = 5;
inline bool CMsgPaintKit_Operation_StickerStage::has_adjust_black() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgPaintKit_Operation_StickerStage::set_has_adjust_black() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_has_adjust_black() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_adjust_black() {
  if (adjust_black_ != NULL) adjust_black_->::CMsgVarField::Clear();
  clear_has_adjust_black();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::adjust_black() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.adjust_black)
  return adjust_black_ != NULL ? *adjust_black_ : *default_instance_->adjust_black_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_adjust_black() {
  set_has_adjust_black();
  if (adjust_black_ == NULL) adjust_black_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.adjust_black)
  return adjust_black_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_adjust_black() {
  clear_has_adjust_black();
  ::CMsgVarField* temp = adjust_black_;
  adjust_black_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_adjust_black(::CMsgVarField* adjust_black) {
  delete adjust_black_;
  adjust_black_ = adjust_black;
  if (adjust_black) {
    set_has_adjust_black();
  } else {
    clear_has_adjust_black();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.adjust_black)
}

// optional .CMsgVarField adjust_offset = 6;
inline bool CMsgPaintKit_Operation_StickerStage::has_adjust_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPaintKit_Operation_StickerStage::set_has_adjust_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_has_adjust_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_adjust_offset() {
  if (adjust_offset_ != NULL) adjust_offset_->::CMsgVarField::Clear();
  clear_has_adjust_offset();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::adjust_offset() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.adjust_offset)
  return adjust_offset_ != NULL ? *adjust_offset_ : *default_instance_->adjust_offset_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_adjust_offset() {
  set_has_adjust_offset();
  if (adjust_offset_ == NULL) adjust_offset_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.adjust_offset)
  return adjust_offset_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_adjust_offset() {
  clear_has_adjust_offset();
  ::CMsgVarField* temp = adjust_offset_;
  adjust_offset_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_adjust_offset(::CMsgVarField* adjust_offset) {
  delete adjust_offset_;
  adjust_offset_ = adjust_offset;
  if (adjust_offset) {
    set_has_adjust_offset();
  } else {
    clear_has_adjust_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.adjust_offset)
}

// optional .CMsgVarField adjust_gamma = 7;
inline bool CMsgPaintKit_Operation_StickerStage::has_adjust_gamma() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPaintKit_Operation_StickerStage::set_has_adjust_gamma() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_has_adjust_gamma() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPaintKit_Operation_StickerStage::clear_adjust_gamma() {
  if (adjust_gamma_ != NULL) adjust_gamma_->::CMsgVarField::Clear();
  clear_has_adjust_gamma();
}
inline const ::CMsgVarField& CMsgPaintKit_Operation_StickerStage::adjust_gamma() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.adjust_gamma)
  return adjust_gamma_ != NULL ? *adjust_gamma_ : *default_instance_->adjust_gamma_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::mutable_adjust_gamma() {
  set_has_adjust_gamma();
  if (adjust_gamma_ == NULL) adjust_gamma_ = new ::CMsgVarField;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.adjust_gamma)
  return adjust_gamma_;
}
inline ::CMsgVarField* CMsgPaintKit_Operation_StickerStage::release_adjust_gamma() {
  clear_has_adjust_gamma();
  ::CMsgVarField* temp = adjust_gamma_;
  adjust_gamma_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation_StickerStage::set_allocated_adjust_gamma(::CMsgVarField* adjust_gamma) {
  delete adjust_gamma_;
  adjust_gamma_ = adjust_gamma;
  if (adjust_gamma) {
    set_has_adjust_gamma();
  } else {
    clear_has_adjust_gamma();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation_StickerStage.adjust_gamma)
}

// repeated .CMsgPaintKit_OperationNode operation_node = 9;
inline int CMsgPaintKit_Operation_StickerStage::operation_node_size() const {
  return operation_node_.size();
}
inline void CMsgPaintKit_Operation_StickerStage::clear_operation_node() {
  operation_node_.Clear();
}
inline const ::CMsgPaintKit_OperationNode& CMsgPaintKit_Operation_StickerStage::operation_node(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation_StickerStage.operation_node)
  return operation_node_.Get(index);
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_StickerStage::mutable_operation_node(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation_StickerStage.operation_node)
  return operation_node_.Mutable(index);
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation_StickerStage::add_operation_node() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation_StickerStage.operation_node)
  return operation_node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
CMsgPaintKit_Operation_StickerStage::operation_node() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation_StickerStage.operation_node)
  return operation_node_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
CMsgPaintKit_Operation_StickerStage::mutable_operation_node() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation_StickerStage.operation_node)
  return &operation_node_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_OperationStage

// optional .CMsgPaintKit_Operation_TextureStage texture_lookup = 1;
inline bool CMsgPaintKit_OperationStage::has_texture_lookup() const {
  return stage_case() == kTextureLookup;
}
inline void CMsgPaintKit_OperationStage::set_has_texture_lookup() {
  _oneof_case_[0] = kTextureLookup;
}
inline void CMsgPaintKit_OperationStage::clear_texture_lookup() {
  if (has_texture_lookup()) {
    delete stage_.texture_lookup_;
    clear_has_stage();
  }
}
inline const ::CMsgPaintKit_Operation_TextureStage& CMsgPaintKit_OperationStage::texture_lookup() const {
  return has_texture_lookup() ? *stage_.texture_lookup_
                      : ::CMsgPaintKit_Operation_TextureStage::default_instance();
}
inline ::CMsgPaintKit_Operation_TextureStage* CMsgPaintKit_OperationStage::mutable_texture_lookup() {
  if (!has_texture_lookup()) {
    clear_stage();
    set_has_texture_lookup();
    stage_.texture_lookup_ = new ::CMsgPaintKit_Operation_TextureStage;
  }
  return stage_.texture_lookup_;
}
inline ::CMsgPaintKit_Operation_TextureStage* CMsgPaintKit_OperationStage::release_texture_lookup() {
  if (has_texture_lookup()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_TextureStage* temp = stage_.texture_lookup_;
    stage_.texture_lookup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgPaintKit_OperationStage::set_allocated_texture_lookup(::CMsgPaintKit_Operation_TextureStage* texture_lookup) {
  clear_stage();
  if (texture_lookup) {
    set_has_texture_lookup();
    stage_.texture_lookup_ = texture_lookup;
  }
}

// optional .CMsgPaintKit_Operation_CombineStage combine_add = 2;
inline bool CMsgPaintKit_OperationStage::has_combine_add() const {
  return stage_case() == kCombineAdd;
}
inline void CMsgPaintKit_OperationStage::set_has_combine_add() {
  _oneof_case_[0] = kCombineAdd;
}
inline void CMsgPaintKit_OperationStage::clear_combine_add() {
  if (has_combine_add()) {
    delete stage_.combine_add_;
    clear_has_stage();
  }
}
inline const ::CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_OperationStage::combine_add() const {
  return has_combine_add() ? *stage_.combine_add_
                      : ::CMsgPaintKit_Operation_CombineStage::default_instance();
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::mutable_combine_add() {
  if (!has_combine_add()) {
    clear_stage();
    set_has_combine_add();
    stage_.combine_add_ = new ::CMsgPaintKit_Operation_CombineStage;
  }
  return stage_.combine_add_;
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::release_combine_add() {
  if (has_combine_add()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_CombineStage* temp = stage_.combine_add_;
    stage_.combine_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgPaintKit_OperationStage::set_allocated_combine_add(::CMsgPaintKit_Operation_CombineStage* combine_add) {
  clear_stage();
  if (combine_add) {
    set_has_combine_add();
    stage_.combine_add_ = combine_add;
  }
}

// optional .CMsgPaintKit_Operation_CombineStage combine_lerp = 3;
inline bool CMsgPaintKit_OperationStage::has_combine_lerp() const {
  return stage_case() == kCombineLerp;
}
inline void CMsgPaintKit_OperationStage::set_has_combine_lerp() {
  _oneof_case_[0] = kCombineLerp;
}
inline void CMsgPaintKit_OperationStage::clear_combine_lerp() {
  if (has_combine_lerp()) {
    delete stage_.combine_lerp_;
    clear_has_stage();
  }
}
inline const ::CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_OperationStage::combine_lerp() const {
  return has_combine_lerp() ? *stage_.combine_lerp_
                      : ::CMsgPaintKit_Operation_CombineStage::default_instance();
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::mutable_combine_lerp() {
  if (!has_combine_lerp()) {
    clear_stage();
    set_has_combine_lerp();
    stage_.combine_lerp_ = new ::CMsgPaintKit_Operation_CombineStage;
  }
  return stage_.combine_lerp_;
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::release_combine_lerp() {
  if (has_combine_lerp()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_CombineStage* temp = stage_.combine_lerp_;
    stage_.combine_lerp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgPaintKit_OperationStage::set_allocated_combine_lerp(::CMsgPaintKit_Operation_CombineStage* combine_lerp) {
  clear_stage();
  if (combine_lerp) {
    set_has_combine_lerp();
    stage_.combine_lerp_ = combine_lerp;
  }
}

// optional .CMsgPaintKit_Operation_CombineStage combine_multiply = 4;
inline bool CMsgPaintKit_OperationStage::has_combine_multiply() const {
  return stage_case() == kCombineMultiply;
}
inline void CMsgPaintKit_OperationStage::set_has_combine_multiply() {
  _oneof_case_[0] = kCombineMultiply;
}
inline void CMsgPaintKit_OperationStage::clear_combine_multiply() {
  if (has_combine_multiply()) {
    delete stage_.combine_multiply_;
    clear_has_stage();
  }
}
inline const ::CMsgPaintKit_Operation_CombineStage& CMsgPaintKit_OperationStage::combine_multiply() const {
  return has_combine_multiply() ? *stage_.combine_multiply_
                      : ::CMsgPaintKit_Operation_CombineStage::default_instance();
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::mutable_combine_multiply() {
  if (!has_combine_multiply()) {
    clear_stage();
    set_has_combine_multiply();
    stage_.combine_multiply_ = new ::CMsgPaintKit_Operation_CombineStage;
  }
  return stage_.combine_multiply_;
}
inline ::CMsgPaintKit_Operation_CombineStage* CMsgPaintKit_OperationStage::release_combine_multiply() {
  if (has_combine_multiply()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_CombineStage* temp = stage_.combine_multiply_;
    stage_.combine_multiply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgPaintKit_OperationStage::set_allocated_combine_multiply(::CMsgPaintKit_Operation_CombineStage* combine_multiply) {
  clear_stage();
  if (combine_multiply) {
    set_has_combine_multiply();
    stage_.combine_multiply_ = combine_multiply;
  }
}

// optional .CMsgPaintKit_Operation_SelectStage select = 5;
inline bool CMsgPaintKit_OperationStage::has_select() const {
  return stage_case() == kSelect;
}
inline void CMsgPaintKit_OperationStage::set_has_select() {
  _oneof_case_[0] = kSelect;
}
inline void CMsgPaintKit_OperationStage::clear_select() {
  if (has_select()) {
    delete stage_.select_;
    clear_has_stage();
  }
}
inline const ::CMsgPaintKit_Operation_SelectStage& CMsgPaintKit_OperationStage::select() const {
  return has_select() ? *stage_.select_
                      : ::CMsgPaintKit_Operation_SelectStage::default_instance();
}
inline ::CMsgPaintKit_Operation_SelectStage* CMsgPaintKit_OperationStage::mutable_select() {
  if (!has_select()) {
    clear_stage();
    set_has_select();
    stage_.select_ = new ::CMsgPaintKit_Operation_SelectStage;
  }
  return stage_.select_;
}
inline ::CMsgPaintKit_Operation_SelectStage* CMsgPaintKit_OperationStage::release_select() {
  if (has_select()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_SelectStage* temp = stage_.select_;
    stage_.select_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgPaintKit_OperationStage::set_allocated_select(::CMsgPaintKit_Operation_SelectStage* select) {
  clear_stage();
  if (select) {
    set_has_select();
    stage_.select_ = select;
  }
}

// optional .CMsgPaintKit_Operation_StickerStage apply_sticker = 6;
inline bool CMsgPaintKit_OperationStage::has_apply_sticker() const {
  return stage_case() == kApplySticker;
}
inline void CMsgPaintKit_OperationStage::set_has_apply_sticker() {
  _oneof_case_[0] = kApplySticker;
}
inline void CMsgPaintKit_OperationStage::clear_apply_sticker() {
  if (has_apply_sticker()) {
    delete stage_.apply_sticker_;
    clear_has_stage();
  }
}
inline const ::CMsgPaintKit_Operation_StickerStage& CMsgPaintKit_OperationStage::apply_sticker() const {
  return has_apply_sticker() ? *stage_.apply_sticker_
                      : ::CMsgPaintKit_Operation_StickerStage::default_instance();
}
inline ::CMsgPaintKit_Operation_StickerStage* CMsgPaintKit_OperationStage::mutable_apply_sticker() {
  if (!has_apply_sticker()) {
    clear_stage();
    set_has_apply_sticker();
    stage_.apply_sticker_ = new ::CMsgPaintKit_Operation_StickerStage;
  }
  return stage_.apply_sticker_;
}
inline ::CMsgPaintKit_Operation_StickerStage* CMsgPaintKit_OperationStage::release_apply_sticker() {
  if (has_apply_sticker()) {
    clear_has_stage();
    ::CMsgPaintKit_Operation_StickerStage* temp = stage_.apply_sticker_;
    stage_.apply_sticker_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgPaintKit_OperationStage::set_allocated_apply_sticker(::CMsgPaintKit_Operation_StickerStage* apply_sticker) {
  clear_stage();
  if (apply_sticker) {
    set_has_apply_sticker();
    stage_.apply_sticker_ = apply_sticker;
  }
}

inline bool CMsgPaintKit_OperationStage::has_stage() {
  return stage_case() != STAGE_NOT_SET;
}
inline void CMsgPaintKit_OperationStage::clear_has_stage() {
  _oneof_case_[0] = STAGE_NOT_SET;
}
inline CMsgPaintKit_OperationStage::StageCase CMsgPaintKit_OperationStage::stage_case() const {
  return CMsgPaintKit_OperationStage::StageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgPaintKit_OperationNode

// optional .CMsgPaintKit_OperationStage stage = 1;
inline bool CMsgPaintKit_OperationNode::has_stage() const {
  return node_case() == kStage;
}
inline void CMsgPaintKit_OperationNode::set_has_stage() {
  _oneof_case_[0] = kStage;
}
inline void CMsgPaintKit_OperationNode::clear_stage() {
  if (has_stage()) {
    delete node_.stage_;
    clear_has_node();
  }
}
inline const ::CMsgPaintKit_OperationStage& CMsgPaintKit_OperationNode::stage() const {
  return has_stage() ? *node_.stage_
                      : ::CMsgPaintKit_OperationStage::default_instance();
}
inline ::CMsgPaintKit_OperationStage* CMsgPaintKit_OperationNode::mutable_stage() {
  if (!has_stage()) {
    clear_node();
    set_has_stage();
    node_.stage_ = new ::CMsgPaintKit_OperationStage;
  }
  return node_.stage_;
}
inline ::CMsgPaintKit_OperationStage* CMsgPaintKit_OperationNode::release_stage() {
  if (has_stage()) {
    clear_has_node();
    ::CMsgPaintKit_OperationStage* temp = node_.stage_;
    node_.stage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgPaintKit_OperationNode::set_allocated_stage(::CMsgPaintKit_OperationStage* stage) {
  clear_node();
  if (stage) {
    set_has_stage();
    node_.stage_ = stage;
  }
}

// optional .CMsgProtoDefID operation_template = 2;
inline bool CMsgPaintKit_OperationNode::has_operation_template() const {
  return node_case() == kOperationTemplate;
}
inline void CMsgPaintKit_OperationNode::set_has_operation_template() {
  _oneof_case_[0] = kOperationTemplate;
}
inline void CMsgPaintKit_OperationNode::clear_operation_template() {
  if (has_operation_template()) {
    delete node_.operation_template_;
    clear_has_node();
  }
}
inline const ::CMsgProtoDefID& CMsgPaintKit_OperationNode::operation_template() const {
  return has_operation_template() ? *node_.operation_template_
                      : ::CMsgProtoDefID::default_instance();
}
inline ::CMsgProtoDefID* CMsgPaintKit_OperationNode::mutable_operation_template() {
  if (!has_operation_template()) {
    clear_node();
    set_has_operation_template();
    node_.operation_template_ = new ::CMsgProtoDefID;
  }
  return node_.operation_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_OperationNode::release_operation_template() {
  if (has_operation_template()) {
    clear_has_node();
    ::CMsgProtoDefID* temp = node_.operation_template_;
    node_.operation_template_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgPaintKit_OperationNode::set_allocated_operation_template(::CMsgProtoDefID* operation_template) {
  clear_node();
  if (operation_template) {
    set_has_operation_template();
    node_.operation_template_ = operation_template;
  }
}

inline bool CMsgPaintKit_OperationNode::has_node() {
  return node_case() != NODE_NOT_SET;
}
inline void CMsgPaintKit_OperationNode::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline CMsgPaintKit_OperationNode::NodeCase CMsgPaintKit_OperationNode::node_case() const {
  return CMsgPaintKit_OperationNode::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgPaintKit_Operation

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgPaintKit_Operation::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Operation::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_Operation::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_Operation::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_Operation::header() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Operation::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Operation::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Operation::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Operation.header)
}

// repeated .CMsgPaintKit_OperationNode operation_node = 2;
inline int CMsgPaintKit_Operation::operation_node_size() const {
  return operation_node_.size();
}
inline void CMsgPaintKit_Operation::clear_operation_node() {
  operation_node_.Clear();
}
inline const ::CMsgPaintKit_OperationNode& CMsgPaintKit_Operation::operation_node(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Operation.operation_node)
  return operation_node_.Get(index);
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation::mutable_operation_node(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Operation.operation_node)
  return operation_node_.Mutable(index);
}
inline ::CMsgPaintKit_OperationNode* CMsgPaintKit_Operation::add_operation_node() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Operation.operation_node)
  return operation_node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >&
CMsgPaintKit_Operation::operation_node() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Operation.operation_node)
  return operation_node_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_OperationNode >*
CMsgPaintKit_Operation::mutable_operation_node() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Operation.operation_node)
  return &operation_node_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_ItemDefinition_Definition

// optional .CMsgProtoDefID operation_template = 1;
inline bool CMsgPaintKit_ItemDefinition_Definition::has_operation_template() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_ItemDefinition_Definition::set_has_operation_template() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_ItemDefinition_Definition::clear_has_operation_template() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_ItemDefinition_Definition::clear_operation_template() {
  if (operation_template_ != NULL) operation_template_->::CMsgProtoDefID::Clear();
  clear_has_operation_template();
}
inline const ::CMsgProtoDefID& CMsgPaintKit_ItemDefinition_Definition::operation_template() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.Definition.operation_template)
  return operation_template_ != NULL ? *operation_template_ : *default_instance_->operation_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition_Definition::mutable_operation_template() {
  set_has_operation_template();
  if (operation_template_ == NULL) operation_template_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.Definition.operation_template)
  return operation_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition_Definition::release_operation_template() {
  clear_has_operation_template();
  ::CMsgProtoDefID* temp = operation_template_;
  operation_template_ = NULL;
  return temp;
}
inline void CMsgPaintKit_ItemDefinition_Definition::set_allocated_operation_template(::CMsgProtoDefID* operation_template) {
  delete operation_template_;
  operation_template_ = operation_template;
  if (operation_template) {
    set_has_operation_template();
  } else {
    clear_has_operation_template();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_ItemDefinition.Definition.operation_template)
}

// repeated .CMsgVarField variable = 2;
inline int CMsgPaintKit_ItemDefinition_Definition::variable_size() const {
  return variable_.size();
}
inline void CMsgPaintKit_ItemDefinition_Definition::clear_variable() {
  variable_.Clear();
}
inline const ::CMsgVarField& CMsgPaintKit_ItemDefinition_Definition::variable(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.Definition.variable)
  return variable_.Get(index);
}
inline ::CMsgVarField* CMsgPaintKit_ItemDefinition_Definition::mutable_variable(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.Definition.variable)
  return variable_.Mutable(index);
}
inline ::CMsgVarField* CMsgPaintKit_ItemDefinition_Definition::add_variable() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_ItemDefinition.Definition.variable)
  return variable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
CMsgPaintKit_ItemDefinition_Definition::variable() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_ItemDefinition.Definition.variable)
  return variable_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
CMsgPaintKit_ItemDefinition_Definition::mutable_variable() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_ItemDefinition.Definition.variable)
  return &variable_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_ItemDefinition

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgPaintKit_ItemDefinition::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_ItemDefinition::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_ItemDefinition::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_ItemDefinition::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_ItemDefinition::header() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_ItemDefinition::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_ItemDefinition::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgPaintKit_ItemDefinition::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_ItemDefinition.header)
}

// required uint32 item_definition_index = 2;
inline bool CMsgPaintKit_ItemDefinition::has_item_definition_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPaintKit_ItemDefinition::set_has_item_definition_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPaintKit_ItemDefinition::clear_has_item_definition_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPaintKit_ItemDefinition::clear_item_definition_index() {
  item_definition_index_ = 0u;
  clear_has_item_definition_index();
}
inline ::google::protobuf::uint32 CMsgPaintKit_ItemDefinition::item_definition_index() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.item_definition_index)
  return item_definition_index_;
}
inline void CMsgPaintKit_ItemDefinition::set_item_definition_index(::google::protobuf::uint32 value) {
  set_has_item_definition_index();
  item_definition_index_ = value;
  // @@protoc_insertion_point(field_set:CMsgPaintKit_ItemDefinition.item_definition_index)
}

// optional .CMsgProtoDefID variable_template = 3;
inline bool CMsgPaintKit_ItemDefinition::has_variable_template() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPaintKit_ItemDefinition::set_has_variable_template() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPaintKit_ItemDefinition::clear_has_variable_template() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPaintKit_ItemDefinition::clear_variable_template() {
  if (variable_template_ != NULL) variable_template_->::CMsgProtoDefID::Clear();
  clear_has_variable_template();
}
inline const ::CMsgProtoDefID& CMsgPaintKit_ItemDefinition::variable_template() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.variable_template)
  return variable_template_ != NULL ? *variable_template_ : *default_instance_->variable_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition::mutable_variable_template() {
  set_has_variable_template();
  if (variable_template_ == NULL) variable_template_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.variable_template)
  return variable_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_ItemDefinition::release_variable_template() {
  clear_has_variable_template();
  ::CMsgProtoDefID* temp = variable_template_;
  variable_template_ = NULL;
  return temp;
}
inline void CMsgPaintKit_ItemDefinition::set_allocated_variable_template(::CMsgProtoDefID* variable_template) {
  delete variable_template_;
  variable_template_ = variable_template;
  if (variable_template) {
    set_has_variable_template();
  } else {
    clear_has_variable_template();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_ItemDefinition.variable_template)
}

// repeated .CMsgPaintKit_ItemDefinition.Definition definition = 4;
inline int CMsgPaintKit_ItemDefinition::definition_size() const {
  return definition_.size();
}
inline void CMsgPaintKit_ItemDefinition::clear_definition() {
  definition_.Clear();
}
inline const ::CMsgPaintKit_ItemDefinition_Definition& CMsgPaintKit_ItemDefinition::definition(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_ItemDefinition.definition)
  return definition_.Get(index);
}
inline ::CMsgPaintKit_ItemDefinition_Definition* CMsgPaintKit_ItemDefinition::mutable_definition(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_ItemDefinition.definition)
  return definition_.Mutable(index);
}
inline ::CMsgPaintKit_ItemDefinition_Definition* CMsgPaintKit_ItemDefinition::add_definition() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_ItemDefinition.definition)
  return definition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition >&
CMsgPaintKit_ItemDefinition::definition() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_ItemDefinition.definition)
  return definition_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_ItemDefinition_Definition >*
CMsgPaintKit_ItemDefinition::mutable_definition() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_ItemDefinition.definition)
  return &definition_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_Definition_Item_ItemData

// optional bool can_apply_paintkit = 2 [default = true];
inline bool CMsgPaintKit_Definition_Item_ItemData::has_can_apply_paintkit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Definition_Item_ItemData::set_has_can_apply_paintkit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_Definition_Item_ItemData::clear_has_can_apply_paintkit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_Definition_Item_ItemData::clear_can_apply_paintkit() {
  can_apply_paintkit_ = true;
  clear_has_can_apply_paintkit();
}
inline bool CMsgPaintKit_Definition_Item_ItemData::can_apply_paintkit() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.ItemData.can_apply_paintkit)
  return can_apply_paintkit_;
}
inline void CMsgPaintKit_Definition_Item_ItemData::set_can_apply_paintkit(bool value) {
  set_has_can_apply_paintkit();
  can_apply_paintkit_ = value;
  // @@protoc_insertion_point(field_set:CMsgPaintKit_Definition.Item.ItemData.can_apply_paintkit)
}

// optional string material_override = 3;
inline bool CMsgPaintKit_Definition_Item_ItemData::has_material_override() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPaintKit_Definition_Item_ItemData::set_has_material_override() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPaintKit_Definition_Item_ItemData::clear_has_material_override() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPaintKit_Definition_Item_ItemData::clear_material_override() {
  if (material_override_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_override_->clear();
  }
  clear_has_material_override();
}
inline const ::std::string& CMsgPaintKit_Definition_Item_ItemData::material_override() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.ItemData.material_override)
  return *material_override_;
}
inline void CMsgPaintKit_Definition_Item_ItemData::set_material_override(const ::std::string& value) {
  set_has_material_override();
  if (material_override_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_override_ = new ::std::string;
  }
  material_override_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPaintKit_Definition.Item.ItemData.material_override)
}
inline void CMsgPaintKit_Definition_Item_ItemData::set_material_override(const char* value) {
  set_has_material_override();
  if (material_override_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_override_ = new ::std::string;
  }
  material_override_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPaintKit_Definition.Item.ItemData.material_override)
}
inline void CMsgPaintKit_Definition_Item_ItemData::set_material_override(const char* value, size_t size) {
  set_has_material_override();
  if (material_override_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_override_ = new ::std::string;
  }
  material_override_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPaintKit_Definition.Item.ItemData.material_override)
}
inline ::std::string* CMsgPaintKit_Definition_Item_ItemData::mutable_material_override() {
  set_has_material_override();
  if (material_override_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    material_override_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.Item.ItemData.material_override)
  return material_override_;
}
inline ::std::string* CMsgPaintKit_Definition_Item_ItemData::release_material_override() {
  clear_has_material_override();
  if (material_override_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = material_override_;
    material_override_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPaintKit_Definition_Item_ItemData::set_allocated_material_override(::std::string* material_override) {
  if (material_override_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete material_override_;
  }
  if (material_override) {
    set_has_material_override();
    material_override_ = material_override;
  } else {
    clear_has_material_override();
    material_override_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.Item.ItemData.material_override)
}

// repeated .CMsgVarField variable = 4;
inline int CMsgPaintKit_Definition_Item_ItemData::variable_size() const {
  return variable_.size();
}
inline void CMsgPaintKit_Definition_Item_ItemData::clear_variable() {
  variable_.Clear();
}
inline const ::CMsgVarField& CMsgPaintKit_Definition_Item_ItemData::variable(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.ItemData.variable)
  return variable_.Get(index);
}
inline ::CMsgVarField* CMsgPaintKit_Definition_Item_ItemData::mutable_variable(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.Item.ItemData.variable)
  return variable_.Mutable(index);
}
inline ::CMsgVarField* CMsgPaintKit_Definition_Item_ItemData::add_variable() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Definition.Item.ItemData.variable)
  return variable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgVarField >&
CMsgPaintKit_Definition_Item_ItemData::variable() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Definition.Item.ItemData.variable)
  return variable_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgVarField >*
CMsgPaintKit_Definition_Item_ItemData::mutable_variable() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Definition.Item.ItemData.variable)
  return &variable_;
}

// -------------------------------------------------------------------

// CMsgPaintKit_Definition_Item

// required .CMsgProtoDefID item_definition_template = 1;
inline bool CMsgPaintKit_Definition_Item::has_item_definition_template() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Definition_Item::set_has_item_definition_template() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_Definition_Item::clear_has_item_definition_template() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_Definition_Item::clear_item_definition_template() {
  if (item_definition_template_ != NULL) item_definition_template_->::CMsgProtoDefID::Clear();
  clear_has_item_definition_template();
}
inline const ::CMsgProtoDefID& CMsgPaintKit_Definition_Item::item_definition_template() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.item_definition_template)
  return item_definition_template_ != NULL ? *item_definition_template_ : *default_instance_->item_definition_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition_Item::mutable_item_definition_template() {
  set_has_item_definition_template();
  if (item_definition_template_ == NULL) item_definition_template_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.Item.item_definition_template)
  return item_definition_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition_Item::release_item_definition_template() {
  clear_has_item_definition_template();
  ::CMsgProtoDefID* temp = item_definition_template_;
  item_definition_template_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition_Item::set_allocated_item_definition_template(::CMsgProtoDefID* item_definition_template) {
  delete item_definition_template_;
  item_definition_template_ = item_definition_template;
  if (item_definition_template) {
    set_has_item_definition_template();
  } else {
    clear_has_item_definition_template();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.Item.item_definition_template)
}

// optional .CMsgPaintKit_Definition.Item.ItemData data = 5;
inline bool CMsgPaintKit_Definition_Item::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPaintKit_Definition_Item::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPaintKit_Definition_Item::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPaintKit_Definition_Item::clear_data() {
  if (data_ != NULL) data_->::CMsgPaintKit_Definition_Item_ItemData::Clear();
  clear_has_data();
}
inline const ::CMsgPaintKit_Definition_Item_ItemData& CMsgPaintKit_Definition_Item::data() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.Item.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::CMsgPaintKit_Definition_Item_ItemData* CMsgPaintKit_Definition_Item::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::CMsgPaintKit_Definition_Item_ItemData;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.Item.data)
  return data_;
}
inline ::CMsgPaintKit_Definition_Item_ItemData* CMsgPaintKit_Definition_Item::release_data() {
  clear_has_data();
  ::CMsgPaintKit_Definition_Item_ItemData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition_Item::set_allocated_data(::CMsgPaintKit_Definition_Item_ItemData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.Item.data)
}

// -------------------------------------------------------------------

// CMsgPaintKit_Definition

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgPaintKit_Definition::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPaintKit_Definition::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPaintKit_Definition::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgPaintKit_Definition::header() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Definition::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgPaintKit_Definition::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.header)
}

// optional string loc_desctoken = 2;
inline bool CMsgPaintKit_Definition::has_loc_desctoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_loc_desctoken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgPaintKit_Definition::clear_has_loc_desctoken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgPaintKit_Definition::clear_loc_desctoken() {
  if (loc_desctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_->clear();
  }
  clear_has_loc_desctoken();
}
inline const ::std::string& CMsgPaintKit_Definition::loc_desctoken() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.loc_desctoken)
  return *loc_desctoken_;
}
inline void CMsgPaintKit_Definition::set_loc_desctoken(const ::std::string& value) {
  set_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_ = new ::std::string;
  }
  loc_desctoken_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgPaintKit_Definition.loc_desctoken)
}
inline void CMsgPaintKit_Definition::set_loc_desctoken(const char* value) {
  set_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_ = new ::std::string;
  }
  loc_desctoken_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgPaintKit_Definition.loc_desctoken)
}
inline void CMsgPaintKit_Definition::set_loc_desctoken(const char* value, size_t size) {
  set_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_ = new ::std::string;
  }
  loc_desctoken_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgPaintKit_Definition.loc_desctoken)
}
inline ::std::string* CMsgPaintKit_Definition::mutable_loc_desctoken() {
  set_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loc_desctoken_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.loc_desctoken)
  return loc_desctoken_;
}
inline ::std::string* CMsgPaintKit_Definition::release_loc_desctoken() {
  clear_has_loc_desctoken();
  if (loc_desctoken_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loc_desctoken_;
    loc_desctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgPaintKit_Definition::set_allocated_loc_desctoken(::std::string* loc_desctoken) {
  if (loc_desctoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loc_desctoken_;
  }
  if (loc_desctoken) {
    set_has_loc_desctoken();
    loc_desctoken_ = loc_desctoken;
  } else {
    clear_has_loc_desctoken();
    loc_desctoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.loc_desctoken)
}

// optional .CMsgProtoDefID operation_template = 3;
inline bool CMsgPaintKit_Definition::has_operation_template() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_operation_template() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgPaintKit_Definition::clear_has_operation_template() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgPaintKit_Definition::clear_operation_template() {
  if (operation_template_ != NULL) operation_template_->::CMsgProtoDefID::Clear();
  clear_has_operation_template();
}
inline const ::CMsgProtoDefID& CMsgPaintKit_Definition::operation_template() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.operation_template)
  return operation_template_ != NULL ? *operation_template_ : *default_instance_->operation_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition::mutable_operation_template() {
  set_has_operation_template();
  if (operation_template_ == NULL) operation_template_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.operation_template)
  return operation_template_;
}
inline ::CMsgProtoDefID* CMsgPaintKit_Definition::release_operation_template() {
  clear_has_operation_template();
  ::CMsgProtoDefID* temp = operation_template_;
  operation_template_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_operation_template(::CMsgProtoDefID* operation_template) {
  delete operation_template_;
  operation_template_ = operation_template;
  if (operation_template) {
    set_has_operation_template();
  } else {
    clear_has_operation_template();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.operation_template)
}

// optional bool has_team_textures = 4;
inline bool CMsgPaintKit_Definition::has_has_team_textures() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_has_team_textures() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgPaintKit_Definition::clear_has_has_team_textures() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgPaintKit_Definition::clear_has_team_textures() {
  has_team_textures_ = false;
  clear_has_has_team_textures();
}
inline bool CMsgPaintKit_Definition::has_team_textures() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.has_team_textures)
  return has_team_textures_;
}
inline void CMsgPaintKit_Definition::set_has_team_textures(bool value) {
  set_has_has_team_textures();
  has_team_textures_ = value;
  // @@protoc_insertion_point(field_set:CMsgPaintKit_Definition.has_team_textures)
}

// repeated .CMsgPaintKit_Definition.Item item = 5;
inline int CMsgPaintKit_Definition::item_size() const {
  return item_.size();
}
inline void CMsgPaintKit_Definition::clear_item() {
  item_.Clear();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::item(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.item)
  return item_.Get(index);
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.item)
  return item_.Mutable(index);
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::add_item() {
  // @@protoc_insertion_point(field_add:CMsgPaintKit_Definition.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Definition_Item >&
CMsgPaintKit_Definition::item() const {
  // @@protoc_insertion_point(field_list:CMsgPaintKit_Definition.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgPaintKit_Definition_Item >*
CMsgPaintKit_Definition::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPaintKit_Definition.item)
  return &item_;
}

// optional .CMsgPaintKit_Definition.Item paintkit_tool = 6;
inline bool CMsgPaintKit_Definition::has_paintkit_tool() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_paintkit_tool() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgPaintKit_Definition::clear_has_paintkit_tool() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgPaintKit_Definition::clear_paintkit_tool() {
  if (paintkit_tool_ != NULL) paintkit_tool_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_paintkit_tool();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::paintkit_tool() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.paintkit_tool)
  return paintkit_tool_ != NULL ? *paintkit_tool_ : *default_instance_->paintkit_tool_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_paintkit_tool() {
  set_has_paintkit_tool();
  if (paintkit_tool_ == NULL) paintkit_tool_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.paintkit_tool)
  return paintkit_tool_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_paintkit_tool() {
  clear_has_paintkit_tool();
  ::CMsgPaintKit_Definition_Item* temp = paintkit_tool_;
  paintkit_tool_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_paintkit_tool(::CMsgPaintKit_Definition_Item* paintkit_tool) {
  delete paintkit_tool_;
  paintkit_tool_ = paintkit_tool;
  if (paintkit_tool) {
    set_has_paintkit_tool();
  } else {
    clear_has_paintkit_tool();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.paintkit_tool)
}

// optional .CMsgPaintKit_Definition.Item flamethrower = 7;
inline bool CMsgPaintKit_Definition::has_flamethrower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_flamethrower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgPaintKit_Definition::clear_has_flamethrower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgPaintKit_Definition::clear_flamethrower() {
  if (flamethrower_ != NULL) flamethrower_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_flamethrower();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::flamethrower() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.flamethrower)
  return flamethrower_ != NULL ? *flamethrower_ : *default_instance_->flamethrower_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_flamethrower() {
  set_has_flamethrower();
  if (flamethrower_ == NULL) flamethrower_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.flamethrower)
  return flamethrower_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_flamethrower() {
  clear_has_flamethrower();
  ::CMsgPaintKit_Definition_Item* temp = flamethrower_;
  flamethrower_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_flamethrower(::CMsgPaintKit_Definition_Item* flamethrower) {
  delete flamethrower_;
  flamethrower_ = flamethrower;
  if (flamethrower) {
    set_has_flamethrower();
  } else {
    clear_has_flamethrower();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.flamethrower)
}

// optional .CMsgPaintKit_Definition.Item grenadelauncher = 8;
inline bool CMsgPaintKit_Definition::has_grenadelauncher() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_grenadelauncher() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgPaintKit_Definition::clear_has_grenadelauncher() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgPaintKit_Definition::clear_grenadelauncher() {
  if (grenadelauncher_ != NULL) grenadelauncher_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_grenadelauncher();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::grenadelauncher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.grenadelauncher)
  return grenadelauncher_ != NULL ? *grenadelauncher_ : *default_instance_->grenadelauncher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_grenadelauncher() {
  set_has_grenadelauncher();
  if (grenadelauncher_ == NULL) grenadelauncher_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.grenadelauncher)
  return grenadelauncher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_grenadelauncher() {
  clear_has_grenadelauncher();
  ::CMsgPaintKit_Definition_Item* temp = grenadelauncher_;
  grenadelauncher_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_grenadelauncher(::CMsgPaintKit_Definition_Item* grenadelauncher) {
  delete grenadelauncher_;
  grenadelauncher_ = grenadelauncher;
  if (grenadelauncher) {
    set_has_grenadelauncher();
  } else {
    clear_has_grenadelauncher();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.grenadelauncher)
}

// optional .CMsgPaintKit_Definition.Item knife = 9;
inline bool CMsgPaintKit_Definition::has_knife() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_knife() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgPaintKit_Definition::clear_has_knife() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgPaintKit_Definition::clear_knife() {
  if (knife_ != NULL) knife_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_knife();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::knife() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.knife)
  return knife_ != NULL ? *knife_ : *default_instance_->knife_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_knife() {
  set_has_knife();
  if (knife_ == NULL) knife_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.knife)
  return knife_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_knife() {
  clear_has_knife();
  ::CMsgPaintKit_Definition_Item* temp = knife_;
  knife_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_knife(::CMsgPaintKit_Definition_Item* knife) {
  delete knife_;
  knife_ = knife;
  if (knife) {
    set_has_knife();
  } else {
    clear_has_knife();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.knife)
}

// optional .CMsgPaintKit_Definition.Item medigun = 10;
inline bool CMsgPaintKit_Definition::has_medigun() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_medigun() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgPaintKit_Definition::clear_has_medigun() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgPaintKit_Definition::clear_medigun() {
  if (medigun_ != NULL) medigun_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_medigun();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::medigun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.medigun)
  return medigun_ != NULL ? *medigun_ : *default_instance_->medigun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_medigun() {
  set_has_medigun();
  if (medigun_ == NULL) medigun_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.medigun)
  return medigun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_medigun() {
  clear_has_medigun();
  ::CMsgPaintKit_Definition_Item* temp = medigun_;
  medigun_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_medigun(::CMsgPaintKit_Definition_Item* medigun) {
  delete medigun_;
  medigun_ = medigun;
  if (medigun) {
    set_has_medigun();
  } else {
    clear_has_medigun();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.medigun)
}

// optional .CMsgPaintKit_Definition.Item minigun = 11;
inline bool CMsgPaintKit_Definition::has_minigun() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_minigun() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgPaintKit_Definition::clear_has_minigun() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgPaintKit_Definition::clear_minigun() {
  if (minigun_ != NULL) minigun_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_minigun();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::minigun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.minigun)
  return minigun_ != NULL ? *minigun_ : *default_instance_->minigun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_minigun() {
  set_has_minigun();
  if (minigun_ == NULL) minigun_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.minigun)
  return minigun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_minigun() {
  clear_has_minigun();
  ::CMsgPaintKit_Definition_Item* temp = minigun_;
  minigun_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_minigun(::CMsgPaintKit_Definition_Item* minigun) {
  delete minigun_;
  minigun_ = minigun;
  if (minigun) {
    set_has_minigun();
  } else {
    clear_has_minigun();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.minigun)
}

// optional .CMsgPaintKit_Definition.Item pistol = 12;
inline bool CMsgPaintKit_Definition::has_pistol() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_pistol() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgPaintKit_Definition::clear_has_pistol() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgPaintKit_Definition::clear_pistol() {
  if (pistol_ != NULL) pistol_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_pistol();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::pistol() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.pistol)
  return pistol_ != NULL ? *pistol_ : *default_instance_->pistol_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_pistol() {
  set_has_pistol();
  if (pistol_ == NULL) pistol_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.pistol)
  return pistol_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_pistol() {
  clear_has_pistol();
  ::CMsgPaintKit_Definition_Item* temp = pistol_;
  pistol_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_pistol(::CMsgPaintKit_Definition_Item* pistol) {
  delete pistol_;
  pistol_ = pistol;
  if (pistol) {
    set_has_pistol();
  } else {
    clear_has_pistol();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.pistol)
}

// optional .CMsgPaintKit_Definition.Item revolver = 13;
inline bool CMsgPaintKit_Definition::has_revolver() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_revolver() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgPaintKit_Definition::clear_has_revolver() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgPaintKit_Definition::clear_revolver() {
  if (revolver_ != NULL) revolver_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_revolver();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::revolver() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.revolver)
  return revolver_ != NULL ? *revolver_ : *default_instance_->revolver_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_revolver() {
  set_has_revolver();
  if (revolver_ == NULL) revolver_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.revolver)
  return revolver_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_revolver() {
  clear_has_revolver();
  ::CMsgPaintKit_Definition_Item* temp = revolver_;
  revolver_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_revolver(::CMsgPaintKit_Definition_Item* revolver) {
  delete revolver_;
  revolver_ = revolver;
  if (revolver) {
    set_has_revolver();
  } else {
    clear_has_revolver();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.revolver)
}

// optional .CMsgPaintKit_Definition.Item rocketlauncher = 14;
inline bool CMsgPaintKit_Definition::has_rocketlauncher() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_rocketlauncher() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgPaintKit_Definition::clear_has_rocketlauncher() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgPaintKit_Definition::clear_rocketlauncher() {
  if (rocketlauncher_ != NULL) rocketlauncher_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_rocketlauncher();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::rocketlauncher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.rocketlauncher)
  return rocketlauncher_ != NULL ? *rocketlauncher_ : *default_instance_->rocketlauncher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_rocketlauncher() {
  set_has_rocketlauncher();
  if (rocketlauncher_ == NULL) rocketlauncher_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.rocketlauncher)
  return rocketlauncher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_rocketlauncher() {
  clear_has_rocketlauncher();
  ::CMsgPaintKit_Definition_Item* temp = rocketlauncher_;
  rocketlauncher_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_rocketlauncher(::CMsgPaintKit_Definition_Item* rocketlauncher) {
  delete rocketlauncher_;
  rocketlauncher_ = rocketlauncher;
  if (rocketlauncher) {
    set_has_rocketlauncher();
  } else {
    clear_has_rocketlauncher();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.rocketlauncher)
}

// optional .CMsgPaintKit_Definition.Item scattergun = 15;
inline bool CMsgPaintKit_Definition::has_scattergun() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_scattergun() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgPaintKit_Definition::clear_has_scattergun() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgPaintKit_Definition::clear_scattergun() {
  if (scattergun_ != NULL) scattergun_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_scattergun();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::scattergun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.scattergun)
  return scattergun_ != NULL ? *scattergun_ : *default_instance_->scattergun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_scattergun() {
  set_has_scattergun();
  if (scattergun_ == NULL) scattergun_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.scattergun)
  return scattergun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_scattergun() {
  clear_has_scattergun();
  ::CMsgPaintKit_Definition_Item* temp = scattergun_;
  scattergun_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_scattergun(::CMsgPaintKit_Definition_Item* scattergun) {
  delete scattergun_;
  scattergun_ = scattergun;
  if (scattergun) {
    set_has_scattergun();
  } else {
    clear_has_scattergun();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.scattergun)
}

// optional .CMsgPaintKit_Definition.Item shotgun = 16;
inline bool CMsgPaintKit_Definition::has_shotgun() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_shotgun() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgPaintKit_Definition::clear_has_shotgun() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgPaintKit_Definition::clear_shotgun() {
  if (shotgun_ != NULL) shotgun_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_shotgun();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::shotgun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.shotgun)
  return shotgun_ != NULL ? *shotgun_ : *default_instance_->shotgun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_shotgun() {
  set_has_shotgun();
  if (shotgun_ == NULL) shotgun_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.shotgun)
  return shotgun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_shotgun() {
  clear_has_shotgun();
  ::CMsgPaintKit_Definition_Item* temp = shotgun_;
  shotgun_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_shotgun(::CMsgPaintKit_Definition_Item* shotgun) {
  delete shotgun_;
  shotgun_ = shotgun;
  if (shotgun) {
    set_has_shotgun();
  } else {
    clear_has_shotgun();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.shotgun)
}

// optional .CMsgPaintKit_Definition.Item smg = 17;
inline bool CMsgPaintKit_Definition::has_smg() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_smg() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgPaintKit_Definition::clear_has_smg() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgPaintKit_Definition::clear_smg() {
  if (smg_ != NULL) smg_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_smg();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::smg() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.smg)
  return smg_ != NULL ? *smg_ : *default_instance_->smg_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_smg() {
  set_has_smg();
  if (smg_ == NULL) smg_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.smg)
  return smg_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_smg() {
  clear_has_smg();
  ::CMsgPaintKit_Definition_Item* temp = smg_;
  smg_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_smg(::CMsgPaintKit_Definition_Item* smg) {
  delete smg_;
  smg_ = smg;
  if (smg) {
    set_has_smg();
  } else {
    clear_has_smg();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.smg)
}

// optional .CMsgPaintKit_Definition.Item sniperrifle = 18;
inline bool CMsgPaintKit_Definition::has_sniperrifle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_sniperrifle() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgPaintKit_Definition::clear_has_sniperrifle() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgPaintKit_Definition::clear_sniperrifle() {
  if (sniperrifle_ != NULL) sniperrifle_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_sniperrifle();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::sniperrifle() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.sniperrifle)
  return sniperrifle_ != NULL ? *sniperrifle_ : *default_instance_->sniperrifle_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_sniperrifle() {
  set_has_sniperrifle();
  if (sniperrifle_ == NULL) sniperrifle_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.sniperrifle)
  return sniperrifle_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_sniperrifle() {
  clear_has_sniperrifle();
  ::CMsgPaintKit_Definition_Item* temp = sniperrifle_;
  sniperrifle_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_sniperrifle(::CMsgPaintKit_Definition_Item* sniperrifle) {
  delete sniperrifle_;
  sniperrifle_ = sniperrifle;
  if (sniperrifle) {
    set_has_sniperrifle();
  } else {
    clear_has_sniperrifle();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.sniperrifle)
}

// optional .CMsgPaintKit_Definition.Item stickybomb_launcher = 19;
inline bool CMsgPaintKit_Definition::has_stickybomb_launcher() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_stickybomb_launcher() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgPaintKit_Definition::clear_has_stickybomb_launcher() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgPaintKit_Definition::clear_stickybomb_launcher() {
  if (stickybomb_launcher_ != NULL) stickybomb_launcher_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_stickybomb_launcher();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::stickybomb_launcher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.stickybomb_launcher)
  return stickybomb_launcher_ != NULL ? *stickybomb_launcher_ : *default_instance_->stickybomb_launcher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_stickybomb_launcher() {
  set_has_stickybomb_launcher();
  if (stickybomb_launcher_ == NULL) stickybomb_launcher_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.stickybomb_launcher)
  return stickybomb_launcher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_stickybomb_launcher() {
  clear_has_stickybomb_launcher();
  ::CMsgPaintKit_Definition_Item* temp = stickybomb_launcher_;
  stickybomb_launcher_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_stickybomb_launcher(::CMsgPaintKit_Definition_Item* stickybomb_launcher) {
  delete stickybomb_launcher_;
  stickybomb_launcher_ = stickybomb_launcher;
  if (stickybomb_launcher) {
    set_has_stickybomb_launcher();
  } else {
    clear_has_stickybomb_launcher();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.stickybomb_launcher)
}

// optional .CMsgPaintKit_Definition.Item ubersaw = 20;
inline bool CMsgPaintKit_Definition::has_ubersaw() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_ubersaw() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgPaintKit_Definition::clear_has_ubersaw() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgPaintKit_Definition::clear_ubersaw() {
  if (ubersaw_ != NULL) ubersaw_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_ubersaw();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::ubersaw() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.ubersaw)
  return ubersaw_ != NULL ? *ubersaw_ : *default_instance_->ubersaw_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_ubersaw() {
  set_has_ubersaw();
  if (ubersaw_ == NULL) ubersaw_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.ubersaw)
  return ubersaw_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_ubersaw() {
  clear_has_ubersaw();
  ::CMsgPaintKit_Definition_Item* temp = ubersaw_;
  ubersaw_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_ubersaw(::CMsgPaintKit_Definition_Item* ubersaw) {
  delete ubersaw_;
  ubersaw_ = ubersaw;
  if (ubersaw) {
    set_has_ubersaw();
  } else {
    clear_has_ubersaw();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.ubersaw)
}

// optional .CMsgPaintKit_Definition.Item wrench = 21;
inline bool CMsgPaintKit_Definition::has_wrench() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_wrench() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgPaintKit_Definition::clear_has_wrench() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgPaintKit_Definition::clear_wrench() {
  if (wrench_ != NULL) wrench_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_wrench();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::wrench() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.wrench)
  return wrench_ != NULL ? *wrench_ : *default_instance_->wrench_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_wrench() {
  set_has_wrench();
  if (wrench_ == NULL) wrench_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.wrench)
  return wrench_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_wrench() {
  clear_has_wrench();
  ::CMsgPaintKit_Definition_Item* temp = wrench_;
  wrench_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_wrench(::CMsgPaintKit_Definition_Item* wrench) {
  delete wrench_;
  wrench_ = wrench;
  if (wrench) {
    set_has_wrench();
  } else {
    clear_has_wrench();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.wrench)
}

// optional .CMsgPaintKit_Definition.Item amputator = 22;
inline bool CMsgPaintKit_Definition::has_amputator() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_amputator() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgPaintKit_Definition::clear_has_amputator() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgPaintKit_Definition::clear_amputator() {
  if (amputator_ != NULL) amputator_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_amputator();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::amputator() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.amputator)
  return amputator_ != NULL ? *amputator_ : *default_instance_->amputator_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_amputator() {
  set_has_amputator();
  if (amputator_ == NULL) amputator_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.amputator)
  return amputator_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_amputator() {
  clear_has_amputator();
  ::CMsgPaintKit_Definition_Item* temp = amputator_;
  amputator_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_amputator(::CMsgPaintKit_Definition_Item* amputator) {
  delete amputator_;
  amputator_ = amputator;
  if (amputator) {
    set_has_amputator();
  } else {
    clear_has_amputator();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.amputator)
}

// optional .CMsgPaintKit_Definition.Item atom_launcher = 23;
inline bool CMsgPaintKit_Definition::has_atom_launcher() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_atom_launcher() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgPaintKit_Definition::clear_has_atom_launcher() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgPaintKit_Definition::clear_atom_launcher() {
  if (atom_launcher_ != NULL) atom_launcher_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_atom_launcher();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::atom_launcher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.atom_launcher)
  return atom_launcher_ != NULL ? *atom_launcher_ : *default_instance_->atom_launcher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_atom_launcher() {
  set_has_atom_launcher();
  if (atom_launcher_ == NULL) atom_launcher_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.atom_launcher)
  return atom_launcher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_atom_launcher() {
  clear_has_atom_launcher();
  ::CMsgPaintKit_Definition_Item* temp = atom_launcher_;
  atom_launcher_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_atom_launcher(::CMsgPaintKit_Definition_Item* atom_launcher) {
  delete atom_launcher_;
  atom_launcher_ = atom_launcher;
  if (atom_launcher) {
    set_has_atom_launcher();
  } else {
    clear_has_atom_launcher();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.atom_launcher)
}

// optional .CMsgPaintKit_Definition.Item back_scratcher = 24;
inline bool CMsgPaintKit_Definition::has_back_scratcher() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_back_scratcher() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgPaintKit_Definition::clear_has_back_scratcher() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgPaintKit_Definition::clear_back_scratcher() {
  if (back_scratcher_ != NULL) back_scratcher_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_back_scratcher();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::back_scratcher() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.back_scratcher)
  return back_scratcher_ != NULL ? *back_scratcher_ : *default_instance_->back_scratcher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_back_scratcher() {
  set_has_back_scratcher();
  if (back_scratcher_ == NULL) back_scratcher_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.back_scratcher)
  return back_scratcher_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_back_scratcher() {
  clear_has_back_scratcher();
  ::CMsgPaintKit_Definition_Item* temp = back_scratcher_;
  back_scratcher_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_back_scratcher(::CMsgPaintKit_Definition_Item* back_scratcher) {
  delete back_scratcher_;
  back_scratcher_ = back_scratcher;
  if (back_scratcher) {
    set_has_back_scratcher();
  } else {
    clear_has_back_scratcher();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.back_scratcher)
}

// optional .CMsgPaintKit_Definition.Item battleaxe = 25;
inline bool CMsgPaintKit_Definition::has_battleaxe() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_battleaxe() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgPaintKit_Definition::clear_has_battleaxe() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgPaintKit_Definition::clear_battleaxe() {
  if (battleaxe_ != NULL) battleaxe_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_battleaxe();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::battleaxe() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.battleaxe)
  return battleaxe_ != NULL ? *battleaxe_ : *default_instance_->battleaxe_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_battleaxe() {
  set_has_battleaxe();
  if (battleaxe_ == NULL) battleaxe_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.battleaxe)
  return battleaxe_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_battleaxe() {
  clear_has_battleaxe();
  ::CMsgPaintKit_Definition_Item* temp = battleaxe_;
  battleaxe_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_battleaxe(::CMsgPaintKit_Definition_Item* battleaxe) {
  delete battleaxe_;
  battleaxe_ = battleaxe;
  if (battleaxe) {
    set_has_battleaxe();
  } else {
    clear_has_battleaxe();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.battleaxe)
}

// optional .CMsgPaintKit_Definition.Item bazaar_sniper = 26;
inline bool CMsgPaintKit_Definition::has_bazaar_sniper() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_bazaar_sniper() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgPaintKit_Definition::clear_has_bazaar_sniper() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgPaintKit_Definition::clear_bazaar_sniper() {
  if (bazaar_sniper_ != NULL) bazaar_sniper_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_bazaar_sniper();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::bazaar_sniper() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.bazaar_sniper)
  return bazaar_sniper_ != NULL ? *bazaar_sniper_ : *default_instance_->bazaar_sniper_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_bazaar_sniper() {
  set_has_bazaar_sniper();
  if (bazaar_sniper_ == NULL) bazaar_sniper_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.bazaar_sniper)
  return bazaar_sniper_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_bazaar_sniper() {
  clear_has_bazaar_sniper();
  ::CMsgPaintKit_Definition_Item* temp = bazaar_sniper_;
  bazaar_sniper_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_bazaar_sniper(::CMsgPaintKit_Definition_Item* bazaar_sniper) {
  delete bazaar_sniper_;
  bazaar_sniper_ = bazaar_sniper;
  if (bazaar_sniper) {
    set_has_bazaar_sniper();
  } else {
    clear_has_bazaar_sniper();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.bazaar_sniper)
}

// optional .CMsgPaintKit_Definition.Item blackbox = 27;
inline bool CMsgPaintKit_Definition::has_blackbox() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_blackbox() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgPaintKit_Definition::clear_has_blackbox() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgPaintKit_Definition::clear_blackbox() {
  if (blackbox_ != NULL) blackbox_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_blackbox();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::blackbox() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.blackbox)
  return blackbox_ != NULL ? *blackbox_ : *default_instance_->blackbox_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_blackbox() {
  set_has_blackbox();
  if (blackbox_ == NULL) blackbox_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.blackbox)
  return blackbox_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_blackbox() {
  clear_has_blackbox();
  ::CMsgPaintKit_Definition_Item* temp = blackbox_;
  blackbox_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_blackbox(::CMsgPaintKit_Definition_Item* blackbox) {
  delete blackbox_;
  blackbox_ = blackbox;
  if (blackbox) {
    set_has_blackbox();
  } else {
    clear_has_blackbox();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.blackbox)
}

// optional .CMsgPaintKit_Definition.Item claidheamohmor = 28;
inline bool CMsgPaintKit_Definition::has_claidheamohmor() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_claidheamohmor() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgPaintKit_Definition::clear_has_claidheamohmor() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgPaintKit_Definition::clear_claidheamohmor() {
  if (claidheamohmor_ != NULL) claidheamohmor_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_claidheamohmor();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::claidheamohmor() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.claidheamohmor)
  return claidheamohmor_ != NULL ? *claidheamohmor_ : *default_instance_->claidheamohmor_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_claidheamohmor() {
  set_has_claidheamohmor();
  if (claidheamohmor_ == NULL) claidheamohmor_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.claidheamohmor)
  return claidheamohmor_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_claidheamohmor() {
  clear_has_claidheamohmor();
  ::CMsgPaintKit_Definition_Item* temp = claidheamohmor_;
  claidheamohmor_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_claidheamohmor(::CMsgPaintKit_Definition_Item* claidheamohmor) {
  delete claidheamohmor_;
  claidheamohmor_ = claidheamohmor;
  if (claidheamohmor) {
    set_has_claidheamohmor();
  } else {
    clear_has_claidheamohmor();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.claidheamohmor)
}

// optional .CMsgPaintKit_Definition.Item crusaders_crossbow = 29;
inline bool CMsgPaintKit_Definition::has_crusaders_crossbow() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_crusaders_crossbow() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgPaintKit_Definition::clear_has_crusaders_crossbow() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgPaintKit_Definition::clear_crusaders_crossbow() {
  if (crusaders_crossbow_ != NULL) crusaders_crossbow_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_crusaders_crossbow();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::crusaders_crossbow() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.crusaders_crossbow)
  return crusaders_crossbow_ != NULL ? *crusaders_crossbow_ : *default_instance_->crusaders_crossbow_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_crusaders_crossbow() {
  set_has_crusaders_crossbow();
  if (crusaders_crossbow_ == NULL) crusaders_crossbow_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.crusaders_crossbow)
  return crusaders_crossbow_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_crusaders_crossbow() {
  clear_has_crusaders_crossbow();
  ::CMsgPaintKit_Definition_Item* temp = crusaders_crossbow_;
  crusaders_crossbow_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_crusaders_crossbow(::CMsgPaintKit_Definition_Item* crusaders_crossbow) {
  delete crusaders_crossbow_;
  crusaders_crossbow_ = crusaders_crossbow;
  if (crusaders_crossbow) {
    set_has_crusaders_crossbow();
  } else {
    clear_has_crusaders_crossbow();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.crusaders_crossbow)
}

// optional .CMsgPaintKit_Definition.Item degreaser = 30;
inline bool CMsgPaintKit_Definition::has_degreaser() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_degreaser() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgPaintKit_Definition::clear_has_degreaser() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgPaintKit_Definition::clear_degreaser() {
  if (degreaser_ != NULL) degreaser_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_degreaser();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::degreaser() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.degreaser)
  return degreaser_ != NULL ? *degreaser_ : *default_instance_->degreaser_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_degreaser() {
  set_has_degreaser();
  if (degreaser_ == NULL) degreaser_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.degreaser)
  return degreaser_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_degreaser() {
  clear_has_degreaser();
  ::CMsgPaintKit_Definition_Item* temp = degreaser_;
  degreaser_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_degreaser(::CMsgPaintKit_Definition_Item* degreaser) {
  delete degreaser_;
  degreaser_ = degreaser;
  if (degreaser) {
    set_has_degreaser();
  } else {
    clear_has_degreaser();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.degreaser)
}

// optional .CMsgPaintKit_Definition.Item demo_cannon = 31;
inline bool CMsgPaintKit_Definition::has_demo_cannon() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_demo_cannon() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgPaintKit_Definition::clear_has_demo_cannon() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgPaintKit_Definition::clear_demo_cannon() {
  if (demo_cannon_ != NULL) demo_cannon_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_demo_cannon();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::demo_cannon() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.demo_cannon)
  return demo_cannon_ != NULL ? *demo_cannon_ : *default_instance_->demo_cannon_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_demo_cannon() {
  set_has_demo_cannon();
  if (demo_cannon_ == NULL) demo_cannon_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.demo_cannon)
  return demo_cannon_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_demo_cannon() {
  clear_has_demo_cannon();
  ::CMsgPaintKit_Definition_Item* temp = demo_cannon_;
  demo_cannon_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_demo_cannon(::CMsgPaintKit_Definition_Item* demo_cannon) {
  delete demo_cannon_;
  demo_cannon_ = demo_cannon;
  if (demo_cannon) {
    set_has_demo_cannon();
  } else {
    clear_has_demo_cannon();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.demo_cannon)
}

// optional .CMsgPaintKit_Definition.Item demo_sultan_sword = 32;
inline bool CMsgPaintKit_Definition::has_demo_sultan_sword() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_demo_sultan_sword() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgPaintKit_Definition::clear_has_demo_sultan_sword() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgPaintKit_Definition::clear_demo_sultan_sword() {
  if (demo_sultan_sword_ != NULL) demo_sultan_sword_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_demo_sultan_sword();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::demo_sultan_sword() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.demo_sultan_sword)
  return demo_sultan_sword_ != NULL ? *demo_sultan_sword_ : *default_instance_->demo_sultan_sword_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_demo_sultan_sword() {
  set_has_demo_sultan_sword();
  if (demo_sultan_sword_ == NULL) demo_sultan_sword_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.demo_sultan_sword)
  return demo_sultan_sword_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_demo_sultan_sword() {
  clear_has_demo_sultan_sword();
  ::CMsgPaintKit_Definition_Item* temp = demo_sultan_sword_;
  demo_sultan_sword_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_demo_sultan_sword(::CMsgPaintKit_Definition_Item* demo_sultan_sword) {
  delete demo_sultan_sword_;
  demo_sultan_sword_ = demo_sultan_sword;
  if (demo_sultan_sword) {
    set_has_demo_sultan_sword();
  } else {
    clear_has_demo_sultan_sword();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.demo_sultan_sword)
}

// optional .CMsgPaintKit_Definition.Item detonator = 33;
inline bool CMsgPaintKit_Definition::has_detonator() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_detonator() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgPaintKit_Definition::clear_has_detonator() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgPaintKit_Definition::clear_detonator() {
  if (detonator_ != NULL) detonator_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_detonator();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::detonator() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.detonator)
  return detonator_ != NULL ? *detonator_ : *default_instance_->detonator_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_detonator() {
  set_has_detonator();
  if (detonator_ == NULL) detonator_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.detonator)
  return detonator_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_detonator() {
  clear_has_detonator();
  ::CMsgPaintKit_Definition_Item* temp = detonator_;
  detonator_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_detonator(::CMsgPaintKit_Definition_Item* detonator) {
  delete detonator_;
  detonator_ = detonator;
  if (detonator) {
    set_has_detonator();
  } else {
    clear_has_detonator();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.detonator)
}

// optional .CMsgPaintKit_Definition.Item gatling_gun = 34;
inline bool CMsgPaintKit_Definition::has_gatling_gun() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_gatling_gun() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgPaintKit_Definition::clear_has_gatling_gun() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgPaintKit_Definition::clear_gatling_gun() {
  if (gatling_gun_ != NULL) gatling_gun_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_gatling_gun();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::gatling_gun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.gatling_gun)
  return gatling_gun_ != NULL ? *gatling_gun_ : *default_instance_->gatling_gun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_gatling_gun() {
  set_has_gatling_gun();
  if (gatling_gun_ == NULL) gatling_gun_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.gatling_gun)
  return gatling_gun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_gatling_gun() {
  clear_has_gatling_gun();
  ::CMsgPaintKit_Definition_Item* temp = gatling_gun_;
  gatling_gun_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_gatling_gun(::CMsgPaintKit_Definition_Item* gatling_gun) {
  delete gatling_gun_;
  gatling_gun_ = gatling_gun;
  if (gatling_gun) {
    set_has_gatling_gun();
  } else {
    clear_has_gatling_gun();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.gatling_gun)
}

// optional .CMsgPaintKit_Definition.Item holymackerel = 35;
inline bool CMsgPaintKit_Definition::has_holymackerel() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_holymackerel() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgPaintKit_Definition::clear_has_holymackerel() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgPaintKit_Definition::clear_holymackerel() {
  if (holymackerel_ != NULL) holymackerel_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_holymackerel();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::holymackerel() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.holymackerel)
  return holymackerel_ != NULL ? *holymackerel_ : *default_instance_->holymackerel_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_holymackerel() {
  set_has_holymackerel();
  if (holymackerel_ == NULL) holymackerel_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.holymackerel)
  return holymackerel_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_holymackerel() {
  clear_has_holymackerel();
  ::CMsgPaintKit_Definition_Item* temp = holymackerel_;
  holymackerel_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_holymackerel(::CMsgPaintKit_Definition_Item* holymackerel) {
  delete holymackerel_;
  holymackerel_ = holymackerel;
  if (holymackerel) {
    set_has_holymackerel();
  } else {
    clear_has_holymackerel();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.holymackerel)
}

// optional .CMsgPaintKit_Definition.Item jag = 36;
inline bool CMsgPaintKit_Definition::has_jag() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_jag() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgPaintKit_Definition::clear_has_jag() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgPaintKit_Definition::clear_jag() {
  if (jag_ != NULL) jag_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_jag();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::jag() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.jag)
  return jag_ != NULL ? *jag_ : *default_instance_->jag_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_jag() {
  set_has_jag();
  if (jag_ == NULL) jag_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.jag)
  return jag_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_jag() {
  clear_has_jag();
  ::CMsgPaintKit_Definition_Item* temp = jag_;
  jag_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_jag(::CMsgPaintKit_Definition_Item* jag) {
  delete jag_;
  jag_ = jag;
  if (jag) {
    set_has_jag();
  } else {
    clear_has_jag();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.jag)
}

// optional .CMsgPaintKit_Definition.Item lochnload = 37;
inline bool CMsgPaintKit_Definition::has_lochnload() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_lochnload() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgPaintKit_Definition::clear_has_lochnload() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgPaintKit_Definition::clear_lochnload() {
  if (lochnload_ != NULL) lochnload_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_lochnload();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::lochnload() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.lochnload)
  return lochnload_ != NULL ? *lochnload_ : *default_instance_->lochnload_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_lochnload() {
  set_has_lochnload();
  if (lochnload_ == NULL) lochnload_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.lochnload)
  return lochnload_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_lochnload() {
  clear_has_lochnload();
  ::CMsgPaintKit_Definition_Item* temp = lochnload_;
  lochnload_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_lochnload(::CMsgPaintKit_Definition_Item* lochnload) {
  delete lochnload_;
  lochnload_ = lochnload;
  if (lochnload) {
    set_has_lochnload();
  } else {
    clear_has_lochnload();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.lochnload)
}

// optional .CMsgPaintKit_Definition.Item powerjack = 38;
inline bool CMsgPaintKit_Definition::has_powerjack() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_powerjack() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgPaintKit_Definition::clear_has_powerjack() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgPaintKit_Definition::clear_powerjack() {
  if (powerjack_ != NULL) powerjack_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_powerjack();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::powerjack() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.powerjack)
  return powerjack_ != NULL ? *powerjack_ : *default_instance_->powerjack_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_powerjack() {
  set_has_powerjack();
  if (powerjack_ == NULL) powerjack_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.powerjack)
  return powerjack_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_powerjack() {
  clear_has_powerjack();
  ::CMsgPaintKit_Definition_Item* temp = powerjack_;
  powerjack_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_powerjack(::CMsgPaintKit_Definition_Item* powerjack) {
  delete powerjack_;
  powerjack_ = powerjack;
  if (powerjack) {
    set_has_powerjack();
  } else {
    clear_has_powerjack();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.powerjack)
}

// optional .CMsgPaintKit_Definition.Item quadball = 39;
inline bool CMsgPaintKit_Definition::has_quadball() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_quadball() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgPaintKit_Definition::clear_has_quadball() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgPaintKit_Definition::clear_quadball() {
  if (quadball_ != NULL) quadball_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_quadball();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::quadball() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.quadball)
  return quadball_ != NULL ? *quadball_ : *default_instance_->quadball_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_quadball() {
  set_has_quadball();
  if (quadball_ == NULL) quadball_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.quadball)
  return quadball_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_quadball() {
  clear_has_quadball();
  ::CMsgPaintKit_Definition_Item* temp = quadball_;
  quadball_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_quadball(::CMsgPaintKit_Definition_Item* quadball) {
  delete quadball_;
  quadball_ = quadball;
  if (quadball) {
    set_has_quadball();
  } else {
    clear_has_quadball();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.quadball)
}

// optional .CMsgPaintKit_Definition.Item reserve_shooter = 40;
inline bool CMsgPaintKit_Definition::has_reserve_shooter() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_reserve_shooter() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgPaintKit_Definition::clear_has_reserve_shooter() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgPaintKit_Definition::clear_reserve_shooter() {
  if (reserve_shooter_ != NULL) reserve_shooter_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_reserve_shooter();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::reserve_shooter() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.reserve_shooter)
  return reserve_shooter_ != NULL ? *reserve_shooter_ : *default_instance_->reserve_shooter_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_reserve_shooter() {
  set_has_reserve_shooter();
  if (reserve_shooter_ == NULL) reserve_shooter_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.reserve_shooter)
  return reserve_shooter_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_reserve_shooter() {
  clear_has_reserve_shooter();
  ::CMsgPaintKit_Definition_Item* temp = reserve_shooter_;
  reserve_shooter_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_reserve_shooter(::CMsgPaintKit_Definition_Item* reserve_shooter) {
  delete reserve_shooter_;
  reserve_shooter_ = reserve_shooter;
  if (reserve_shooter) {
    set_has_reserve_shooter();
  } else {
    clear_has_reserve_shooter();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.reserve_shooter)
}

// optional .CMsgPaintKit_Definition.Item riding_crop = 41;
inline bool CMsgPaintKit_Definition::has_riding_crop() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_riding_crop() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgPaintKit_Definition::clear_has_riding_crop() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgPaintKit_Definition::clear_riding_crop() {
  if (riding_crop_ != NULL) riding_crop_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_riding_crop();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::riding_crop() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.riding_crop)
  return riding_crop_ != NULL ? *riding_crop_ : *default_instance_->riding_crop_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_riding_crop() {
  set_has_riding_crop();
  if (riding_crop_ == NULL) riding_crop_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.riding_crop)
  return riding_crop_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_riding_crop() {
  clear_has_riding_crop();
  ::CMsgPaintKit_Definition_Item* temp = riding_crop_;
  riding_crop_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_riding_crop(::CMsgPaintKit_Definition_Item* riding_crop) {
  delete riding_crop_;
  riding_crop_ = riding_crop;
  if (riding_crop) {
    set_has_riding_crop();
  } else {
    clear_has_riding_crop();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.riding_crop)
}

// optional .CMsgPaintKit_Definition.Item russian_riot = 42;
inline bool CMsgPaintKit_Definition::has_russian_riot() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_russian_riot() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgPaintKit_Definition::clear_has_russian_riot() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgPaintKit_Definition::clear_russian_riot() {
  if (russian_riot_ != NULL) russian_riot_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_russian_riot();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::russian_riot() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.russian_riot)
  return russian_riot_ != NULL ? *russian_riot_ : *default_instance_->russian_riot_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_russian_riot() {
  set_has_russian_riot();
  if (russian_riot_ == NULL) russian_riot_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.russian_riot)
  return russian_riot_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_russian_riot() {
  clear_has_russian_riot();
  ::CMsgPaintKit_Definition_Item* temp = russian_riot_;
  russian_riot_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_russian_riot(::CMsgPaintKit_Definition_Item* russian_riot) {
  delete russian_riot_;
  russian_riot_ = russian_riot;
  if (russian_riot) {
    set_has_russian_riot();
  } else {
    clear_has_russian_riot();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.russian_riot)
}

// optional .CMsgPaintKit_Definition.Item scimitar = 43;
inline bool CMsgPaintKit_Definition::has_scimitar() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_scimitar() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgPaintKit_Definition::clear_has_scimitar() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgPaintKit_Definition::clear_scimitar() {
  if (scimitar_ != NULL) scimitar_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_scimitar();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::scimitar() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.scimitar)
  return scimitar_ != NULL ? *scimitar_ : *default_instance_->scimitar_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_scimitar() {
  set_has_scimitar();
  if (scimitar_ == NULL) scimitar_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.scimitar)
  return scimitar_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_scimitar() {
  clear_has_scimitar();
  ::CMsgPaintKit_Definition_Item* temp = scimitar_;
  scimitar_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_scimitar(::CMsgPaintKit_Definition_Item* scimitar) {
  delete scimitar_;
  scimitar_ = scimitar;
  if (scimitar) {
    set_has_scimitar();
  } else {
    clear_has_scimitar();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.scimitar)
}

// optional .CMsgPaintKit_Definition.Item scorch_shot = 44;
inline bool CMsgPaintKit_Definition::has_scorch_shot() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_scorch_shot() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CMsgPaintKit_Definition::clear_has_scorch_shot() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CMsgPaintKit_Definition::clear_scorch_shot() {
  if (scorch_shot_ != NULL) scorch_shot_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_scorch_shot();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::scorch_shot() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.scorch_shot)
  return scorch_shot_ != NULL ? *scorch_shot_ : *default_instance_->scorch_shot_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_scorch_shot() {
  set_has_scorch_shot();
  if (scorch_shot_ == NULL) scorch_shot_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.scorch_shot)
  return scorch_shot_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_scorch_shot() {
  clear_has_scorch_shot();
  ::CMsgPaintKit_Definition_Item* temp = scorch_shot_;
  scorch_shot_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_scorch_shot(::CMsgPaintKit_Definition_Item* scorch_shot) {
  delete scorch_shot_;
  scorch_shot_ = scorch_shot;
  if (scorch_shot) {
    set_has_scorch_shot();
  } else {
    clear_has_scorch_shot();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.scorch_shot)
}

// optional .CMsgPaintKit_Definition.Item shortstop = 45;
inline bool CMsgPaintKit_Definition::has_shortstop() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_shortstop() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CMsgPaintKit_Definition::clear_has_shortstop() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CMsgPaintKit_Definition::clear_shortstop() {
  if (shortstop_ != NULL) shortstop_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_shortstop();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::shortstop() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.shortstop)
  return shortstop_ != NULL ? *shortstop_ : *default_instance_->shortstop_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_shortstop() {
  set_has_shortstop();
  if (shortstop_ == NULL) shortstop_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.shortstop)
  return shortstop_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_shortstop() {
  clear_has_shortstop();
  ::CMsgPaintKit_Definition_Item* temp = shortstop_;
  shortstop_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_shortstop(::CMsgPaintKit_Definition_Item* shortstop) {
  delete shortstop_;
  shortstop_ = shortstop;
  if (shortstop) {
    set_has_shortstop();
  } else {
    clear_has_shortstop();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.shortstop)
}

// optional .CMsgPaintKit_Definition.Item soda_popper = 46;
inline bool CMsgPaintKit_Definition::has_soda_popper() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_soda_popper() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CMsgPaintKit_Definition::clear_has_soda_popper() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CMsgPaintKit_Definition::clear_soda_popper() {
  if (soda_popper_ != NULL) soda_popper_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_soda_popper();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::soda_popper() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.soda_popper)
  return soda_popper_ != NULL ? *soda_popper_ : *default_instance_->soda_popper_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_soda_popper() {
  set_has_soda_popper();
  if (soda_popper_ == NULL) soda_popper_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.soda_popper)
  return soda_popper_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_soda_popper() {
  clear_has_soda_popper();
  ::CMsgPaintKit_Definition_Item* temp = soda_popper_;
  soda_popper_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_soda_popper(::CMsgPaintKit_Definition_Item* soda_popper) {
  delete soda_popper_;
  soda_popper_ = soda_popper;
  if (soda_popper) {
    set_has_soda_popper();
  } else {
    clear_has_soda_popper();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.soda_popper)
}

// optional .CMsgPaintKit_Definition.Item tele_shotgun = 47;
inline bool CMsgPaintKit_Definition::has_tele_shotgun() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_tele_shotgun() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CMsgPaintKit_Definition::clear_has_tele_shotgun() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CMsgPaintKit_Definition::clear_tele_shotgun() {
  if (tele_shotgun_ != NULL) tele_shotgun_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_tele_shotgun();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::tele_shotgun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.tele_shotgun)
  return tele_shotgun_ != NULL ? *tele_shotgun_ : *default_instance_->tele_shotgun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_tele_shotgun() {
  set_has_tele_shotgun();
  if (tele_shotgun_ == NULL) tele_shotgun_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.tele_shotgun)
  return tele_shotgun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_tele_shotgun() {
  clear_has_tele_shotgun();
  ::CMsgPaintKit_Definition_Item* temp = tele_shotgun_;
  tele_shotgun_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_tele_shotgun(::CMsgPaintKit_Definition_Item* tele_shotgun) {
  delete tele_shotgun_;
  tele_shotgun_ = tele_shotgun;
  if (tele_shotgun) {
    set_has_tele_shotgun();
  } else {
    clear_has_tele_shotgun();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.tele_shotgun)
}

// optional .CMsgPaintKit_Definition.Item tomislav = 48;
inline bool CMsgPaintKit_Definition::has_tomislav() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_tomislav() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CMsgPaintKit_Definition::clear_has_tomislav() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CMsgPaintKit_Definition::clear_tomislav() {
  if (tomislav_ != NULL) tomislav_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_tomislav();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::tomislav() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.tomislav)
  return tomislav_ != NULL ? *tomislav_ : *default_instance_->tomislav_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_tomislav() {
  set_has_tomislav();
  if (tomislav_ == NULL) tomislav_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.tomislav)
  return tomislav_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_tomislav() {
  clear_has_tomislav();
  ::CMsgPaintKit_Definition_Item* temp = tomislav_;
  tomislav_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_tomislav(::CMsgPaintKit_Definition_Item* tomislav) {
  delete tomislav_;
  tomislav_ = tomislav;
  if (tomislav) {
    set_has_tomislav();
  } else {
    clear_has_tomislav();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.tomislav)
}

// optional .CMsgPaintKit_Definition.Item trenchgun = 49;
inline bool CMsgPaintKit_Definition::has_trenchgun() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_trenchgun() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CMsgPaintKit_Definition::clear_has_trenchgun() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CMsgPaintKit_Definition::clear_trenchgun() {
  if (trenchgun_ != NULL) trenchgun_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_trenchgun();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::trenchgun() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.trenchgun)
  return trenchgun_ != NULL ? *trenchgun_ : *default_instance_->trenchgun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_trenchgun() {
  set_has_trenchgun();
  if (trenchgun_ == NULL) trenchgun_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.trenchgun)
  return trenchgun_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_trenchgun() {
  clear_has_trenchgun();
  ::CMsgPaintKit_Definition_Item* temp = trenchgun_;
  trenchgun_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_trenchgun(::CMsgPaintKit_Definition_Item* trenchgun) {
  delete trenchgun_;
  trenchgun_ = trenchgun;
  if (trenchgun) {
    set_has_trenchgun();
  } else {
    clear_has_trenchgun();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.trenchgun)
}

// optional .CMsgPaintKit_Definition.Item winger_pistol = 50;
inline bool CMsgPaintKit_Definition::has_winger_pistol() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CMsgPaintKit_Definition::set_has_winger_pistol() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CMsgPaintKit_Definition::clear_has_winger_pistol() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CMsgPaintKit_Definition::clear_winger_pistol() {
  if (winger_pistol_ != NULL) winger_pistol_->::CMsgPaintKit_Definition_Item::Clear();
  clear_has_winger_pistol();
}
inline const ::CMsgPaintKit_Definition_Item& CMsgPaintKit_Definition::winger_pistol() const {
  // @@protoc_insertion_point(field_get:CMsgPaintKit_Definition.winger_pistol)
  return winger_pistol_ != NULL ? *winger_pistol_ : *default_instance_->winger_pistol_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::mutable_winger_pistol() {
  set_has_winger_pistol();
  if (winger_pistol_ == NULL) winger_pistol_ = new ::CMsgPaintKit_Definition_Item;
  // @@protoc_insertion_point(field_mutable:CMsgPaintKit_Definition.winger_pistol)
  return winger_pistol_;
}
inline ::CMsgPaintKit_Definition_Item* CMsgPaintKit_Definition::release_winger_pistol() {
  clear_has_winger_pistol();
  ::CMsgPaintKit_Definition_Item* temp = winger_pistol_;
  winger_pistol_ = NULL;
  return temp;
}
inline void CMsgPaintKit_Definition::set_allocated_winger_pistol(::CMsgPaintKit_Definition_Item* winger_pistol) {
  delete winger_pistol_;
  winger_pistol_ = winger_pistol;
  if (winger_pistol) {
    set_has_winger_pistol();
  } else {
    clear_has_winger_pistol();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgPaintKit_Definition.winger_pistol)
}

// -------------------------------------------------------------------

// CMsgQuestTheme_WeightedString

// optional string string = 1;
inline bool CMsgQuestTheme_WeightedString::has_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestTheme_WeightedString::set_has_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestTheme_WeightedString::clear_has_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestTheme_WeightedString::clear_string() {
  if (string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_->clear();
  }
  clear_has_string();
}
inline const ::std::string& CMsgQuestTheme_WeightedString::string() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.WeightedString.string)
  return *string_;
}
inline void CMsgQuestTheme_WeightedString::set_string(const ::std::string& value) {
  set_has_string();
  if (string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_ = new ::std::string;
  }
  string_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.WeightedString.string)
}
inline void CMsgQuestTheme_WeightedString::set_string(const char* value) {
  set_has_string();
  if (string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_ = new ::std::string;
  }
  string_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestTheme.WeightedString.string)
}
inline void CMsgQuestTheme_WeightedString::set_string(const char* value, size_t size) {
  set_has_string();
  if (string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_ = new ::std::string;
  }
  string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestTheme.WeightedString.string)
}
inline ::std::string* CMsgQuestTheme_WeightedString::mutable_string() {
  set_has_string();
  if (string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.WeightedString.string)
  return string_;
}
inline ::std::string* CMsgQuestTheme_WeightedString::release_string() {
  clear_has_string();
  if (string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = string_;
    string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestTheme_WeightedString::set_allocated_string(::std::string* string) {
  if (string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_;
  }
  if (string) {
    set_has_string();
    string_ = string;
  } else {
    clear_has_string();
    string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.WeightedString.string)
}

// optional uint32 weight = 2;
inline bool CMsgQuestTheme_WeightedString::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestTheme_WeightedString::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestTheme_WeightedString::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestTheme_WeightedString::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 CMsgQuestTheme_WeightedString::weight() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.WeightedString.weight)
  return weight_;
}
inline void CMsgQuestTheme_WeightedString::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.WeightedString.weight)
}

// -------------------------------------------------------------------

// CMsgQuestTheme_WeightedStringSet

// repeated .CMsgQuestTheme.WeightedString weighted_strings = 1;
inline int CMsgQuestTheme_WeightedStringSet::weighted_strings_size() const {
  return weighted_strings_.size();
}
inline void CMsgQuestTheme_WeightedStringSet::clear_weighted_strings() {
  weighted_strings_.Clear();
}
inline const ::CMsgQuestTheme_WeightedString& CMsgQuestTheme_WeightedStringSet::weighted_strings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return weighted_strings_.Get(index);
}
inline ::CMsgQuestTheme_WeightedString* CMsgQuestTheme_WeightedStringSet::mutable_weighted_strings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return weighted_strings_.Mutable(index);
}
inline ::CMsgQuestTheme_WeightedString* CMsgQuestTheme_WeightedStringSet::add_weighted_strings() {
  // @@protoc_insertion_point(field_add:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return weighted_strings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedString >&
CMsgQuestTheme_WeightedStringSet::weighted_strings() const {
  // @@protoc_insertion_point(field_list:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return weighted_strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedString >*
CMsgQuestTheme_WeightedStringSet::mutable_weighted_strings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestTheme.WeightedStringSet.weighted_strings)
  return &weighted_strings_;
}

// -------------------------------------------------------------------

// CMsgQuestTheme

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgQuestTheme::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestTheme::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestTheme::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestTheme::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgQuestTheme::header() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestTheme::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgQuestTheme::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgQuestTheme::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.header)
}

// optional string notification_res = 2;
inline bool CMsgQuestTheme::has_notification_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestTheme::set_has_notification_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestTheme::clear_has_notification_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestTheme::clear_notification_res() {
  if (notification_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notification_res_->clear();
  }
  clear_has_notification_res();
}
inline const ::std::string& CMsgQuestTheme::notification_res() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.notification_res)
  return *notification_res_;
}
inline void CMsgQuestTheme::set_notification_res(const ::std::string& value) {
  set_has_notification_res();
  if (notification_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notification_res_ = new ::std::string;
  }
  notification_res_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.notification_res)
}
inline void CMsgQuestTheme::set_notification_res(const char* value) {
  set_has_notification_res();
  if (notification_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notification_res_ = new ::std::string;
  }
  notification_res_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestTheme.notification_res)
}
inline void CMsgQuestTheme::set_notification_res(const char* value, size_t size) {
  set_has_notification_res();
  if (notification_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notification_res_ = new ::std::string;
  }
  notification_res_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestTheme.notification_res)
}
inline ::std::string* CMsgQuestTheme::mutable_notification_res() {
  set_has_notification_res();
  if (notification_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notification_res_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.notification_res)
  return notification_res_;
}
inline ::std::string* CMsgQuestTheme::release_notification_res() {
  clear_has_notification_res();
  if (notification_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notification_res_;
    notification_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestTheme::set_allocated_notification_res(::std::string* notification_res) {
  if (notification_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notification_res_;
  }
  if (notification_res) {
    set_has_notification_res();
    notification_res_ = notification_res;
  } else {
    clear_has_notification_res();
    notification_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.notification_res)
}

// optional string quest_item_res = 3;
inline bool CMsgQuestTheme::has_quest_item_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgQuestTheme::set_has_quest_item_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgQuestTheme::clear_has_quest_item_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgQuestTheme::clear_quest_item_res() {
  if (quest_item_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quest_item_res_->clear();
  }
  clear_has_quest_item_res();
}
inline const ::std::string& CMsgQuestTheme::quest_item_res() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.quest_item_res)
  return *quest_item_res_;
}
inline void CMsgQuestTheme::set_quest_item_res(const ::std::string& value) {
  set_has_quest_item_res();
  if (quest_item_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quest_item_res_ = new ::std::string;
  }
  quest_item_res_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.quest_item_res)
}
inline void CMsgQuestTheme::set_quest_item_res(const char* value) {
  set_has_quest_item_res();
  if (quest_item_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quest_item_res_ = new ::std::string;
  }
  quest_item_res_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestTheme.quest_item_res)
}
inline void CMsgQuestTheme::set_quest_item_res(const char* value, size_t size) {
  set_has_quest_item_res();
  if (quest_item_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quest_item_res_ = new ::std::string;
  }
  quest_item_res_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestTheme.quest_item_res)
}
inline ::std::string* CMsgQuestTheme::mutable_quest_item_res() {
  set_has_quest_item_res();
  if (quest_item_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quest_item_res_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.quest_item_res)
  return quest_item_res_;
}
inline ::std::string* CMsgQuestTheme::release_quest_item_res() {
  clear_has_quest_item_res();
  if (quest_item_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quest_item_res_;
    quest_item_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestTheme::set_allocated_quest_item_res(::std::string* quest_item_res) {
  if (quest_item_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quest_item_res_;
  }
  if (quest_item_res) {
    set_has_quest_item_res();
    quest_item_res_ = quest_item_res;
  } else {
    clear_has_quest_item_res();
    quest_item_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.quest_item_res)
}

// optional string in_game_tracker_res = 4;
inline bool CMsgQuestTheme::has_in_game_tracker_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgQuestTheme::set_has_in_game_tracker_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgQuestTheme::clear_has_in_game_tracker_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgQuestTheme::clear_in_game_tracker_res() {
  if (in_game_tracker_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    in_game_tracker_res_->clear();
  }
  clear_has_in_game_tracker_res();
}
inline const ::std::string& CMsgQuestTheme::in_game_tracker_res() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.in_game_tracker_res)
  return *in_game_tracker_res_;
}
inline void CMsgQuestTheme::set_in_game_tracker_res(const ::std::string& value) {
  set_has_in_game_tracker_res();
  if (in_game_tracker_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    in_game_tracker_res_ = new ::std::string;
  }
  in_game_tracker_res_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.in_game_tracker_res)
}
inline void CMsgQuestTheme::set_in_game_tracker_res(const char* value) {
  set_has_in_game_tracker_res();
  if (in_game_tracker_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    in_game_tracker_res_ = new ::std::string;
  }
  in_game_tracker_res_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestTheme.in_game_tracker_res)
}
inline void CMsgQuestTheme::set_in_game_tracker_res(const char* value, size_t size) {
  set_has_in_game_tracker_res();
  if (in_game_tracker_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    in_game_tracker_res_ = new ::std::string;
  }
  in_game_tracker_res_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestTheme.in_game_tracker_res)
}
inline ::std::string* CMsgQuestTheme::mutable_in_game_tracker_res() {
  set_has_in_game_tracker_res();
  if (in_game_tracker_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    in_game_tracker_res_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.in_game_tracker_res)
  return in_game_tracker_res_;
}
inline ::std::string* CMsgQuestTheme::release_in_game_tracker_res() {
  clear_has_in_game_tracker_res();
  if (in_game_tracker_res_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = in_game_tracker_res_;
    in_game_tracker_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestTheme::set_allocated_in_game_tracker_res(::std::string* in_game_tracker_res) {
  if (in_game_tracker_res_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete in_game_tracker_res_;
  }
  if (in_game_tracker_res) {
    set_has_in_game_tracker_res();
    in_game_tracker_res_ = in_game_tracker_res;
  } else {
    clear_has_in_game_tracker_res();
    in_game_tracker_res_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.in_game_tracker_res)
}

// repeated .CMsgQuestTheme.WeightedStringSet give_sounds = 5;
inline int CMsgQuestTheme::give_sounds_size() const {
  return give_sounds_.size();
}
inline void CMsgQuestTheme::clear_give_sounds() {
  give_sounds_.Clear();
}
inline const ::CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme::give_sounds(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.give_sounds)
  return give_sounds_.Get(index);
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::mutable_give_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.give_sounds)
  return give_sounds_.Mutable(index);
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::add_give_sounds() {
  // @@protoc_insertion_point(field_add:CMsgQuestTheme.give_sounds)
  return give_sounds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
CMsgQuestTheme::give_sounds() const {
  // @@protoc_insertion_point(field_list:CMsgQuestTheme.give_sounds)
  return give_sounds_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
CMsgQuestTheme::mutable_give_sounds() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestTheme.give_sounds)
  return &give_sounds_;
}

// repeated .CMsgQuestTheme.WeightedStringSet complete_sounds = 6;
inline int CMsgQuestTheme::complete_sounds_size() const {
  return complete_sounds_.size();
}
inline void CMsgQuestTheme::clear_complete_sounds() {
  complete_sounds_.Clear();
}
inline const ::CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme::complete_sounds(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.complete_sounds)
  return complete_sounds_.Get(index);
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::mutable_complete_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.complete_sounds)
  return complete_sounds_.Mutable(index);
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::add_complete_sounds() {
  // @@protoc_insertion_point(field_add:CMsgQuestTheme.complete_sounds)
  return complete_sounds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
CMsgQuestTheme::complete_sounds() const {
  // @@protoc_insertion_point(field_list:CMsgQuestTheme.complete_sounds)
  return complete_sounds_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
CMsgQuestTheme::mutable_complete_sounds() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestTheme.complete_sounds)
  return &complete_sounds_;
}

// repeated .CMsgQuestTheme.WeightedStringSet fully_complete_sounds = 7;
inline int CMsgQuestTheme::fully_complete_sounds_size() const {
  return fully_complete_sounds_.size();
}
inline void CMsgQuestTheme::clear_fully_complete_sounds() {
  fully_complete_sounds_.Clear();
}
inline const ::CMsgQuestTheme_WeightedStringSet& CMsgQuestTheme::fully_complete_sounds(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.fully_complete_sounds)
  return fully_complete_sounds_.Get(index);
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::mutable_fully_complete_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.fully_complete_sounds)
  return fully_complete_sounds_.Mutable(index);
}
inline ::CMsgQuestTheme_WeightedStringSet* CMsgQuestTheme::add_fully_complete_sounds() {
  // @@protoc_insertion_point(field_add:CMsgQuestTheme.fully_complete_sounds)
  return fully_complete_sounds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >&
CMsgQuestTheme::fully_complete_sounds() const {
  // @@protoc_insertion_point(field_list:CMsgQuestTheme.fully_complete_sounds)
  return fully_complete_sounds_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestTheme_WeightedStringSet >*
CMsgQuestTheme::mutable_fully_complete_sounds() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestTheme.fully_complete_sounds)
  return &fully_complete_sounds_;
}

// optional string reward_sound = 8;
inline bool CMsgQuestTheme::has_reward_sound() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgQuestTheme::set_has_reward_sound() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgQuestTheme::clear_has_reward_sound() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgQuestTheme::clear_reward_sound() {
  if (reward_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_sound_->clear();
  }
  clear_has_reward_sound();
}
inline const ::std::string& CMsgQuestTheme::reward_sound() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.reward_sound)
  return *reward_sound_;
}
inline void CMsgQuestTheme::set_reward_sound(const ::std::string& value) {
  set_has_reward_sound();
  if (reward_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_sound_ = new ::std::string;
  }
  reward_sound_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.reward_sound)
}
inline void CMsgQuestTheme::set_reward_sound(const char* value) {
  set_has_reward_sound();
  if (reward_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_sound_ = new ::std::string;
  }
  reward_sound_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestTheme.reward_sound)
}
inline void CMsgQuestTheme::set_reward_sound(const char* value, size_t size) {
  set_has_reward_sound();
  if (reward_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_sound_ = new ::std::string;
  }
  reward_sound_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestTheme.reward_sound)
}
inline ::std::string* CMsgQuestTheme::mutable_reward_sound() {
  set_has_reward_sound();
  if (reward_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_sound_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.reward_sound)
  return reward_sound_;
}
inline ::std::string* CMsgQuestTheme::release_reward_sound() {
  clear_has_reward_sound();
  if (reward_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reward_sound_;
    reward_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestTheme::set_allocated_reward_sound(::std::string* reward_sound) {
  if (reward_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_sound_;
  }
  if (reward_sound) {
    set_has_reward_sound();
    reward_sound_ = reward_sound;
  } else {
    clear_has_reward_sound();
    reward_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.reward_sound)
}

// optional string discard_sound = 9;
inline bool CMsgQuestTheme::has_discard_sound() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgQuestTheme::set_has_discard_sound() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgQuestTheme::clear_has_discard_sound() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgQuestTheme::clear_discard_sound() {
  if (discard_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discard_sound_->clear();
  }
  clear_has_discard_sound();
}
inline const ::std::string& CMsgQuestTheme::discard_sound() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.discard_sound)
  return *discard_sound_;
}
inline void CMsgQuestTheme::set_discard_sound(const ::std::string& value) {
  set_has_discard_sound();
  if (discard_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discard_sound_ = new ::std::string;
  }
  discard_sound_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.discard_sound)
}
inline void CMsgQuestTheme::set_discard_sound(const char* value) {
  set_has_discard_sound();
  if (discard_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discard_sound_ = new ::std::string;
  }
  discard_sound_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestTheme.discard_sound)
}
inline void CMsgQuestTheme::set_discard_sound(const char* value, size_t size) {
  set_has_discard_sound();
  if (discard_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discard_sound_ = new ::std::string;
  }
  discard_sound_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestTheme.discard_sound)
}
inline ::std::string* CMsgQuestTheme::mutable_discard_sound() {
  set_has_discard_sound();
  if (discard_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    discard_sound_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.discard_sound)
  return discard_sound_;
}
inline ::std::string* CMsgQuestTheme::release_discard_sound() {
  clear_has_discard_sound();
  if (discard_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = discard_sound_;
    discard_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestTheme::set_allocated_discard_sound(::std::string* discard_sound) {
  if (discard_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete discard_sound_;
  }
  if (discard_sound) {
    set_has_discard_sound();
    discard_sound_ = discard_sound;
  } else {
    clear_has_discard_sound();
    discard_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.discard_sound)
}

// optional string reveal_sound = 10;
inline bool CMsgQuestTheme::has_reveal_sound() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgQuestTheme::set_has_reveal_sound() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgQuestTheme::clear_has_reveal_sound() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgQuestTheme::clear_reveal_sound() {
  if (reveal_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reveal_sound_->clear();
  }
  clear_has_reveal_sound();
}
inline const ::std::string& CMsgQuestTheme::reveal_sound() const {
  // @@protoc_insertion_point(field_get:CMsgQuestTheme.reveal_sound)
  return *reveal_sound_;
}
inline void CMsgQuestTheme::set_reveal_sound(const ::std::string& value) {
  set_has_reveal_sound();
  if (reveal_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reveal_sound_ = new ::std::string;
  }
  reveal_sound_->assign(value);
  // @@protoc_insertion_point(field_set:CMsgQuestTheme.reveal_sound)
}
inline void CMsgQuestTheme::set_reveal_sound(const char* value) {
  set_has_reveal_sound();
  if (reveal_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reveal_sound_ = new ::std::string;
  }
  reveal_sound_->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgQuestTheme.reveal_sound)
}
inline void CMsgQuestTheme::set_reveal_sound(const char* value, size_t size) {
  set_has_reveal_sound();
  if (reveal_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reveal_sound_ = new ::std::string;
  }
  reveal_sound_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgQuestTheme.reveal_sound)
}
inline ::std::string* CMsgQuestTheme::mutable_reveal_sound() {
  set_has_reveal_sound();
  if (reveal_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reveal_sound_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CMsgQuestTheme.reveal_sound)
  return reveal_sound_;
}
inline ::std::string* CMsgQuestTheme::release_reveal_sound() {
  clear_has_reveal_sound();
  if (reveal_sound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reveal_sound_;
    reveal_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CMsgQuestTheme::set_allocated_reveal_sound(::std::string* reveal_sound) {
  if (reveal_sound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reveal_sound_;
  }
  if (reveal_sound) {
    set_has_reveal_sound();
    reveal_sound_ = reveal_sound;
  } else {
    clear_has_reveal_sound();
    reveal_sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestTheme.reveal_sound)
}

// -------------------------------------------------------------------

// CMsgQuestMapNodeCondition_NodeState

// optional uint32 bonus_objectives_required = 1 [default = 0];
inline bool CMsgQuestMapNodeCondition_NodeState::has_bonus_objectives_required() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestMapNodeCondition_NodeState::set_has_bonus_objectives_required() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestMapNodeCondition_NodeState::clear_has_bonus_objectives_required() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestMapNodeCondition_NodeState::clear_bonus_objectives_required() {
  bonus_objectives_required_ = 0u;
  clear_has_bonus_objectives_required();
}
inline ::google::protobuf::uint32 CMsgQuestMapNodeCondition_NodeState::bonus_objectives_required() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition_NodeState.bonus_objectives_required)
  return bonus_objectives_required_;
}
inline void CMsgQuestMapNodeCondition_NodeState::set_bonus_objectives_required(::google::protobuf::uint32 value) {
  set_has_bonus_objectives_required();
  bonus_objectives_required_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeCondition_NodeState.bonus_objectives_required)
}

// required .CMsgProtoDefID target_node_defid = 2;
inline bool CMsgQuestMapNodeCondition_NodeState::has_target_node_defid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgQuestMapNodeCondition_NodeState::set_has_target_node_defid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgQuestMapNodeCondition_NodeState::clear_has_target_node_defid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgQuestMapNodeCondition_NodeState::clear_target_node_defid() {
  if (target_node_defid_ != NULL) target_node_defid_->::CMsgProtoDefID::Clear();
  clear_has_target_node_defid();
}
inline const ::CMsgProtoDefID& CMsgQuestMapNodeCondition_NodeState::target_node_defid() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition_NodeState.target_node_defid)
  return target_node_defid_ != NULL ? *target_node_defid_ : *default_instance_->target_node_defid_;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeCondition_NodeState::mutable_target_node_defid() {
  set_has_target_node_defid();
  if (target_node_defid_ == NULL) target_node_defid_ = new ::CMsgProtoDefID;
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeCondition_NodeState.target_node_defid)
  return target_node_defid_;
}
inline ::CMsgProtoDefID* CMsgQuestMapNodeCondition_NodeState::release_target_node_defid() {
  clear_has_target_node_defid();
  ::CMsgProtoDefID* temp = target_node_defid_;
  target_node_defid_ = NULL;
  return temp;
}
inline void CMsgQuestMapNodeCondition_NodeState::set_allocated_target_node_defid(::CMsgProtoDefID* target_node_defid) {
  delete target_node_defid_;
  target_node_defid_ = target_node_defid;
  if (target_node_defid) {
    set_has_target_node_defid();
  } else {
    clear_has_target_node_defid();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgQuestMapNodeCondition_NodeState.target_node_defid)
}

// -------------------------------------------------------------------

// CMsgQuestMapNodeCondition_Logic

// required .LogicalOperation operation = 1;
inline bool CMsgQuestMapNodeCondition_Logic::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgQuestMapNodeCondition_Logic::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgQuestMapNodeCondition_Logic::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgQuestMapNodeCondition_Logic::clear_operation() {
  operation_ = 0;
  clear_has_operation();
}
inline ::LogicalOperation CMsgQuestMapNodeCondition_Logic::operation() const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition_Logic.operation)
  return static_cast< ::LogicalOperation >(operation_);
}
inline void CMsgQuestMapNodeCondition_Logic::set_operation(::LogicalOperation value) {
  assert(::LogicalOperation_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:CMsgQuestMapNodeCondition_Logic.operation)
}

// repeated .CMsgQuestMapNodeCondition sub_conditions = 2;
inline int CMsgQuestMapNodeCondition_Logic::sub_conditions_size() const {
  return sub_conditions_.size();
}
inline void CMsgQuestMapNodeCondition_Logic::clear_sub_conditions() {
  sub_conditions_.Clear();
}
inline const ::CMsgQuestMapNodeCondition& CMsgQuestMapNodeCondition_Logic::sub_conditions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return sub_conditions_.Get(index);
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeCondition_Logic::mutable_sub_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return sub_conditions_.Mutable(index);
}
inline ::CMsgQuestMapNodeCondition* CMsgQuestMapNodeCondition_Logic::add_sub_conditions() {
  // @@protoc_insertion_point(field_add:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return sub_conditions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapNodeCondition >&
CMsgQuestMapNodeCondition_Logic::sub_conditions() const {
  // @@protoc_insertion_point(field_list:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return sub_conditions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgQuestMapNodeCondition >*
CMsgQuestMapNodeCondition_Logic::mutable_sub_conditions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuestMapNodeCondition_Logic.sub_conditions)
  return &sub_conditions_;
}

// -------------------------------------------------------------------

// CMsgQuestMapNodeCondition

// optional .CMsgQuestMapNodeCondition_NodeState node_state = 1;
inline bool CMsgQuestMapNodeCondition::has_node_state() const {
  return operation_case() == kNodeState;
}
inline void CMsgQuestMapNodeCondition::set_has_node_state() {
  _oneof_case_[0] = kNodeState;
}
inline void CMsgQuestMapNodeCondition::clear_node_state() {
  if (has_node_state()) {
    delete operation_.node_state_;
    clear_has_operation();
  }
}
inline const ::CMsgQuestMapNodeCondition_NodeState& CMsgQuestMapNodeCondition::node_state() const {
  return has_node_state() ? *operation_.node_state_
                      : ::CMsgQuestMapNodeCondition_NodeState::default_instance();
}
inline ::CMsgQuestMapNodeCondition_NodeState* CMsgQuestMapNodeCondition::mutable_node_state() {
  if (!has_node_state()) {
    clear_operation();
    set_has_node_state();
    operation_.node_state_ = new ::CMsgQuestMapNodeCondition_NodeState;
  }
  return operation_.node_state_;
}
inline ::CMsgQuestMapNodeCondition_NodeState* CMsgQuestMapNodeCondition::release_node_state() {
  if (has_node_state()) {
    clear_has_operation();
    ::CMsgQuestMapNodeCondition_NodeState* temp = operation_.node_state_;
    operation_.node_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgQuestMapNodeCondition::set_allocated_node_state(::CMsgQuestMapNodeCondition_NodeState* node_state) {
  clear_operation();
  if (node_state) {
    set_has_node_state();
    operation_.node_state_ = node_state;
  }
}

// optional .CMsgQuestMapNodeCondition_Logic logical = 2;
inline bool CMsgQuestMapNodeCondition::has_logical() const {
  return operation_case() == kLogical;
}
inline void CMsgQuestMapNodeCondition::set_has_logical() {
  _oneof_case_[0] = kLogical;
}
inline void CMsgQuestMapNodeCondition::clear_logical() {
  if (has_logical()) {
    delete operation_.logical_;
    clear_has_operation();
  }
}
inline const ::CMsgQuestMapNodeCondition_Logic& CMsgQuestMapNodeCondition::logical() const {
  return has_logical() ? *operation_.logical_
                      : ::CMsgQuestMapNodeCondition_Logic::default_instance();
}
inline ::CMsgQuestMapNodeCondition_Logic* CMsgQuestMapNodeCondition::mutable_logical() {
  if (!has_logical()) {
    clear_operation();
    set_has_logical();
    operation_.logical_ = new ::CMsgQuestMapNodeCondition_Logic;
  }
  return operation_.logical_;
}
inline ::CMsgQuestMapNodeCondition_Logic* CMsgQuestMapNodeCondition::release_logical() {
  if (has_logical()) {
    clear_has_operation();
    ::CMsgQuestMapNodeCondition_Logic* temp = operation_.logical_;
    operation_.logical_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CMsgQuestMapNodeCondition::set_allocated_logical(::CMsgQuestMapNodeCondition_Logic* logical) {
  clear_operation();
  if (logical) {
    set_has_logical();
    operation_.logical_ = logical;
  }
}

inline bool CMsgQuestMapNodeCondition::has_operation() {
  return operation_case() != OPERATION_NOT_SET;
}
inline void CMsgQuestMapNodeCondition::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline CMsgQuestMapNodeCondition::OperationCase CMsgQuestMapNodeCondition::operation_case() const {
  return CMsgQuestMapNodeCondition::OperationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgHeaderOnly

// required .CMsgProtoDefHeader header = 1;
inline bool CMsgHeaderOnly::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgHeaderOnly::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgHeaderOnly::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgHeaderOnly::clear_header() {
  if (header_ != NULL) header_->::CMsgProtoDefHeader::Clear();
  clear_has_header();
}
inline const ::CMsgProtoDefHeader& CMsgHeaderOnly::header() const {
  // @@protoc_insertion_point(field_get:CMsgHeaderOnly.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CMsgProtoDefHeader* CMsgHeaderOnly::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::CMsgProtoDefHeader;
  // @@protoc_insertion_point(field_mutable:CMsgHeaderOnly.header)
  return header_;
}
inline ::CMsgProtoDefHeader* CMsgHeaderOnly::release_header() {
  clear_has_header();
  ::CMsgProtoDefHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CMsgHeaderOnly::set_allocated_header(::CMsgProtoDefHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgHeaderOnly.header)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CMsgQuestObjectiveDef_ETF2GameModes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgQuestObjectiveDef_ETF2GameModes>() {
  return ::CMsgQuestObjectiveDef_ETF2GameModes_descriptor();
}
template <> struct is_proto_enum< ::CMsgQuestObjectiveDef_ETF2Conditions> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgQuestObjectiveDef_ETF2Conditions>() {
  return ::CMsgQuestObjectiveDef_ETF2Conditions_descriptor();
}
template <> struct is_proto_enum< ::CMsgQuestObjectiveDef_ETF2Team> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgQuestObjectiveDef_ETF2Team>() {
  return ::CMsgQuestObjectiveDef_ETF2Team_descriptor();
}
template <> struct is_proto_enum< ::LogicalOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogicalOperation>() {
  return ::LogicalOperation_descriptor();
}
template <> struct is_proto_enum< ::EValueDefinitionSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EValueDefinitionSource>() {
  return ::EValueDefinitionSource_descriptor();
}
template <> struct is_proto_enum< ::ProtoDefTypes> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoDefTypes>() {
  return ::ProtoDefTypes_descriptor();
}
template <> struct is_proto_enum< ::EQuestPoints> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EQuestPoints>() {
  return ::EQuestPoints_descriptor();
}
template <> struct is_proto_enum< ::EVarFieldType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EVarFieldType>() {
  return ::EVarFieldType_descriptor();
}
template <> struct is_proto_enum< ::ENodeCashReward> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ENodeCashReward>() {
  return ::ENodeCashReward_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

// VALVE
#if _MSC_VER >= 1300
#pragma warning( pop )
#endif // _MSC_VER
#if _GNUC
#pragma GCC diagnostic pop
#endif // _GNUC

// VALVE

// VALVE
#if _MSC_VER >= 1300
#pragma warning( pop )
#endif // _MSC_VER
#if _GNUC
#pragma GCC diagnostic pop
#endif // _GNUC

// VALVE

// VALVE
#if _MSC_VER >= 1300
#pragma warning( pop )
#endif // _MSC_VER
#if _GNUC
#pragma GCC diagnostic pop
#endif // _GNUC

// VALVE

#endif  // PROTOBUF_tf_5fproto_5fdef_5fmessages_2eproto__INCLUDED
